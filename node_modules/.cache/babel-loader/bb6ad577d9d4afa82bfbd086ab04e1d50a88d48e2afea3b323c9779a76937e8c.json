{"ast":null,"code":"import { UAParser } from 'ua-parser-js';\nexport const browserMeta = () => {\n  const parser = new UAParser();\n  const {\n    name,\n    version\n  } = parser.getBrowser();\n  const {\n    name: osName,\n    version: osVersion\n  } = parser.getOS();\n  const userAgent = parser.getUA();\n  const language = navigator.language;\n  const mobile = navigator.userAgent.includes('Mobi');\n  const brands = getBrands();\n  const unknown = 'unknown';\n  return {\n    browser: {\n      name: name !== null && name !== void 0 ? name : unknown,\n      version: version !== null && version !== void 0 ? version : unknown,\n      os: `${osName !== null && osName !== void 0 ? osName : unknown} ${osVersion !== null && osVersion !== void 0 ? osVersion : unknown}`,\n      userAgent: userAgent !== null && userAgent !== void 0 ? userAgent : unknown,\n      language: language !== null && language !== void 0 ? language : unknown,\n      mobile,\n      brands: brands !== null && brands !== void 0 ? brands : unknown\n    }\n  };\n  function getBrands() {\n    if (!name || !version) {\n      return undefined;\n    }\n    if ('userAgentData' in navigator && navigator.userAgentData) {\n      // userAgentData in experimental (only Chrome supports it) thus TS does not ship the respective type declarations\n      return navigator.userAgentData.brands;\n    }\n    return undefined;\n  }\n};","map":{"version":3,"names":["UAParser","browserMeta","parser","name","version","getBrowser","osName","osVersion","getOS","userAgent","getUA","language","navigator","mobile","includes","brands","getBrands","unknown","browser","os","undefined","userAgentData"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/metas/browser/meta.ts"],"sourcesContent":["import { UAParser } from 'ua-parser-js';\n\nimport type { Meta, MetaBrowser, MetaItem } from '@grafana/faro-core';\n\nexport const browserMeta: MetaItem<Pick<Meta, 'browser'>> = () => {\n  const parser = new UAParser();\n  const { name, version } = parser.getBrowser();\n  const { name: osName, version: osVersion } = parser.getOS();\n  const userAgent = parser.getUA();\n  const language = navigator.language;\n  const mobile = navigator.userAgent.includes('Mobi');\n  const brands = getBrands();\n  const unknown = 'unknown';\n\n  return {\n    browser: {\n      name: name ?? unknown,\n      version: version ?? unknown,\n      os: `${osName ?? unknown} ${osVersion ?? unknown}`,\n      userAgent: userAgent ?? unknown,\n      language: language ?? unknown,\n      mobile,\n      brands: brands ?? unknown,\n    },\n  };\n\n  function getBrands(): MetaBrowser['brands'] | undefined {\n    if (!name || !version) {\n      return undefined;\n    }\n\n    if ('userAgentData' in navigator && navigator.userAgentData) {\n      // userAgentData in experimental (only Chrome supports it) thus TS does not ship the respective type declarations\n      return (navigator as any).userAgentData.brands;\n    }\n\n    return undefined;\n  }\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,cAAc;AAIvC,OAAO,MAAMC,WAAW,GAAoCA,CAAA,KAAK;EAC/D,MAAMC,MAAM,GAAG,IAAIF,QAAQ,EAAE;EAC7B,MAAM;IAAEG,IAAI;IAAEC;EAAO,CAAE,GAAGF,MAAM,CAACG,UAAU,EAAE;EAC7C,MAAM;IAAEF,IAAI,EAAEG,MAAM;IAAEF,OAAO,EAAEG;EAAS,CAAE,GAAGL,MAAM,CAACM,KAAK,EAAE;EAC3D,MAAMC,SAAS,GAAGP,MAAM,CAACQ,KAAK,EAAE;EAChC,MAAMC,QAAQ,GAAGC,SAAS,CAACD,QAAQ;EACnC,MAAME,MAAM,GAAGD,SAAS,CAACH,SAAS,CAACK,QAAQ,CAAC,MAAM,CAAC;EACnD,MAAMC,MAAM,GAAGC,SAAS,EAAE;EAC1B,MAAMC,OAAO,GAAG,SAAS;EAEzB,OAAO;IACLC,OAAO,EAAE;MACPf,IAAI,EAAEA,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAIc,OAAO;MACrBb,OAAO,EAAEA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAIa,OAAO;MAC3BE,EAAE,EAAE,GAAGb,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIW,OAAO,IAAIV,SAAS,aAATA,SAAS,cAATA,SAAS,GAAIU,OAAO,EAAE;MAClDR,SAAS,EAAEA,SAAS,aAATA,SAAS,cAATA,SAAS,GAAIQ,OAAO;MAC/BN,QAAQ,EAAEA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAIM,OAAO;MAC7BJ,MAAM;MACNE,MAAM,EAAEA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIE;;GAErB;EAED,SAASD,SAASA,CAAA;IAChB,IAAI,CAACb,IAAI,IAAI,CAACC,OAAO,EAAE;MACrB,OAAOgB,SAAS;;IAGlB,IAAI,eAAe,IAAIR,SAAS,IAAIA,SAAS,CAACS,aAAa,EAAE;MAC3D;MACA,OAAQT,SAAiB,CAACS,aAAa,CAACN,MAAM;;IAGhD,OAAOK,SAAS;EAClB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}