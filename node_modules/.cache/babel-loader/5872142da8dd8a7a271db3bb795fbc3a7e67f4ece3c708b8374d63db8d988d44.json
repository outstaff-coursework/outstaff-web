{"ast":null,"code":"import { TransportItemType } from '../../transports';\nimport { deepEqual, getCurrentTimestamp, isNull } from '../../utils';\nexport function initializeEventsAPI(_unpatchedConsole, internalLogger, config, metas, transports, tracesApi) {\n  let lastPayload = null;\n  const pushEvent = (name, attributes, domain, {\n    skipDedupe\n  } = {}) => {\n    try {\n      const item = {\n        meta: metas.value,\n        payload: {\n          name,\n          domain: domain !== null && domain !== void 0 ? domain : config.eventDomain,\n          attributes,\n          timestamp: getCurrentTimestamp(),\n          trace: tracesApi.getTraceContext()\n        },\n        type: TransportItemType.EVENT\n      };\n      const testingPayload = {\n        name: item.payload.name,\n        attributes: item.payload.attributes,\n        domain: item.payload.domain\n      };\n      if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n        internalLogger.debug('Skipping event push because it is the same as the last one\\n', item.payload);\n        return;\n      }\n      lastPayload = testingPayload;\n      internalLogger.debug('Pushing event\\n', item);\n      transports.execute(item);\n    } catch (err) {\n      internalLogger.error('Error pushing event', err);\n    }\n  };\n  return {\n    pushEvent\n  };\n}","map":{"version":3,"names":["TransportItemType","deepEqual","getCurrentTimestamp","isNull","initializeEventsAPI","_unpatchedConsole","internalLogger","config","metas","transports","tracesApi","lastPayload","pushEvent","name","attributes","domain","skipDedupe","item","meta","value","payload","eventDomain","timestamp","trace","getTraceContext","type","EVENT","testingPayload","dedupe","debug","execute","err","error"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/api/events/initialize.ts"],"sourcesContent":["import type { Config } from '../../config';\nimport type { InternalLogger } from '../../internalLogger';\nimport type { Metas } from '../../metas';\nimport { TransportItem, TransportItemType, Transports } from '../../transports';\nimport type { UnpatchedConsole } from '../../unpatchedConsole';\nimport { deepEqual, getCurrentTimestamp, isNull } from '../../utils';\nimport type { TracesAPI } from '../traces';\n\nimport type { EventEvent, EventsAPI } from './types';\n\nexport function initializeEventsAPI(\n  _unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  config: Config,\n  metas: Metas,\n  transports: Transports,\n  tracesApi: TracesAPI\n): EventsAPI {\n  let lastPayload: Pick<EventEvent, 'name' | 'domain' | 'attributes'> | null = null;\n\n  const pushEvent: EventsAPI['pushEvent'] = (name, attributes, domain, { skipDedupe } = {}) => {\n    try {\n      const item: TransportItem<EventEvent> = {\n        meta: metas.value,\n        payload: {\n          name,\n          domain: domain ?? config.eventDomain,\n          attributes,\n          timestamp: getCurrentTimestamp(),\n          trace: tracesApi.getTraceContext(),\n        },\n        type: TransportItemType.EVENT,\n      };\n\n      const testingPayload = {\n        name: item.payload.name,\n        attributes: item.payload.attributes,\n        domain: item.payload.domain,\n      };\n\n      if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n        internalLogger.debug('Skipping event push because it is the same as the last one\\n', item.payload);\n\n        return;\n      }\n\n      lastPayload = testingPayload;\n\n      internalLogger.debug('Pushing event\\n', item);\n\n      transports.execute(item);\n    } catch (err) {\n      internalLogger.error('Error pushing event', err);\n    }\n  };\n\n  return {\n    pushEvent,\n  };\n}\n"],"mappings":"AAGA,SAAwBA,iBAAiB,QAAoB,kBAAkB;AAE/E,SAASC,SAAS,EAAEC,mBAAmB,EAAEC,MAAM,QAAQ,aAAa;AAKpE,OAAM,SAAUC,mBAAmBA,CACjCC,iBAAmC,EACnCC,cAA8B,EAC9BC,MAAc,EACdC,KAAY,EACZC,UAAsB,EACtBC,SAAoB;EAEpB,IAAIC,WAAW,GAA8D,IAAI;EAEjF,MAAMC,SAAS,GAA2BA,CAACC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAE;IAAEC;EAAU,CAAE,GAAG,EAAE,KAAI;IAC1F,IAAI;MACF,MAAMC,IAAI,GAA8B;QACtCC,IAAI,EAAEV,KAAK,CAACW,KAAK;QACjBC,OAAO,EAAE;UACPP,IAAI;UACJE,MAAM,EAAEA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIR,MAAM,CAACc,WAAW;UACpCP,UAAU;UACVQ,SAAS,EAAEpB,mBAAmB,EAAE;UAChCqB,KAAK,EAAEb,SAAS,CAACc,eAAe;SACjC;QACDC,IAAI,EAAEzB,iBAAiB,CAAC0B;OACzB;MAED,MAAMC,cAAc,GAAG;QACrBd,IAAI,EAAEI,IAAI,CAACG,OAAO,CAACP,IAAI;QACvBC,UAAU,EAAEG,IAAI,CAACG,OAAO,CAACN,UAAU;QACnCC,MAAM,EAAEE,IAAI,CAACG,OAAO,CAACL;OACtB;MAED,IAAI,CAACC,UAAU,IAAIT,MAAM,CAACqB,MAAM,IAAI,CAACzB,MAAM,CAACQ,WAAW,CAAC,IAAIV,SAAS,CAAC0B,cAAc,EAAEhB,WAAW,CAAC,EAAE;QAClGL,cAAc,CAACuB,KAAK,CAAC,8DAA8D,EAAEZ,IAAI,CAACG,OAAO,CAAC;QAElG;;MAGFT,WAAW,GAAGgB,cAAc;MAE5BrB,cAAc,CAACuB,KAAK,CAAC,iBAAiB,EAAEZ,IAAI,CAAC;MAE7CR,UAAU,CAACqB,OAAO,CAACb,IAAI,CAAC;KACzB,CAAC,OAAOc,GAAG,EAAE;MACZzB,cAAc,CAAC0B,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAAC;;EAEpD,CAAC;EAED,OAAO;IACLnB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}