{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '..';\nimport { diag } from '@opentelemetry/api';\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nvar BrowserDetectorSync = /** @class */function () {\n  function BrowserDetectorSync() {}\n  BrowserDetectorSync.prototype.detect = function (config) {\n    var _a;\n    var isBrowser = typeof navigator !== 'undefined';\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    var browserResource = (_a = {}, _a[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser', _a[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = 'Web Browser', _a[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = navigator.userAgent, _a);\n    return this._getResourceAttributes(browserResource, config);\n  };\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  BrowserDetectorSync.prototype._getResourceAttributes = function (browserResource, _config) {\n    if (browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug('BrowserDetector failed: Unable to find required browser resources. ');\n      return Resource.empty();\n    } else {\n      return new Resource(__assign({}, browserResource));\n    }\n  };\n  return BrowserDetectorSync;\n}();\nexport var browserDetectorSync = new BrowserDetectorSync();","map":{"version":3,"names":["SemanticResourceAttributes","Resource","diag","BrowserDetectorSync","prototype","detect","config","isBrowser","navigator","empty","browserResource","_a","PROCESS_RUNTIME_NAME","PROCESS_RUNTIME_DESCRIPTION","PROCESS_RUNTIME_VERSION","userAgent","_getResourceAttributes","_config","debug","__assign","browserDetectorSync"],"sources":["/home/egor/node_modules/@opentelemetry/resources/src/detectors/BrowserDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, IResource, Resource, ResourceDetectionConfig } from '..';\nimport { ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser = typeof navigator !== 'undefined';\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'browser',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (\n      browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === ''\n    ) {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAASA,0BAA0B,QAAQ,qCAAqC;AAChF,SAAkCC,QAAQ,QAAiC,IAAI;AAE/E,SAASC,IAAI,QAAQ,oBAAoB;AAEzC;;;AAGA,IAAAC,mBAAA;EAAA,SAAAA,oBAAA,GAqCA;EApCEA,mBAAA,CAAAC,SAAA,CAAAC,MAAM,GAAN,UAAOC,MAAgC;;IACrC,IAAMC,SAAS,GAAG,OAAOC,SAAS,KAAK,WAAW;IAClD,IAAI,CAACD,SAAS,EAAE;MACd,OAAON,QAAQ,CAACQ,KAAK,EAAE;;IAEzB,IAAMC,eAAe,IAAAC,EAAA,OACnBA,EAAA,CAACX,0BAA0B,CAACY,oBAAoB,IAAG,SAAS,EAC5DD,EAAA,CAACX,0BAA0B,CAACa,2BAA2B,IAAG,aAAa,EACvEF,EAAA,CAACX,0BAA0B,CAACc,uBAAuB,IAAGN,SAAS,CAACO,SAAS,E,GAC1E;IACD,OAAO,IAAI,CAACC,sBAAsB,CAACN,eAAe,EAAEJ,MAAM,CAAC;EAC7D,CAAC;EACD;;;;;;;EAOQH,mBAAA,CAAAC,SAAA,CAAAY,sBAAsB,GAA9B,UACEN,eAAmC,EACnCO,OAAiC;IAEjC,IACEP,eAAe,CAACV,0BAA0B,CAACc,uBAAuB,CAAC,KAAK,EAAE,EAC1E;MACAZ,IAAI,CAACgB,KAAK,CACR,qEAAqE,CACtE;MACD,OAAOjB,QAAQ,CAACQ,KAAK,EAAE;KACxB,MAAM;MACL,OAAO,IAAIR,QAAQ,CAAAkB,QAAA,KACdT,eAAe,EAClB;;EAEN,CAAC;EACH,OAAAP,mBAAC;AAAD,CAAC,CArCD;AAuCA,OAAO,IAAMiB,mBAAmB,GAAG,IAAIjB,mBAAmB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}