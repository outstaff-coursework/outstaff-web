{"ast":null,"code":"const DEFAULT_SEND_TIMEOUT_MS = 250;\nconst DEFAULT_BATCH_ITEM_LIMIT = 50;\nexport class BatchExecutor {\n  constructor(sendFn, options) {\n    var _a, _b;\n    this.signalBuffer = [];\n    this.itemLimit = (_a = options === null || options === void 0 ? void 0 : options.itemLimit) !== null && _a !== void 0 ? _a : DEFAULT_BATCH_ITEM_LIMIT;\n    this.sendTimeout = (_b = options === null || options === void 0 ? void 0 : options.sendTimeout) !== null && _b !== void 0 ? _b : DEFAULT_SEND_TIMEOUT_MS;\n    this.paused = (options === null || options === void 0 ? void 0 : options.paused) || false;\n    this.sendFn = sendFn;\n    this.flushInterval = -1;\n    if (!this.paused) {\n      this.start();\n    }\n    // Send batched/buffered data when user navigates to new page, switches or closes the tab, minimizes or closes the browser.\n    // If on mobile, it also sends data if user switches from the browser to a different app.\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'hidden') {\n        this.flush();\n      }\n    });\n  }\n  addItem(item) {\n    if (this.paused) {\n      return;\n    }\n    this.signalBuffer.push(item);\n    if (this.signalBuffer.length >= this.itemLimit) {\n      this.flush();\n    }\n  }\n  start() {\n    this.paused = false;\n    if (this.sendTimeout > 0) {\n      this.flushInterval = window.setInterval(() => this.flush(), this.sendTimeout);\n    }\n  }\n  pause() {\n    this.paused = true;\n    clearInterval(this.flushInterval);\n  }\n  groupItems(items) {\n    const itemMap = new Map();\n    items.forEach(item => {\n      const metaKey = JSON.stringify(item.meta);\n      let currentItems = itemMap.get(metaKey);\n      if (currentItems === undefined) {\n        currentItems = [item];\n      } else {\n        currentItems = [...currentItems, item];\n      }\n      itemMap.set(metaKey, currentItems);\n    });\n    return Array.from(itemMap.values());\n  }\n  flush() {\n    if (this.paused || this.signalBuffer.length === 0) {\n      return;\n    }\n    const itemGroups = this.groupItems(this.signalBuffer);\n    itemGroups.forEach(this.sendFn);\n    this.signalBuffer = [];\n  }\n}","map":{"version":3,"names":["DEFAULT_SEND_TIMEOUT_MS","DEFAULT_BATCH_ITEM_LIMIT","BatchExecutor","constructor","sendFn","options","signalBuffer","itemLimit","_a","sendTimeout","_b","paused","flushInterval","start","document","addEventListener","visibilityState","flush","addItem","item","push","length","window","setInterval","pause","clearInterval","groupItems","items","itemMap","Map","forEach","metaKey","JSON","stringify","meta","currentItems","get","undefined","set","Array","from","values","itemGroups"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/transports/batchExecutor.ts"],"sourcesContent":["import type { TransportItem } from '../';\n\nimport type { BatchExecutorOptions, SendFn } from './types';\n\nconst DEFAULT_SEND_TIMEOUT_MS = 250;\nconst DEFAULT_BATCH_ITEM_LIMIT = 50;\n\nexport class BatchExecutor {\n  private readonly itemLimit: number;\n  private readonly sendTimeout: number;\n\n  private signalBuffer: TransportItem[] = [];\n  private sendFn: SendFn;\n  private paused: boolean;\n  private flushInterval: number;\n\n  constructor(sendFn: SendFn, options?: BatchExecutorOptions) {\n    this.itemLimit = options?.itemLimit ?? DEFAULT_BATCH_ITEM_LIMIT;\n    this.sendTimeout = options?.sendTimeout ?? DEFAULT_SEND_TIMEOUT_MS;\n    this.paused = options?.paused || false;\n    this.sendFn = sendFn;\n    this.flushInterval = -1;\n\n    if (!this.paused) {\n      this.start();\n    }\n\n    // Send batched/buffered data when user navigates to new page, switches or closes the tab, minimizes or closes the browser.\n    // If on mobile, it also sends data if user switches from the browser to a different app.\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'hidden') {\n        this.flush();\n      }\n    });\n  }\n\n  addItem(item: TransportItem): void {\n    if (this.paused) {\n      return;\n    }\n\n    this.signalBuffer.push(item);\n\n    if (this.signalBuffer.length >= this.itemLimit) {\n      this.flush();\n    }\n  }\n\n  start(): void {\n    this.paused = false;\n    if (this.sendTimeout > 0) {\n      this.flushInterval = window.setInterval(() => this.flush(), this.sendTimeout);\n    }\n  }\n\n  pause(): void {\n    this.paused = true;\n    clearInterval(this.flushInterval);\n  }\n\n  groupItems(items: TransportItem[]): TransportItem[][] {\n    const itemMap = new Map<string, TransportItem[]>();\n    items.forEach((item) => {\n      const metaKey = JSON.stringify(item.meta);\n\n      let currentItems = itemMap.get(metaKey);\n      if (currentItems === undefined) {\n        currentItems = [item];\n      } else {\n        currentItems = [...currentItems, item];\n      }\n\n      itemMap.set(metaKey, currentItems);\n    });\n    return Array.from(itemMap.values());\n  }\n\n  private flush() {\n    if (this.paused || this.signalBuffer.length === 0) {\n      return;\n    }\n\n    const itemGroups = this.groupItems(this.signalBuffer);\n    itemGroups.forEach(this.sendFn);\n    this.signalBuffer = [];\n  }\n}\n"],"mappings":"AAIA,MAAMA,uBAAuB,GAAG,GAAG;AACnC,MAAMC,wBAAwB,GAAG,EAAE;AAEnC,OAAM,MAAOC,aAAa;EASxBC,YAAYC,MAAc,EAAEC,OAA8B;;IALlD,KAAAC,YAAY,GAAoB,EAAE;IAMxC,IAAI,CAACC,SAAS,GAAG,CAAAC,EAAA,GAAAH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,SAAS,cAAAC,EAAA,cAAAA,EAAA,GAAIP,wBAAwB;IAC/D,IAAI,CAACQ,WAAW,GAAG,CAAAC,EAAA,GAAAL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,WAAW,cAAAC,EAAA,cAAAA,EAAA,GAAIV,uBAAuB;IAClE,IAAI,CAACW,MAAM,GAAG,CAAAN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,MAAM,KAAI,KAAK;IACtC,IAAI,CAACP,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACQ,aAAa,GAAG,CAAC,CAAC;IAEvB,IAAI,CAAC,IAAI,CAACD,MAAM,EAAE;MAChB,IAAI,CAACE,KAAK,EAAE;;IAGd;IACA;IACAC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAK;MACjD,IAAID,QAAQ,CAACE,eAAe,KAAK,QAAQ,EAAE;QACzC,IAAI,CAACC,KAAK,EAAE;;IAEhB,CAAC,CAAC;EACJ;EAEAC,OAAOA,CAACC,IAAmB;IACzB,IAAI,IAAI,CAACR,MAAM,EAAE;MACf;;IAGF,IAAI,CAACL,YAAY,CAACc,IAAI,CAACD,IAAI,CAAC;IAE5B,IAAI,IAAI,CAACb,YAAY,CAACe,MAAM,IAAI,IAAI,CAACd,SAAS,EAAE;MAC9C,IAAI,CAACU,KAAK,EAAE;;EAEhB;EAEAJ,KAAKA,CAAA;IACH,IAAI,CAACF,MAAM,GAAG,KAAK;IACnB,IAAI,IAAI,CAACF,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACG,aAAa,GAAGU,MAAM,CAACC,WAAW,CAAC,MAAM,IAAI,CAACN,KAAK,EAAE,EAAE,IAAI,CAACR,WAAW,CAAC;;EAEjF;EAEAe,KAAKA,CAAA;IACH,IAAI,CAACb,MAAM,GAAG,IAAI;IAClBc,aAAa,CAAC,IAAI,CAACb,aAAa,CAAC;EACnC;EAEAc,UAAUA,CAACC,KAAsB;IAC/B,MAAMC,OAAO,GAAG,IAAIC,GAAG,EAA2B;IAClDF,KAAK,CAACG,OAAO,CAAEX,IAAI,IAAI;MACrB,MAAMY,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACd,IAAI,CAACe,IAAI,CAAC;MAEzC,IAAIC,YAAY,GAAGP,OAAO,CAACQ,GAAG,CAACL,OAAO,CAAC;MACvC,IAAII,YAAY,KAAKE,SAAS,EAAE;QAC9BF,YAAY,GAAG,CAAChB,IAAI,CAAC;OACtB,MAAM;QACLgB,YAAY,GAAG,CAAC,GAAGA,YAAY,EAAEhB,IAAI,CAAC;;MAGxCS,OAAO,CAACU,GAAG,CAACP,OAAO,EAAEI,YAAY,CAAC;IACpC,CAAC,CAAC;IACF,OAAOI,KAAK,CAACC,IAAI,CAACZ,OAAO,CAACa,MAAM,EAAE,CAAC;EACrC;EAEQxB,KAAKA,CAAA;IACX,IAAI,IAAI,CAACN,MAAM,IAAI,IAAI,CAACL,YAAY,CAACe,MAAM,KAAK,CAAC,EAAE;MACjD;;IAGF,MAAMqB,UAAU,GAAG,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACpB,YAAY,CAAC;IACrDoC,UAAU,CAACZ,OAAO,CAAC,IAAI,CAAC1B,MAAM,CAAC;IAC/B,IAAI,CAACE,YAAY,GAAG,EAAE;EACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}