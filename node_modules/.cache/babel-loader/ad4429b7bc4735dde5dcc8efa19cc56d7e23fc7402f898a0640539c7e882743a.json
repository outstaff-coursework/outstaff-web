{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n  var e_1, _a;\n  var out = {};\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n  try {\n    for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n        key = _d[0],\n        val = _d[1];\n      if (!isAttributeKey(key)) {\n        diag.warn(\"Invalid attribute key: \" + key);\n        continue;\n      }\n      if (!isAttributeValue(val)) {\n        diag.warn(\"Invalid attribute value set for key: \" + key);\n        continue;\n      }\n      if (Array.isArray(val)) {\n        out[key] = val.slice();\n      } else {\n        out[key] = val;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return out;\n}\nexport function isAttributeKey(key) {\n  return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n  if (val == null) {\n    return true;\n  }\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n  return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n  var e_2, _a;\n  var type;\n  try {\n    for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n      var element = arr_1_1.value;\n      // null/undefined elements are allowed\n      if (element == null) continue;\n      if (!type) {\n        if (isValidPrimitiveAttributeValue(element)) {\n          type = typeof element;\n          continue;\n        }\n        // encountered an invalid primitive\n        return false;\n      }\n      if (typeof element === type) {\n        continue;\n      }\n      return false;\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n  return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n  return false;\n}","map":{"version":3,"names":["diag","sanitizeAttributes","attributes","out","_b","__values","Object","entries","_c","next","done","_d","__read","value","key","val","isAttributeKey","warn","isAttributeValue","Array","isArray","slice","length","isHomogeneousAttributeValueArray","isValidPrimitiveAttributeValue","arr","type","arr_1","arr_1_1","element"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/common/attributes.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAASA,IAAI,QAA4C,oBAAoB;AAE7E,OAAM,SAAUC,kBAAkBA,CAACC,UAAmB;;EACpD,IAAMC,GAAG,GAAmB,EAAE;EAE9B,IAAI,OAAOD,UAAU,KAAK,QAAQ,IAAIA,UAAU,IAAI,IAAI,EAAE;IACxD,OAAOC,GAAG;;;IAGZ,KAAyB,IAAAC,EAAA,GAAAC,QAAA,CAAAC,MAAM,CAACC,OAAO,CAACL,UAAU,CAAC,GAAAM,EAAA,GAAAJ,EAAA,CAAAK,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAJ,EAAA,CAAAK,IAAA,IAAE;MAA1C,IAAAE,EAAA,GAAAC,MAAA,CAAAJ,EAAA,CAAAK,KAAA,IAAU;QAATC,GAAG,GAAAH,EAAA;QAAEI,GAAG,GAAAJ,EAAA;MAClB,IAAI,CAACK,cAAc,CAACF,GAAG,CAAC,EAAE;QACxBd,IAAI,CAACiB,IAAI,CAAC,4BAA0BH,GAAK,CAAC;QAC1C;;MAEF,IAAI,CAACI,gBAAgB,CAACH,GAAG,CAAC,EAAE;QAC1Bf,IAAI,CAACiB,IAAI,CAAC,0CAAwCH,GAAK,CAAC;QACxD;;MAEF,IAAIK,KAAK,CAACC,OAAO,CAACL,GAAG,CAAC,EAAE;QACtBZ,GAAG,CAACW,GAAG,CAAC,GAAGC,GAAG,CAACM,KAAK,EAAE;OACvB,MAAM;QACLlB,GAAG,CAACW,GAAG,CAAC,GAAGC,GAAG;;;;;;;;;;;;;;EAIlB,OAAOZ,GAAG;AACZ;AAEA,OAAM,SAAUa,cAAcA,CAACF,GAAY;EACzC,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACQ,MAAM,GAAG,CAAC;AAClD;AAEA,OAAM,SAAUJ,gBAAgBA,CAACH,GAAY;EAC3C,IAAIA,GAAG,IAAI,IAAI,EAAE;IACf,OAAO,IAAI;;EAGb,IAAII,KAAK,CAACC,OAAO,CAACL,GAAG,CAAC,EAAE;IACtB,OAAOQ,gCAAgC,CAACR,GAAG,CAAC;;EAG9C,OAAOS,8BAA8B,CAACT,GAAG,CAAC;AAC5C;AAEA,SAASQ,gCAAgCA,CAACE,GAAc;;EACtD,IAAIC,IAAwB;;IAE5B,KAAsB,IAAAC,KAAA,GAAAtB,QAAA,CAAAoB,GAAG,GAAAG,OAAA,GAAAD,KAAA,CAAAlB,IAAA,KAAAmB,OAAA,CAAAlB,IAAA,EAAAkB,OAAA,GAAAD,KAAA,CAAAlB,IAAA,IAAE;MAAtB,IAAMoB,OAAO,GAAAD,OAAA,CAAAf,KAAA;MAChB;MACA,IAAIgB,OAAO,IAAI,IAAI,EAAE;MAErB,IAAI,CAACH,IAAI,EAAE;QACT,IAAIF,8BAA8B,CAACK,OAAO,CAAC,EAAE;UAC3CH,IAAI,GAAG,OAAOG,OAAO;UACrB;;QAEF;QACA,OAAO,KAAK;;MAGd,IAAI,OAAOA,OAAO,KAAKH,IAAI,EAAE;QAC3B;;MAGF,OAAO,KAAK;;;;;;;;;;;;;EAGd,OAAO,IAAI;AACb;AAEA,SAASF,8BAA8BA,CAACT,GAAY;EAClD,QAAQ,OAAOA,GAAG;IAChB,KAAK,QAAQ;IACb,KAAK,SAAS;IACd,KAAK,QAAQ;MACX,OAAO,IAAI;;EAGf,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}