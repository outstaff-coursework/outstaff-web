{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { MetricStorage } from './MetricStorage';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for synchronous instruments.\n */\nvar SyncMetricStorage = /** @class */function (_super) {\n  __extends(SyncMetricStorage, _super);\n  function SyncMetricStorage(instrumentDescriptor, aggregator, _attributesProcessor, collectorHandles) {\n    var _this = _super.call(this, instrumentDescriptor) || this;\n    _this._attributesProcessor = _attributesProcessor;\n    _this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    _this._temporalMetricStorage = new TemporalMetricProcessor(aggregator, collectorHandles);\n    return _this;\n  }\n  SyncMetricStorage.prototype.record = function (value, attributes, context, recordTime) {\n    attributes = this._attributesProcessor.process(attributes, context);\n    this._deltaMetricStorage.record(value, attributes, context, recordTime);\n  };\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  SyncMetricStorage.prototype.collect = function (collector, collectionTime) {\n    var accumulations = this._deltaMetricStorage.collect();\n    return this._temporalMetricStorage.buildMetrics(collector, this._instrumentDescriptor, accumulations, collectionTime);\n  };\n  return SyncMetricStorage;\n}(MetricStorage);\nexport { SyncMetricStorage };","map":{"version":3,"names":["MetricStorage","DeltaMetricProcessor","TemporalMetricProcessor","SyncMetricStorage","_super","__extends","instrumentDescriptor","aggregator","_attributesProcessor","collectorHandles","_this","call","_deltaMetricStorage","_temporalMetricStorage","prototype","record","value","attributes","context","recordTime","process","collect","collector","collectionTime","accumulations","buildMetrics","_instrumentDescriptor"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/state/SyncMetricStorage.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for synchronous instruments.\n */\nexport class SyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements WritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    attributes = this._attributesProcessor.process(attributes, context);\n    this._deltaMetricStorage.record(value, attributes, context, recordTime);\n  }\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASA,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,uBAAuB,QAAQ,2BAA2B;AAInE;;;;;AAKA,IAAAC,iBAAA,0BAAAC,MAAA;EACUC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAMR,SAAAD,kBACEG,oBAA0C,EAC1CC,UAAyB,EACjBC,oBAAyC,EACjDC,gBAAyC;IAJ3C,IAAAC,KAAA,GAMEN,MAAA,CAAAO,IAAA,OAAML,oBAAoB,CAAC;IAHnBI,KAAA,CAAAF,oBAAoB,GAApBA,oBAAoB;IAI5BE,KAAI,CAACE,mBAAmB,GAAG,IAAIX,oBAAoB,CAACM,UAAU,CAAC;IAC/DG,KAAI,CAACG,sBAAsB,GAAG,IAAIX,uBAAuB,CACvDK,UAAU,EACVE,gBAAgB,CACjB;;EACH;EAEAN,iBAAA,CAAAW,SAAA,CAAAC,MAAM,GAAN,UACEC,KAAa,EACbC,UAA4B,EAC5BC,OAAgB,EAChBC,UAAkB;IAElBF,UAAU,GAAG,IAAI,CAACT,oBAAoB,CAACY,OAAO,CAACH,UAAU,EAAEC,OAAO,CAAC;IACnE,IAAI,CAACN,mBAAmB,CAACG,MAAM,CAACC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,UAAU,CAAC;EACzE,CAAC;EAED;;;;;;EAMAhB,iBAAA,CAAAW,SAAA,CAAAO,OAAO,GAAP,UACEC,SAAgC,EAChCC,cAAsB;IAEtB,IAAMC,aAAa,GAAG,IAAI,CAACZ,mBAAmB,CAACS,OAAO,EAAE;IAExD,OAAO,IAAI,CAACR,sBAAsB,CAACY,YAAY,CAC7CH,SAAS,EACT,IAAI,CAACI,qBAAqB,EAC1BF,aAAa,EACbD,cAAc,CACf;EACH,CAAC;EACH,OAAApB,iBAAC;AAAD,CAAC,CAjDSH,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}