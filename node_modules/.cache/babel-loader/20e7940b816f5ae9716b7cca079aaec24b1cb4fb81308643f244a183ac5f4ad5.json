{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal interface.\n */\nvar MultiMetricStorage = /** @class */function () {\n  function MultiMetricStorage(_backingStorages) {\n    this._backingStorages = _backingStorages;\n  }\n  MultiMetricStorage.prototype.record = function (value, attributes, context, recordTime) {\n    this._backingStorages.forEach(function (it) {\n      it.record(value, attributes, context, recordTime);\n    });\n  };\n  return MultiMetricStorage;\n}();\nexport { MultiMetricStorage };","map":{"version":3,"names":["MultiMetricStorage","_backingStorages","prototype","record","value","attributes","context","recordTime","forEach","it"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/state/MultiWritableMetricStorage.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n */\nexport class MultiMetricStorage implements WritableMetricStorage {\n  constructor(private readonly _backingStorages: WritableMetricStorage[]) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    this._backingStorages.forEach(it => {\n      it.record(value, attributes, context, recordTime);\n    });\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA;;;AAGA,IAAAA,kBAAA;EACE,SAAAA,mBAA6BC,gBAAyC;IAAzC,KAAAA,gBAAgB,GAAhBA,gBAAgB;EAA4B;EAEzED,kBAAA,CAAAE,SAAA,CAAAC,MAAM,GAAN,UACEC,KAAa,EACbC,UAA4B,EAC5BC,OAAgB,EAChBC,UAAkB;IAElB,IAAI,CAACN,gBAAgB,CAACO,OAAO,CAAC,UAAAC,EAAE;MAC9BA,EAAE,CAACN,MAAM,CAACC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,UAAU,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC;EACH,OAAAP,kBAAC;AAAD,CAAC,CAbD"},"metadata":{},"sourceType":"module","externalDependencies":[]}