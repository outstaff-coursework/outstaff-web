{"ast":null,"code":"import { faro } from '@grafana/faro-core';\nimport { throttle } from '../../../utils';\nimport { getItem, removeItem, setItem, webStorageType } from '../../../utils/webStorage';\nimport { isSampled } from './sampling';\nimport { STORAGE_KEY, STORAGE_UPDATE_DELAY } from './sessionConstants';\nimport { addSessionMetadataToNextSession, createUserSessionObject, getUserSessionUpdater } from './sessionManagerUtils';\nexport class PersistentSessionsManager {\n  constructor() {\n    this.updateSession = throttle(() => this.updateUserSession(), STORAGE_UPDATE_DELAY);\n    this.updateUserSession = getUserSessionUpdater({\n      fetchUserSession: PersistentSessionsManager.fetchUserSession,\n      storeUserSession: PersistentSessionsManager.storeUserSession\n    });\n    this.init();\n  }\n  static removeUserSession() {\n    removeItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);\n  }\n  static storeUserSession(session) {\n    setItem(STORAGE_KEY, JSON.stringify(session), PersistentSessionsManager.storageTypeLocal);\n  }\n  static fetchUserSession() {\n    const storedSession = getItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);\n    if (storedSession) {\n      return JSON.parse(storedSession);\n    }\n    return null;\n  }\n  init() {\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') {\n        this.updateSession();\n      }\n    });\n    // Users can call the setSession() method, so we need to sync this with the local storage session\n    faro.metas.addListener(function syncSessionIfChangedExternally(meta) {\n      const session = meta.session;\n      const sessionFromLocalStorage = PersistentSessionsManager.fetchUserSession();\n      if (session && session.id !== (sessionFromLocalStorage === null || sessionFromLocalStorage === void 0 ? void 0 : sessionFromLocalStorage.sessionId)) {\n        const userSession = addSessionMetadataToNextSession(createUserSessionObject({\n          sessionId: session.id,\n          isSampled: isSampled()\n        }), sessionFromLocalStorage);\n        PersistentSessionsManager.storeUserSession(userSession);\n        faro.api.setSession(userSession.sessionMeta);\n      }\n    });\n  }\n}\nPersistentSessionsManager.storageTypeLocal = webStorageType.local;","map":{"version":3,"names":["faro","throttle","getItem","removeItem","setItem","webStorageType","isSampled","STORAGE_KEY","STORAGE_UPDATE_DELAY","addSessionMetadataToNextSession","createUserSessionObject","getUserSessionUpdater","PersistentSessionsManager","constructor","updateSession","updateUserSession","fetchUserSession","storeUserSession","init","removeUserSession","storageTypeLocal","session","JSON","stringify","storedSession","parse","document","addEventListener","visibilityState","metas","addListener","syncSessionIfChangedExternally","meta","sessionFromLocalStorage","id","sessionId","userSession","api","setSession","sessionMeta","local"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/instrumentations/session/sessionManager/PersistentSessionsManager.ts"],"sourcesContent":["import { faro } from '@grafana/faro-core';\nimport type { Meta } from '@grafana/faro-core';\n\nimport { throttle } from '../../../utils';\nimport { getItem, removeItem, setItem, webStorageType } from '../../../utils/webStorage';\n\nimport { isSampled } from './sampling';\nimport { STORAGE_KEY, STORAGE_UPDATE_DELAY } from './sessionConstants';\nimport { addSessionMetadataToNextSession, createUserSessionObject, getUserSessionUpdater } from './sessionManagerUtils';\nimport type { FaroUserSession } from './types';\n\nexport class PersistentSessionsManager {\n  private static storageTypeLocal = webStorageType.local;\n  private updateUserSession: ReturnType<typeof getUserSessionUpdater>;\n\n  constructor() {\n    this.updateUserSession = getUserSessionUpdater({\n      fetchUserSession: PersistentSessionsManager.fetchUserSession,\n      storeUserSession: PersistentSessionsManager.storeUserSession,\n    });\n\n    this.init();\n  }\n\n  static removeUserSession() {\n    removeItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);\n  }\n\n  static storeUserSession(session: FaroUserSession): void {\n    setItem(STORAGE_KEY, JSON.stringify(session), PersistentSessionsManager.storageTypeLocal);\n  }\n\n  static fetchUserSession(): FaroUserSession | null {\n    const storedSession = getItem(STORAGE_KEY, PersistentSessionsManager.storageTypeLocal);\n\n    if (storedSession) {\n      return JSON.parse(storedSession) as FaroUserSession;\n    }\n\n    return null;\n  }\n\n  updateSession = throttle(() => this.updateUserSession(), STORAGE_UPDATE_DELAY);\n\n  private init(): void {\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible') {\n        this.updateSession();\n      }\n    });\n\n    // Users can call the setSession() method, so we need to sync this with the local storage session\n    faro.metas.addListener(function syncSessionIfChangedExternally(meta: Meta) {\n      const session = meta.session;\n      const sessionFromLocalStorage = PersistentSessionsManager.fetchUserSession();\n\n      if (session && session.id !== sessionFromLocalStorage?.sessionId) {\n        const userSession = addSessionMetadataToNextSession(\n          createUserSessionObject({ sessionId: session.id, isSampled: isSampled() }),\n          sessionFromLocalStorage\n        );\n\n        PersistentSessionsManager.storeUserSession(userSession);\n        faro.api.setSession(userSession.sessionMeta);\n      }\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,oBAAoB;AAGzC,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,OAAO,EAAEC,UAAU,EAAEC,OAAO,EAAEC,cAAc,QAAQ,2BAA2B;AAExF,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,WAAW,EAAEC,oBAAoB,QAAQ,oBAAoB;AACtE,SAASC,+BAA+B,EAAEC,uBAAuB,EAAEC,qBAAqB,QAAQ,uBAAuB;AAGvH,OAAM,MAAOC,yBAAyB;EAIpCC,YAAA;IA2BA,KAAAC,aAAa,GAAGb,QAAQ,CAAC,MAAM,IAAI,CAACc,iBAAiB,EAAE,EAAEP,oBAAoB,CAAC;IA1B5E,IAAI,CAACO,iBAAiB,GAAGJ,qBAAqB,CAAC;MAC7CK,gBAAgB,EAAEJ,yBAAyB,CAACI,gBAAgB;MAC5DC,gBAAgB,EAAEL,yBAAyB,CAACK;KAC7C,CAAC;IAEF,IAAI,CAACC,IAAI,EAAE;EACb;EAEA,OAAOC,iBAAiBA,CAAA;IACtBhB,UAAU,CAACI,WAAW,EAAEK,yBAAyB,CAACQ,gBAAgB,CAAC;EACrE;EAEA,OAAOH,gBAAgBA,CAACI,OAAwB;IAC9CjB,OAAO,CAACG,WAAW,EAAEe,IAAI,CAACC,SAAS,CAACF,OAAO,CAAC,EAAET,yBAAyB,CAACQ,gBAAgB,CAAC;EAC3F;EAEA,OAAOJ,gBAAgBA,CAAA;IACrB,MAAMQ,aAAa,GAAGtB,OAAO,CAACK,WAAW,EAAEK,yBAAyB,CAACQ,gBAAgB,CAAC;IAEtF,IAAII,aAAa,EAAE;MACjB,OAAOF,IAAI,CAACG,KAAK,CAACD,aAAa,CAAoB;;IAGrD,OAAO,IAAI;EACb;EAIQN,IAAIA,CAAA;IACVQ,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAK;MACjD,IAAID,QAAQ,CAACE,eAAe,KAAK,SAAS,EAAE;QAC1C,IAAI,CAACd,aAAa,EAAE;;IAExB,CAAC,CAAC;IAEF;IACAd,IAAI,CAAC6B,KAAK,CAACC,WAAW,CAAC,SAASC,8BAA8BA,CAACC,IAAU;MACvE,MAAMX,OAAO,GAAGW,IAAI,CAACX,OAAO;MAC5B,MAAMY,uBAAuB,GAAGrB,yBAAyB,CAACI,gBAAgB,EAAE;MAE5E,IAAIK,OAAO,IAAIA,OAAO,CAACa,EAAE,MAAKD,uBAAuB,aAAvBA,uBAAuB,uBAAvBA,uBAAuB,CAAEE,SAAS,GAAE;QAChE,MAAMC,WAAW,GAAG3B,+BAA+B,CACjDC,uBAAuB,CAAC;UAAEyB,SAAS,EAAEd,OAAO,CAACa,EAAE;UAAE5B,SAAS,EAAEA,SAAS;QAAE,CAAE,CAAC,EAC1E2B,uBAAuB,CACxB;QAEDrB,yBAAyB,CAACK,gBAAgB,CAACmB,WAAW,CAAC;QACvDpC,IAAI,CAACqC,GAAG,CAACC,UAAU,CAACF,WAAW,CAACG,WAAW,CAAC;;IAEhD,CAAC,CAAC;EACJ;;AAtDe3B,yBAAA,CAAAQ,gBAAgB,GAAGf,cAAc,CAACmC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}