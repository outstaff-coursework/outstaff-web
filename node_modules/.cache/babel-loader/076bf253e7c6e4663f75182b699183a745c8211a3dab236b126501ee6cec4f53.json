{"ast":null,"code":"import { TransportItemType } from '../../transports';\nimport { deepEqual, getCurrentTimestamp, isNull } from '../../utils';\nexport function initializeMeasurementsAPI(_unpatchedConsole, internalLogger, config, metas, transports, tracesApi) {\n  internalLogger.debug('Initializing measurements API');\n  let lastPayload = null;\n  const pushMeasurement = (payload, {\n    skipDedupe,\n    context\n  } = {}) => {\n    var _a;\n    try {\n      const item = {\n        type: TransportItemType.MEASUREMENT,\n        payload: Object.assign(Object.assign({}, payload), {\n          trace: tracesApi.getTraceContext(),\n          timestamp: (_a = payload.timestamp) !== null && _a !== void 0 ? _a : getCurrentTimestamp(),\n          context: context !== null && context !== void 0 ? context : {}\n        }),\n        meta: metas.value\n      };\n      const testingPayload = {\n        type: item.payload.type,\n        values: item.payload.values,\n        context: item.payload.context\n      };\n      if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n        internalLogger.debug('Skipping measurement push because it is the same as the last one\\n', item.payload);\n        return;\n      }\n      lastPayload = testingPayload;\n      internalLogger.debug('Pushing measurement\\n', item);\n      transports.execute(item);\n    } catch (err) {\n      internalLogger.error('Error pushing measurement\\n', err);\n    }\n  };\n  return {\n    pushMeasurement\n  };\n}","map":{"version":3,"names":["TransportItemType","deepEqual","getCurrentTimestamp","isNull","initializeMeasurementsAPI","_unpatchedConsole","internalLogger","config","metas","transports","tracesApi","debug","lastPayload","pushMeasurement","payload","skipDedupe","context","item","type","MEASUREMENT","Object","assign","trace","getTraceContext","timestamp","_a","meta","value","testingPayload","values","dedupe","execute","err","error"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/api/measurements/initialize.ts"],"sourcesContent":["import type { Config } from '../../config';\nimport type { InternalLogger } from '../../internalLogger';\nimport type { Metas } from '../../metas';\nimport { TransportItem, TransportItemType } from '../../transports';\nimport type { Transports } from '../../transports';\nimport type { UnpatchedConsole } from '../../unpatchedConsole';\nimport { deepEqual, getCurrentTimestamp, isNull } from '../../utils';\nimport type { TracesAPI } from '../traces';\n\nimport type { MeasurementEvent, MeasurementsAPI } from './types';\n\nexport function initializeMeasurementsAPI(\n  _unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  config: Config,\n  metas: Metas,\n  transports: Transports,\n  tracesApi: TracesAPI\n): MeasurementsAPI {\n  internalLogger.debug('Initializing measurements API');\n\n  let lastPayload: Pick<MeasurementEvent, 'type' | 'values' | 'context'> | null = null;\n\n  const pushMeasurement: MeasurementsAPI['pushMeasurement'] = (payload, { skipDedupe, context } = {}) => {\n    try {\n      const item: TransportItem<MeasurementEvent> = {\n        type: TransportItemType.MEASUREMENT,\n        payload: {\n          ...payload,\n          trace: tracesApi.getTraceContext(),\n          timestamp: payload.timestamp ?? getCurrentTimestamp(),\n          context: context ?? {},\n        },\n        meta: metas.value,\n      };\n\n      const testingPayload = {\n        type: item.payload.type,\n        values: item.payload.values,\n        context: item.payload.context,\n      };\n\n      if (!skipDedupe && config.dedupe && !isNull(lastPayload) && deepEqual(testingPayload, lastPayload)) {\n        internalLogger.debug('Skipping measurement push because it is the same as the last one\\n', item.payload);\n\n        return;\n      }\n\n      lastPayload = testingPayload;\n\n      internalLogger.debug('Pushing measurement\\n', item);\n\n      transports.execute(item);\n    } catch (err) {\n      internalLogger.error('Error pushing measurement\\n', err);\n    }\n  };\n\n  return {\n    pushMeasurement,\n  };\n}\n"],"mappings":"AAGA,SAAwBA,iBAAiB,QAAQ,kBAAkB;AAGnE,SAASC,SAAS,EAAEC,mBAAmB,EAAEC,MAAM,QAAQ,aAAa;AAKpE,OAAM,SAAUC,yBAAyBA,CACvCC,iBAAmC,EACnCC,cAA8B,EAC9BC,MAAc,EACdC,KAAY,EACZC,UAAsB,EACtBC,SAAoB;EAEpBJ,cAAc,CAACK,KAAK,CAAC,+BAA+B,CAAC;EAErD,IAAIC,WAAW,GAAiE,IAAI;EAEpF,MAAMC,eAAe,GAAuCA,CAACC,OAAO,EAAE;IAAEC,UAAU;IAAEC;EAAO,CAAE,GAAG,EAAE,KAAI;;IACpG,IAAI;MACF,MAAMC,IAAI,GAAoC;QAC5CC,IAAI,EAAElB,iBAAiB,CAACmB,WAAW;QACnCL,OAAO,EAAAM,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACFP,OAAO;UACVQ,KAAK,EAAEZ,SAAS,CAACa,eAAe,EAAE;UAClCC,SAAS,EAAE,CAAAC,EAAA,GAAAX,OAAO,CAACU,SAAS,cAAAC,EAAA,cAAAA,EAAA,GAAIvB,mBAAmB,EAAE;UACrDc,OAAO,EAAEA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI;QAAE,EACvB;QACDU,IAAI,EAAElB,KAAK,CAACmB;OACb;MAED,MAAMC,cAAc,GAAG;QACrBV,IAAI,EAAED,IAAI,CAACH,OAAO,CAACI,IAAI;QACvBW,MAAM,EAAEZ,IAAI,CAACH,OAAO,CAACe,MAAM;QAC3Bb,OAAO,EAAEC,IAAI,CAACH,OAAO,CAACE;OACvB;MAED,IAAI,CAACD,UAAU,IAAIR,MAAM,CAACuB,MAAM,IAAI,CAAC3B,MAAM,CAACS,WAAW,CAAC,IAAIX,SAAS,CAAC2B,cAAc,EAAEhB,WAAW,CAAC,EAAE;QAClGN,cAAc,CAACK,KAAK,CAAC,oEAAoE,EAAEM,IAAI,CAACH,OAAO,CAAC;QAExG;;MAGFF,WAAW,GAAGgB,cAAc;MAE5BtB,cAAc,CAACK,KAAK,CAAC,uBAAuB,EAAEM,IAAI,CAAC;MAEnDR,UAAU,CAACsB,OAAO,CAACd,IAAI,CAAC;KACzB,CAAC,OAAOe,GAAG,EAAE;MACZ1B,cAAc,CAAC2B,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC;;EAE5D,CAAC;EAED,OAAO;IACLnB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}