{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { Resource } from './Resource';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport var detectResources = function (config) {\n  if (config === void 0) {\n    config = {};\n  }\n  return __awaiter(void 0, void 0, void 0, function () {\n    var resources;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, Promise.all((config.detectors || []).map(function (d) {\n            return __awaiter(void 0, void 0, void 0, function () {\n              var resource, e_1;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    _a.trys.push([0, 2,, 3]);\n                    return [4 /*yield*/, d.detect(config)];\n                  case 1:\n                    resource = _a.sent();\n                    diag.debug(d.constructor.name + \" found resource.\", resource);\n                    return [2 /*return*/, resource];\n                  case 2:\n                    e_1 = _a.sent();\n                    diag.debug(d.constructor.name + \" failed: \" + e_1.message);\n                    return [2 /*return*/, Resource.empty()];\n                  case 3:\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }))];\n\n        case 1:\n          resources = _a.sent();\n          // Future check if verbose logging is enabled issue #1903\n          logResources(resources);\n          return [2 /*return*/, resources.reduce(function (acc, resource) {\n            return acc.merge(resource);\n          }, Resource.empty())];\n      }\n    });\n  });\n};\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport var detectResourcesSync = function (config) {\n  var _a;\n  if (config === void 0) {\n    config = {};\n  }\n  var resources = ((_a = config.detectors) !== null && _a !== void 0 ? _a : []).map(function (d) {\n    try {\n      var resourceOrPromise_1 = d.detect(config);\n      var resource_1;\n      if (isPromiseLike(resourceOrPromise_1)) {\n        var createPromise = function () {\n          return __awaiter(void 0, void 0, void 0, function () {\n            var resolvedResource;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4 /*yield*/, resourceOrPromise_1];\n                case 1:\n                  resolvedResource = _a.sent();\n                  return [2 /*return*/, resolvedResource.attributes];\n              }\n            });\n          });\n        };\n        resource_1 = new Resource({}, createPromise());\n      } else {\n        resource_1 = resourceOrPromise_1;\n      }\n      if (resource_1.waitForAsyncAttributes) {\n        void resource_1.waitForAsyncAttributes().then(function () {\n          return diag.debug(d.constructor.name + \" found resource.\", resource_1);\n        });\n      } else {\n        diag.debug(d.constructor.name + \" found resource.\", resource_1);\n      }\n      return resource_1;\n    } catch (e) {\n      diag.error(d.constructor.name + \" failed: \" + e.message);\n      return Resource.empty();\n    }\n  });\n  var mergedResources = resources.reduce(function (acc, resource) {\n    return acc.merge(resource);\n  }, Resource.empty());\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(function () {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n  return mergedResources;\n};\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nvar logResources = function (resources) {\n  resources.forEach(function (resource) {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      var resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};","map":{"version":3,"names":["Resource","diag","isPromiseLike","detectResources","config","Promise","all","detectors","map","d","__awaiter","detect","resource","_a","sent","debug","constructor","name","e_1","message","empty","resources","logResources","reduce","acc","merge","detectResourcesSync","resourceOrPromise_1","resource_1","createPromise","resolvedResource","attributes","waitForAsyncAttributes","then","e","error","mergedResources","forEach","Object","keys","length","resourceDebugString","JSON","stringify","verbose"],"sources":["/home/egor/node_modules/@opentelemetry/resources/src/detect-resources.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from './Resource';\nimport { ResourceDetectionConfig } from './config';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\nimport { Detector, DetectorSync } from './types';\nimport { IResource } from './IResource';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<IResource> => {\n  const resources: IResource[] = await Promise.all(\n    (config.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(config);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  // Future check if verbose logging is enabled issue #1903\n  logResources(resources);\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResourcesSync = (\n  config: ResourceDetectionConfig = {}\n): IResource => {\n  const resources: IResource[] = (config.detectors ?? []).map(\n    (d: Detector | DetectorSync) => {\n      try {\n        const resourceOrPromise = d.detect(config);\n        let resource: IResource;\n        if (isPromiseLike<Resource>(resourceOrPromise)) {\n          const createPromise = async () => {\n            const resolvedResource = await resourceOrPromise;\n            return resolvedResource.attributes;\n          };\n          resource = new Resource({}, createPromise());\n        } else {\n          resource = resourceOrPromise as IResource;\n        }\n\n        if (resource.waitForAsyncAttributes) {\n          void resource\n            .waitForAsyncAttributes()\n            .then(() =>\n              diag.debug(`${d.constructor.name} found resource.`, resource)\n            );\n        } else {\n          diag.debug(`${d.constructor.name} found resource.`, resource);\n        }\n\n        return resource;\n      } catch (e) {\n        diag.error(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    }\n  );\n\n  const mergedResources = resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(() => {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<IResource>) => {\n  resources.forEach(resource => {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      const resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}