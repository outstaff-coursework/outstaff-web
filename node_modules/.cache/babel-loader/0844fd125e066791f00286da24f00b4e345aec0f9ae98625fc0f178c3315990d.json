{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nexport function parseInstrumentationOptions(options) {\n  if (options === void 0) {\n    options = [];\n  }\n  var instrumentations = [];\n  for (var i = 0, j = options.length; i < j; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var option = options[i];\n    if (Array.isArray(option)) {\n      var results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results.instrumentations);\n    } else if (typeof option === 'function') {\n      instrumentations.push(new option());\n    } else if (option.instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n  return {\n    instrumentations: instrumentations\n  };\n}\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(instrumentations, tracerProvider, meterProvider) {\n  for (var i = 0, j = instrumentations.length; i < j; i++) {\n    var instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(instrumentations) {\n  instrumentations.forEach(function (instrumentation) {\n    return instrumentation.disable();\n  });\n}","map":{"version":3,"names":["parseInstrumentationOptions","options","instrumentations","i","j","length","option","Array","isArray","results","concat","push","instrumentationName","enableInstrumentations","tracerProvider","meterProvider","instrumentation","setTracerProvider","setMeterProvider","getConfig","enabled","enable","disableInstrumentations","forEach","disable"],"sources":["/home/egor/node_modules/@opentelemetry/instrumentation/src/autoLoaderUtils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TracerProvider, MeterProvider } from '@opentelemetry/api';\nimport { Instrumentation } from './types';\nimport { AutoLoaderResult, InstrumentationOption } from './types_internal';\n\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nexport function parseInstrumentationOptions(\n  options: InstrumentationOption[] = []\n): AutoLoaderResult {\n  let instrumentations: Instrumentation[] = [];\n  for (let i = 0, j = options.length; i < j; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const option = options[i] as any;\n    if (Array.isArray(option)) {\n      const results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results.instrumentations);\n    } else if (typeof option === 'function') {\n      instrumentations.push(new option());\n    } else if ((option as Instrumentation).instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n\n  return { instrumentations };\n}\n\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(\n  instrumentations: Instrumentation[],\n  tracerProvider?: TracerProvider,\n  meterProvider?: MeterProvider\n): void {\n  for (let i = 0, j = instrumentations.length; i < j; i++) {\n    const instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(\n  instrumentations: Instrumentation[]\n): void {\n  instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAoBA;;;;;AAKA,OAAM,SAAUA,2BAA2BA,CACzCC,OAAqC;EAArC,IAAAA,OAAA;IAAAA,OAAA,KAAqC;EAAA;EAErC,IAAIC,gBAAgB,GAAsB,EAAE;EAC5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC9C;IACA,IAAMG,MAAM,GAAGL,OAAO,CAACE,CAAC,CAAQ;IAChC,IAAII,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;MACzB,IAAMG,OAAO,GAAGT,2BAA2B,CAACM,MAAM,CAAC;MACnDJ,gBAAgB,GAAGA,gBAAgB,CAACQ,MAAM,CAACD,OAAO,CAACP,gBAAgB,CAAC;KACrE,MAAM,IAAI,OAAOI,MAAM,KAAK,UAAU,EAAE;MACvCJ,gBAAgB,CAACS,IAAI,CAAC,IAAIL,MAAM,EAAE,CAAC;KACpC,MAAM,IAAKA,MAA0B,CAACM,mBAAmB,EAAE;MAC1DV,gBAAgB,CAACS,IAAI,CAACL,MAAM,CAAC;;;EAIjC,OAAO;IAAEJ,gBAAgB,EAAAA;EAAA,CAAE;AAC7B;AAEA;;;;;;AAMA,OAAM,SAAUW,sBAAsBA,CACpCX,gBAAmC,EACnCY,cAA+B,EAC/BC,aAA6B;EAE7B,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,gBAAgB,CAACG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACvD,IAAMa,eAAe,GAAGd,gBAAgB,CAACC,CAAC,CAAC;IAC3C,IAAIW,cAAc,EAAE;MAClBE,eAAe,CAACC,iBAAiB,CAACH,cAAc,CAAC;;IAEnD,IAAIC,aAAa,EAAE;MACjBC,eAAe,CAACE,gBAAgB,CAACH,aAAa,CAAC;;IAEjD;IACA;IACA;IACA;IACA,IAAI,CAACC,eAAe,CAACG,SAAS,EAAE,CAACC,OAAO,EAAE;MACxCJ,eAAe,CAACK,MAAM,EAAE;;;AAG9B;AAEA;;;;AAIA,OAAM,SAAUC,uBAAuBA,CACrCpB,gBAAmC;EAEnCA,gBAAgB,CAACqB,OAAO,CAAC,UAAAP,eAAe;IAAI,OAAAA,eAAe,CAACQ,OAAO,EAAE;EAAzB,CAAyB,CAAC;AACxE"},"metadata":{},"sourceType":"module","externalDependencies":[]}