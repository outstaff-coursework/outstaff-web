{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar InstrumentationNodeModuleDefinition = /** @class */function () {\n  function InstrumentationNodeModuleDefinition(name, supportedVersions, patch, unpatch, files) {\n    this.name = name;\n    this.supportedVersions = supportedVersions;\n    this.patch = patch;\n    this.unpatch = unpatch;\n    this.files = files || [];\n  }\n  return InstrumentationNodeModuleDefinition;\n}();\nexport { InstrumentationNodeModuleDefinition };","map":{"version":3,"names":["InstrumentationNodeModuleDefinition","name","supportedVersions","patch","unpatch","files"],"sources":["/home/egor/node_modules/@opentelemetry/instrumentation/src/instrumentationNodeModuleDefinition.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  InstrumentationModuleDefinition,\n  InstrumentationModuleFile,\n} from './types';\n\nexport class InstrumentationNodeModuleDefinition<T>\n  implements InstrumentationModuleDefinition<T>\n{\n  files: InstrumentationModuleFile<T>[];\n  constructor(\n    public name: string,\n    public supportedVersions: string[],\n    public patch?: (exports: T, moduleVersion?: string) => T,\n    public unpatch?: (exports: T, moduleVersion?: string) => void,\n    files?: InstrumentationModuleFile<any>[]\n  ) {\n    this.files = files || [];\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAqBA,IAAAA,mCAAA;EAIE,SAAAA,oCACSC,IAAY,EACZC,iBAA2B,EAC3BC,KAAiD,EACjDC,OAAsD,EAC7DC,KAAwC;IAJjC,KAAAJ,IAAI,GAAJA,IAAI;IACJ,KAAAC,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,OAAO,GAAPA,OAAO;IAGd,IAAI,CAACC,KAAK,GAAGA,KAAK,IAAI,EAAE;EAC1B;EACF,OAAAL,mCAAC;AAAD,CAAC,CAbD"},"metadata":{},"sourceType":"module","externalDependencies":[]}