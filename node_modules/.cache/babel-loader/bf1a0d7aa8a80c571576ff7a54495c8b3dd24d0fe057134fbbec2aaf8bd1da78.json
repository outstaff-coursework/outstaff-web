{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { millisToHrTime } from '@opentelemetry/core';\n/**\n * An internal opaque interface that the MetricReader receives as\n * MetricProducer. It acts as the storage key to the internal metric stream\n * state for each MetricReader.\n */\nvar MetricCollector = /** @class */function () {\n  function MetricCollector(_sharedState, _metricReader) {\n    this._sharedState = _sharedState;\n    this._metricReader = _metricReader;\n  }\n  MetricCollector.prototype.collect = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collectionTime, scopeMetrics, errors, meterCollectionPromises;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            collectionTime = millisToHrTime(Date.now());\n            scopeMetrics = [];\n            errors = [];\n            meterCollectionPromises = Array.from(this._sharedState.meterSharedStates.values()).map(function (meterSharedState) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var current;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, meterSharedState.collect(this, collectionTime, options)];\n                    case 1:\n                      current = _a.sent();\n                      // only add scope metrics if available\n                      if ((current === null || current === void 0 ? void 0 : current.scopeMetrics) != null) {\n                        scopeMetrics.push(current.scopeMetrics);\n                      }\n                      // only add errors if available\n                      if ((current === null || current === void 0 ? void 0 : current.errors) != null) {\n                        errors.push.apply(errors, __spreadArray([], __read(current.errors), false));\n                      }\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            });\n\n            return [4 /*yield*/, Promise.all(meterCollectionPromises)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/, {\n              resourceMetrics: {\n                resource: this._sharedState.resource,\n                scopeMetrics: scopeMetrics\n              },\n              errors: errors\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Delegates for MetricReader.forceFlush.\n   */\n  MetricCollector.prototype.forceFlush = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._metricReader.forceFlush(options)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Delegates for MetricReader.shutdown.\n   */\n  MetricCollector.prototype.shutdown = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._metricReader.shutdown(options)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MetricCollector.prototype.selectAggregationTemporality = function (instrumentType) {\n    return this._metricReader.selectAggregationTemporality(instrumentType);\n  };\n  MetricCollector.prototype.selectAggregation = function (instrumentType) {\n    return this._metricReader.selectAggregation(instrumentType);\n  };\n  return MetricCollector;\n}();\nexport { MetricCollector };","map":{"version":3,"names":["millisToHrTime","MetricCollector","_sharedState","_metricReader","prototype","collect","options","collectionTime","Date","now","scopeMetrics","errors","meterCollectionPromises","Array","from","meterSharedStates","values","map","meterSharedState","__awaiter","_this","current","_a","sent","push","apply","__spreadArray","__read","Promise","all","resourceMetrics","resource","forceFlush","shutdown","selectAggregationTemporality","instrumentType","selectAggregation"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/state/MetricCollector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { AggregationTemporalitySelector } from '../export/AggregationSelector';\nimport { CollectionResult, ScopeMetrics } from '../export/MetricData';\nimport { MetricProducer, MetricCollectOptions } from '../export/MetricProducer';\nimport { MetricReader } from '../export/MetricReader';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ForceFlushOptions, ShutdownOptions } from '../types';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\n\n/**\n * An internal opaque interface that the MetricReader receives as\n * MetricProducer. It acts as the storage key to the internal metric stream\n * state for each MetricReader.\n */\nexport class MetricCollector implements MetricProducer {\n  constructor(\n    private _sharedState: MeterProviderSharedState,\n    private _metricReader: MetricReader\n  ) {}\n\n  async collect(options?: MetricCollectOptions): Promise<CollectionResult> {\n    const collectionTime = millisToHrTime(Date.now());\n    const scopeMetrics: ScopeMetrics[] = [];\n    const errors: unknown[] = [];\n\n    const meterCollectionPromises = Array.from(\n      this._sharedState.meterSharedStates.values()\n    ).map(async meterSharedState => {\n      const current = await meterSharedState.collect(\n        this,\n        collectionTime,\n        options\n      );\n\n      // only add scope metrics if available\n      if (current?.scopeMetrics != null) {\n        scopeMetrics.push(current.scopeMetrics);\n      }\n\n      // only add errors if available\n      if (current?.errors != null) {\n        errors.push(...current.errors);\n      }\n    });\n    await Promise.all(meterCollectionPromises);\n\n    return {\n      resourceMetrics: {\n        resource: this._sharedState.resource,\n        scopeMetrics: scopeMetrics,\n      },\n      errors: errors,\n    };\n  }\n\n  /**\n   * Delegates for MetricReader.forceFlush.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    await this._metricReader.forceFlush(options);\n  }\n\n  /**\n   * Delegates for MetricReader.shutdown.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    await this._metricReader.shutdown(options);\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregationTemporality(instrumentType);\n  }\n\n  selectAggregation(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregation(instrumentType);\n  }\n}\n\n/**\n * An internal interface for MetricCollector. Exposes the necessary\n * information for metric collection.\n */\nexport interface MetricCollectorHandle {\n  selectAggregationTemporality: AggregationTemporalitySelector;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAASA,cAAc,QAAQ,qBAAqB;AASpD;;;;;AAKA,IAAAC,eAAA;EACE,SAAAA,gBACUC,YAAsC,EACtCC,aAA2B;IAD3B,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,aAAa,GAAbA,aAAa;EACpB;EAEGF,eAAA,CAAAG,SAAA,CAAAC,OAAO,GAAb,UAAcC,OAA8B;;;;;;;YACpCC,cAAc,GAAGP,cAAc,CAACQ,IAAI,CAACC,GAAG,EAAE,CAAC;YAC3CC,YAAY,GAAmB,EAAE;YACjCC,MAAM,GAAc,EAAE;YAEtBC,uBAAuB,GAAGC,KAAK,CAACC,IAAI,CACxC,IAAI,CAACZ,YAAY,CAACa,iBAAiB,CAACC,MAAM,EAAE,CAC7C,CAACC,GAAG,CAAC,UAAMC,gBAAgB;cAAA,OAAAC,SAAA,CAAAC,KAAA;;;;;sBACV,qBAAMF,gBAAgB,CAACb,OAAO,CAC5C,IAAI,EACJE,cAAc,EACdD,OAAO,CACR;;sBAJKe,OAAO,GAAGC,EAAA,CAAAC,IAAA,EAIf;sBAED;sBACA,IAAI,CAAAF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEX,YAAY,KAAI,IAAI,EAAE;wBACjCA,YAAY,CAACc,IAAI,CAACH,OAAO,CAACX,YAAY,CAAC;;sBAGzC;sBACA,IAAI,CAAAW,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEV,MAAM,KAAI,IAAI,EAAE;wBAC3BA,MAAM,CAACa,IAAI,CAAAC,KAAA,CAAXd,MAAM,EAAAe,aAAA,KAAAC,MAAA,CAASN,OAAO,CAACV,MAAM;;;;;;aAEhC,CAAC;;YACF,qBAAMiB,OAAO,CAACC,GAAG,CAACjB,uBAAuB,CAAC;;YAA1CU,EAAA,CAAAC,IAAA,EAA0C;YAE1C,sBAAO;cACLO,eAAe,EAAE;gBACfC,QAAQ,EAAE,IAAI,CAAC7B,YAAY,CAAC6B,QAAQ;gBACpCrB,YAAY,EAAEA;eACf;cACDC,MAAM,EAAEA;aACT;;;;GACF;EAED;;;EAGMV,eAAA,CAAAG,SAAA,CAAA4B,UAAU,GAAhB,UAAiB1B,OAA2B;;;;;YAC1C,qBAAM,IAAI,CAACH,aAAa,CAAC6B,UAAU,CAAC1B,OAAO,CAAC;;YAA5CgB,EAAA,CAAAC,IAAA,EAA4C;;;;;GAC7C;EAED;;;EAGMtB,eAAA,CAAAG,SAAA,CAAA6B,QAAQ,GAAd,UAAe3B,OAAyB;;;;;YACtC,qBAAM,IAAI,CAACH,aAAa,CAAC8B,QAAQ,CAAC3B,OAAO,CAAC;;YAA1CgB,EAAA,CAAAC,IAAA,EAA0C;;;;;GAC3C;;EAEDtB,eAAA,CAAAG,SAAA,CAAA8B,4BAA4B,GAA5B,UAA6BC,cAA8B;IACzD,OAAO,IAAI,CAAChC,aAAa,CAAC+B,4BAA4B,CAACC,cAAc,CAAC;EACxE,CAAC;EAEDlC,eAAA,CAAAG,SAAA,CAAAgC,iBAAiB,GAAjB,UAAkBD,cAA8B;IAC9C,OAAO,IAAI,CAAChC,aAAa,CAACiC,iBAAiB,CAACD,cAAc,CAAC;EAC7D,CAAC;EACH,OAAAlC,eAAC;AAAD,CAAC,CA9DD"},"metadata":{},"sourceType":"module","externalDependencies":[]}