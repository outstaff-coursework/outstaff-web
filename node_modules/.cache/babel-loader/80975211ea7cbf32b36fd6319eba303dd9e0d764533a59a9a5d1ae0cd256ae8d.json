{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n  return function (ex) {\n    diag.error(stringifyException(ex));\n  };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n  var result = {};\n  var current = ex;\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n      if (result[propertyName]) return;\n      var value = current[propertyName];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n  return result;\n}","map":{"version":3,"names":["diag","loggingErrorHandler","ex","error","stringifyException","JSON","stringify","flattenException","result","current","Object","getOwnPropertyNames","forEach","propertyName","value","String","getPrototypeOf"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/common/logging-error-handler.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,IAAI,QAAmB,oBAAoB;AAGpD;;;;AAIA,OAAM,SAAUC,mBAAmBA,CAAA;EACjC,OAAO,UAACC,EAAa;IACnBF,IAAI,CAACG,KAAK,CAACC,kBAAkB,CAACF,EAAE,CAAC,CAAC;EACpC,CAAC;AACH;AAEA;;;;AAIA,SAASE,kBAAkBA,CAACF,EAAsB;EAChD,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;IAC1B,OAAOA,EAAE;GACV,MAAM;IACL,OAAOG,IAAI,CAACC,SAAS,CAACC,gBAAgB,CAACL,EAAE,CAAC,CAAC;;AAE/C;AAEA;;;;;AAKA,SAASK,gBAAgBA,CAACL,EAAa;EACrC,IAAMM,MAAM,GAAG,EAA4B;EAC3C,IAAIC,OAAO,GAAGP,EAAE;EAEhB,OAAOO,OAAO,KAAK,IAAI,EAAE;IACvBC,MAAM,CAACC,mBAAmB,CAACF,OAAO,CAAC,CAACG,OAAO,CAAC,UAAAC,YAAY;MACtD,IAAIL,MAAM,CAACK,YAAY,CAAC,EAAE;MAC1B,IAAMC,KAAK,GAAGL,OAAO,CAACI,YAAoC,CAAC;MAC3D,IAAIC,KAAK,EAAE;QACTN,MAAM,CAACK,YAAY,CAAC,GAAGE,MAAM,CAACD,KAAK,CAAC;;IAExC,CAAC,CAAC;IACFL,OAAO,GAAGC,MAAM,CAACM,cAAc,CAACP,OAAO,CAAC;;EAG1C,OAAOD,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}