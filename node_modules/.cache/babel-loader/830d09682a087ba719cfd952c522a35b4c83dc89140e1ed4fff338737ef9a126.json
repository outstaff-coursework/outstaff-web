{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { diag } from '@opentelemetry/api';\nimport { isObservableInstrument } from '../Instruments';\nimport { BatchObservableResultImpl, ObservableResultImpl } from '../ObservableResult';\nimport { callWithTimeout, PromiseAllSettled, isPromiseAllSettledRejectionResult, setEquals } from '../utils';\n/**\n * An internal interface for managing ObservableCallbacks.\n *\n * Every registered callback associated with a set of instruments are be evaluated\n * exactly once during collection prior to reading data for that instrument.\n */\nvar ObservableRegistry = /** @class */function () {\n  function ObservableRegistry() {\n    this._callbacks = [];\n    this._batchCallbacks = [];\n  }\n  ObservableRegistry.prototype.addCallback = function (callback, instrument) {\n    var idx = this._findCallback(callback, instrument);\n    if (idx >= 0) {\n      return;\n    }\n    this._callbacks.push({\n      callback: callback,\n      instrument: instrument\n    });\n  };\n  ObservableRegistry.prototype.removeCallback = function (callback, instrument) {\n    var idx = this._findCallback(callback, instrument);\n    if (idx < 0) {\n      return;\n    }\n    this._callbacks.splice(idx, 1);\n  };\n  ObservableRegistry.prototype.addBatchCallback = function (callback, instruments) {\n    // Create a set of unique instruments.\n    var observableInstruments = new Set(instruments.filter(isObservableInstrument));\n    if (observableInstruments.size === 0) {\n      diag.error('BatchObservableCallback is not associated with valid instruments', instruments);\n      return;\n    }\n    var idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx >= 0) {\n      return;\n    }\n    this._batchCallbacks.push({\n      callback: callback,\n      instruments: observableInstruments\n    });\n  };\n  ObservableRegistry.prototype.removeBatchCallback = function (callback, instruments) {\n    // Create a set of unique instruments.\n    var observableInstruments = new Set(instruments.filter(isObservableInstrument));\n    var idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx < 0) {\n      return;\n    }\n    this._batchCallbacks.splice(idx, 1);\n  };\n  /**\n   * @returns a promise of rejected reasons for invoking callbacks.\n   */\n  ObservableRegistry.prototype.observe = function (collectionTime, timeoutMillis) {\n    return __awaiter(this, void 0, void 0, function () {\n      var callbackFutures, batchCallbackFutures, results, rejections;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            callbackFutures = this._observeCallbacks(collectionTime, timeoutMillis);\n            batchCallbackFutures = this._observeBatchCallbacks(collectionTime, timeoutMillis);\n            return [4 /*yield*/, PromiseAllSettled(__spreadArray(__spreadArray([], __read(callbackFutures), false), __read(batchCallbackFutures), false))];\n          case 1:\n            results = _a.sent();\n            rejections = results.filter(isPromiseAllSettledRejectionResult).map(function (it) {\n              return it.reason;\n            });\n            return [2 /*return*/, rejections];\n        }\n      });\n    });\n  };\n  ObservableRegistry.prototype._observeCallbacks = function (observationTime, timeoutMillis) {\n    var _this = this;\n    return this._callbacks.map(function (_a) {\n      var callback = _a.callback,\n        instrument = _a.instrument;\n      return __awaiter(_this, void 0, void 0, function () {\n        var observableResult, callPromise;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              observableResult = new ObservableResultImpl(instrument._descriptor.name, instrument._descriptor.valueType);\n              callPromise = Promise.resolve(callback(observableResult));\n              if (timeoutMillis != null) {\n                callPromise = callWithTimeout(callPromise, timeoutMillis);\n              }\n              return [4 /*yield*/, callPromise];\n            case 1:\n              _b.sent();\n              instrument._metricStorages.forEach(function (metricStorage) {\n                metricStorage.record(observableResult._buffer, observationTime);\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  ObservableRegistry.prototype._observeBatchCallbacks = function (observationTime, timeoutMillis) {\n    var _this = this;\n    return this._batchCallbacks.map(function (_a) {\n      var callback = _a.callback,\n        instruments = _a.instruments;\n      return __awaiter(_this, void 0, void 0, function () {\n        var observableResult, callPromise;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              observableResult = new BatchObservableResultImpl();\n              callPromise = Promise.resolve(callback(observableResult));\n              if (timeoutMillis != null) {\n                callPromise = callWithTimeout(callPromise, timeoutMillis);\n              }\n              return [4 /*yield*/, callPromise];\n            case 1:\n              _b.sent();\n              instruments.forEach(function (instrument) {\n                var buffer = observableResult._buffer.get(instrument);\n                if (buffer == null) {\n                  return;\n                }\n                instrument._metricStorages.forEach(function (metricStorage) {\n                  metricStorage.record(buffer, observationTime);\n                });\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  ObservableRegistry.prototype._findCallback = function (callback, instrument) {\n    return this._callbacks.findIndex(function (record) {\n      return record.callback === callback && record.instrument === instrument;\n    });\n  };\n  ObservableRegistry.prototype._findBatchCallback = function (callback, instruments) {\n    return this._batchCallbacks.findIndex(function (record) {\n      return record.callback === callback && setEquals(record.instruments, instruments);\n    });\n  };\n  return ObservableRegistry;\n}();\nexport { ObservableRegistry };","map":{"version":3,"names":["diag","isObservableInstrument","BatchObservableResultImpl","ObservableResultImpl","callWithTimeout","PromiseAllSettled","isPromiseAllSettledRejectionResult","setEquals","ObservableRegistry","_callbacks","_batchCallbacks","prototype","addCallback","callback","instrument","idx","_findCallback","push","removeCallback","splice","addBatchCallback","instruments","observableInstruments","Set","filter","size","error","_findBatchCallback","removeBatchCallback","observe","collectionTime","timeoutMillis","callbackFutures","_observeCallbacks","batchCallbackFutures","_observeBatchCallbacks","__spreadArray","__read","results","_a","sent","rejections","map","it","reason","observationTime","_this","observableResult","_descriptor","name","valueType","callPromise","Promise","resolve","_b","_metricStorages","forEach","metricStorage","record","_buffer","buffer","get","findIndex"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/state/ObservableRegistry.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  HrTime,\n  BatchObservableCallback,\n  Observable,\n  ObservableCallback,\n} from '@opentelemetry/api';\nimport { isObservableInstrument, ObservableInstrument } from '../Instruments';\nimport {\n  BatchObservableResultImpl,\n  ObservableResultImpl,\n} from '../ObservableResult';\nimport {\n  callWithTimeout,\n  PromiseAllSettled,\n  isPromiseAllSettledRejectionResult,\n  setEquals,\n} from '../utils';\n\n/**\n * Records for single instrument observable callback.\n */\ninterface ObservableCallbackRecord {\n  callback: ObservableCallback;\n  instrument: ObservableInstrument;\n}\n\n/**\n * Records for multiple instruments observable callback.\n */\ninterface BatchObservableCallbackRecord {\n  callback: BatchObservableCallback;\n  instruments: Set<ObservableInstrument>;\n}\n\n/**\n * An internal interface for managing ObservableCallbacks.\n *\n * Every registered callback associated with a set of instruments are be evaluated\n * exactly once during collection prior to reading data for that instrument.\n */\nexport class ObservableRegistry {\n  private _callbacks: ObservableCallbackRecord[] = [];\n  private _batchCallbacks: BatchObservableCallbackRecord[] = [];\n\n  addCallback(callback: ObservableCallback, instrument: ObservableInstrument) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx >= 0) {\n      return;\n    }\n    this._callbacks.push({ callback, instrument });\n  }\n\n  removeCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx < 0) {\n      return;\n    }\n    this._callbacks.splice(idx, 1);\n  }\n\n  addBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    if (observableInstruments.size === 0) {\n      diag.error(\n        'BatchObservableCallback is not associated with valid instruments',\n        instruments\n      );\n      return;\n    }\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx >= 0) {\n      return;\n    }\n    this._batchCallbacks.push({ callback, instruments: observableInstruments });\n  }\n\n  removeBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx < 0) {\n      return;\n    }\n    this._batchCallbacks.splice(idx, 1);\n  }\n\n  /**\n   * @returns a promise of rejected reasons for invoking callbacks.\n   */\n  async observe(\n    collectionTime: HrTime,\n    timeoutMillis?: number\n  ): Promise<unknown[]> {\n    const callbackFutures = this._observeCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n    const batchCallbackFutures = this._observeBatchCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n\n    const results = await PromiseAllSettled([\n      ...callbackFutures,\n      ...batchCallbackFutures,\n    ]);\n\n    const rejections = results\n      .filter(isPromiseAllSettledRejectionResult)\n      .map(it => it.reason);\n    return rejections;\n  }\n\n  private _observeCallbacks(observationTime: HrTime, timeoutMillis?: number) {\n    return this._callbacks.map(async ({ callback, instrument }) => {\n      const observableResult = new ObservableResultImpl(\n        instrument._descriptor.name,\n        instrument._descriptor.valueType\n      );\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instrument._metricStorages.forEach(metricStorage => {\n        metricStorage.record(observableResult._buffer, observationTime);\n      });\n    });\n  }\n\n  private _observeBatchCallbacks(\n    observationTime: HrTime,\n    timeoutMillis?: number\n  ) {\n    return this._batchCallbacks.map(async ({ callback, instruments }) => {\n      const observableResult = new BatchObservableResultImpl();\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instruments.forEach(instrument => {\n        const buffer = observableResult._buffer.get(instrument);\n        if (buffer == null) {\n          return;\n        }\n        instrument._metricStorages.forEach(metricStorage => {\n          metricStorage.record(buffer, observationTime);\n        });\n      });\n    });\n  }\n\n  private _findCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    return this._callbacks.findIndex(record => {\n      return record.callback === callback && record.instrument === instrument;\n    });\n  }\n\n  private _findBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Set<ObservableInstrument>\n  ) {\n    return this._batchCallbacks.findIndex(record => {\n      return (\n        record.callback === callback &&\n        setEquals(record.instruments, instruments)\n      );\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}