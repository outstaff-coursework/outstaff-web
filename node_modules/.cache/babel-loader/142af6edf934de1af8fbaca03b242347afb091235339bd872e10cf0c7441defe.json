{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT\n    },\n    spanLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT\n    }\n  };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(environment) {\n  if (environment === void 0) {\n    environment = getEnv();\n  }\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler()\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler()\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment))\n      });\n    default:\n      diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n      return new AlwaysOnSampler();\n  }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n  if (environment.OTEL_TRACES_SAMPLER_ARG === undefined || environment.OTEL_TRACES_SAMPLER_ARG === '') {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n  if (isNaN(probability)) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  if (probability < 0 || probability > 1) {\n    diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  return probability;\n}","map":{"version":3,"names":["diag","getEnv","TracesSamplerValues","AlwaysOffSampler","AlwaysOnSampler","ParentBasedSampler","TraceIdRatioBasedSampler","env","FALLBACK_OTEL_TRACES_SAMPLER","AlwaysOn","DEFAULT_RATIO","loadDefaultConfig","sampler","buildSamplerFromEnv","forceFlushTimeoutMillis","generalLimits","attributeValueLengthLimit","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","attributeCountLimit","OTEL_ATTRIBUTE_COUNT_LIMIT","spanLimits","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","linkCountLimit","OTEL_SPAN_LINK_COUNT_LIMIT","eventCountLimit","OTEL_SPAN_EVENT_COUNT_LIMIT","attributePerEventCountLimit","OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT","attributePerLinkCountLimit","OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT","environment","OTEL_TRACES_SAMPLER","AlwaysOff","ParentBasedAlwaysOn","root","ParentBasedAlwaysOff","TraceIdRatio","getSamplerProbabilityFromEnv","ParentBasedTraceIdRatio","error","OTEL_TRACES_SAMPLER_ARG","undefined","probability","Number","isNaN"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-base/src/config.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues, ENVIRONMENT } from '@opentelemetry/core';\nimport { Sampler } from './Sampler';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\n\nconst env = getEnv();\nconst FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO = 1;\n\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n    },\n    spanLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    },\n  };\n}\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(\n  environment: Required<ENVIRONMENT> = getEnv()\n): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(\n        getSamplerProbabilityFromEnv(environment)\n      );\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(\n          getSamplerProbabilityFromEnv(environment)\n        ),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(\n  environment: Required<ENVIRONMENT>\n): number | undefined {\n  if (\n    environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    environment.OTEL_TRACES_SAMPLER_ARG === ''\n  ) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}