{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nvar RPC_METADATA_KEY = createContextKey('OpenTelemetry SDK Context Key RPC_METADATA');\nexport var RPCType;\n(function (RPCType) {\n  RPCType[\"HTTP\"] = \"http\";\n})(RPCType || (RPCType = {}));\nexport function setRPCMetadata(context, meta) {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\nexport function deleteRPCMetadata(context) {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\nexport function getRPCMetadata(context) {\n  return context.getValue(RPC_METADATA_KEY);\n}","map":{"version":3,"names":["createContextKey","RPC_METADATA_KEY","RPCType","setRPCMetadata","context","meta","setValue","deleteRPCMetadata","deleteValue","getRPCMetadata","getValue"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/trace/rpc-metadata.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey, Span } from '@opentelemetry/api';\n\nconst RPC_METADATA_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key RPC_METADATA'\n);\n\nexport enum RPCType {\n  HTTP = 'http',\n}\n\ntype HTTPMetadata = {\n  type: RPCType.HTTP;\n  route?: string;\n  span: Span;\n};\n\n/**\n * Allows for future rpc metadata to be used with this mechanism\n */\nexport type RPCMetadata = HTTPMetadata;\n\nexport function setRPCMetadata(context: Context, meta: RPCMetadata): Context {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\n\nexport function deleteRPCMetadata(context: Context): Context {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\n\nexport function getRPCMetadata(context: Context): RPCMetadata | undefined {\n  return context.getValue(RPC_METADATA_KEY) as RPCMetadata | undefined;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAkBA,gBAAgB,QAAc,oBAAoB;AAEpE,IAAMC,gBAAgB,GAAGD,gBAAgB,CACvC,4CAA4C,CAC7C;AAED,WAAYE,OAEX;AAFD,WAAYA,OAAO;EACjBA,OAAA,iBAAa;AACf,CAAC,EAFWA,OAAO,KAAPA,OAAO;AAenB,OAAM,SAAUC,cAAcA,CAACC,OAAgB,EAAEC,IAAiB;EAChE,OAAOD,OAAO,CAACE,QAAQ,CAACL,gBAAgB,EAAEI,IAAI,CAAC;AACjD;AAEA,OAAM,SAAUE,iBAAiBA,CAACH,OAAgB;EAChD,OAAOA,OAAO,CAACI,WAAW,CAACP,gBAAgB,CAAC;AAC9C;AAEA,OAAM,SAAUQ,cAAcA,CAACL,OAAgB;EAC7C,OAAOA,OAAO,CAACM,QAAQ,CAACT,gBAAgB,CAA4B;AACtE"},"metadata":{},"sourceType":"module","externalDependencies":[]}