{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\n/**\n * An internal record for shared meter provider states.\n */\nvar MeterProviderSharedState = /** @class */function () {\n  function MeterProviderSharedState(resource) {\n    this.resource = resource;\n    this.viewRegistry = new ViewRegistry();\n    this.metricCollectors = [];\n    this.meterSharedStates = new Map();\n  }\n  MeterProviderSharedState.prototype.getMeterSharedState = function (instrumentationScope) {\n    var id = instrumentationScopeId(instrumentationScope);\n    var meterSharedState = this.meterSharedStates.get(id);\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n    return meterSharedState;\n  };\n  MeterProviderSharedState.prototype.selectAggregations = function (instrumentType) {\n    var e_1, _a;\n    var result = [];\n    try {\n      for (var _b = __values(this.metricCollectors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var collector = _c.value;\n        result.push([collector, collector.selectAggregation(instrumentType)]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return result;\n  };\n  return MeterProviderSharedState;\n}();\nexport { MeterProviderSharedState };","map":{"version":3,"names":["instrumentationScopeId","ViewRegistry","MeterSharedState","MeterProviderSharedState","resource","viewRegistry","metricCollectors","meterSharedStates","Map","prototype","getMeterSharedState","instrumentationScope","id","meterSharedState","get","set","selectAggregations","instrumentType","result","_b","__values","_c","next","done","collector","value","push","selectAggregation"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/state/MeterProviderSharedState.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { Aggregation, InstrumentType } from '..';\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\nimport { MetricCollector, MetricCollectorHandle } from './MetricCollector';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterProviderSharedState {\n  viewRegistry = new ViewRegistry();\n\n  metricCollectors: MetricCollector[] = [];\n\n  meterSharedStates: Map<string, MeterSharedState> = new Map();\n\n  constructor(public resource: IResource) {}\n\n  getMeterSharedState(instrumentationScope: InstrumentationScope) {\n    const id = instrumentationScopeId(instrumentationScope);\n    let meterSharedState = this.meterSharedStates.get(id);\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n    return meterSharedState;\n  }\n\n  selectAggregations(instrumentType: InstrumentType) {\n    const result: [MetricCollectorHandle, Aggregation][] = [];\n    for (const collector of this.metricCollectors) {\n      result.push([collector, collector.selectAggregation(instrumentType)]);\n    }\n    return result;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,sBAAsB,QAAQ,UAAU;AACjD,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,gBAAgB,QAAQ,oBAAoB;AAGrD;;;AAGA,IAAAC,wBAAA;EAOE,SAAAA,yBAAmBC,QAAmB;IAAnB,KAAAA,QAAQ,GAARA,QAAQ;IAN3B,KAAAC,YAAY,GAAG,IAAIJ,YAAY,EAAE;IAEjC,KAAAK,gBAAgB,GAAsB,EAAE;IAExC,KAAAC,iBAAiB,GAAkC,IAAIC,GAAG,EAAE;EAEnB;EAEzCL,wBAAA,CAAAM,SAAA,CAAAC,mBAAmB,GAAnB,UAAoBC,oBAA0C;IAC5D,IAAMC,EAAE,GAAGZ,sBAAsB,CAACW,oBAAoB,CAAC;IACvD,IAAIE,gBAAgB,GAAG,IAAI,CAACN,iBAAiB,CAACO,GAAG,CAACF,EAAE,CAAC;IACrD,IAAIC,gBAAgB,IAAI,IAAI,EAAE;MAC5BA,gBAAgB,GAAG,IAAIX,gBAAgB,CAAC,IAAI,EAAES,oBAAoB,CAAC;MACnE,IAAI,CAACJ,iBAAiB,CAACQ,GAAG,CAACH,EAAE,EAAEC,gBAAgB,CAAC;;IAElD,OAAOA,gBAAgB;EACzB,CAAC;EAEDV,wBAAA,CAAAM,SAAA,CAAAO,kBAAkB,GAAlB,UAAmBC,cAA8B;;IAC/C,IAAMC,MAAM,GAA2C,EAAE;;MACzD,KAAwB,IAAAC,EAAA,GAAAC,QAAA,KAAI,CAACd,gBAAgB,GAAAe,EAAA,GAAAF,EAAA,CAAAG,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAF,EAAA,CAAAG,IAAA,IAAE;QAA1C,IAAME,SAAS,GAAAH,EAAA,CAAAI,KAAA;QAClBP,MAAM,CAACQ,IAAI,CAAC,CAACF,SAAS,EAAEA,SAAS,CAACG,iBAAiB,CAACV,cAAc,CAAC,CAAC,CAAC;;;;;;;;;;;;;IAEvE,OAAOC,MAAM;EACf,CAAC;EACH,OAAAf,wBAAC;AAAD,CAAC,CA1BD"},"metadata":{},"sourceType":"module","externalDependencies":[]}