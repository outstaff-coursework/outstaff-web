{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ExportResultCode, hrTimeToMicroseconds } from '@opentelemetry/core';\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleSpanExporter = /** @class */function () {\n  function ConsoleSpanExporter() {}\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n    return this._sendSpans(spans, resultCallback);\n  };\n  /**\n   * Shutdown the exporter.\n   */\n  ConsoleSpanExporter.prototype.shutdown = function () {\n    this._sendSpans([]);\n    return this.forceFlush();\n  };\n  /**\n   * Exports any pending spans in exporter\n   */\n  ConsoleSpanExporter.prototype.forceFlush = function () {\n    return Promise.resolve();\n  };\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  ConsoleSpanExporter.prototype._exportInfo = function (span) {\n    var _a;\n    return {\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      traceState: (_a = span.spanContext().traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links\n    };\n  };\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n    var e_1, _a;\n    try {\n      for (var spans_1 = __values(spans), spans_1_1 = spans_1.next(); !spans_1_1.done; spans_1_1 = spans_1.next()) {\n        var span = spans_1_1.value;\n        console.dir(this._exportInfo(span), {\n          depth: 3\n        });\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (spans_1_1 && !spans_1_1.done && (_a = spans_1.return)) _a.call(spans_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    if (done) {\n      return done({\n        code: ExportResultCode.SUCCESS\n      });\n    }\n  };\n  return ConsoleSpanExporter;\n}();\nexport { ConsoleSpanExporter };","map":{"version":3,"names":["ExportResultCode","hrTimeToMicroseconds","ConsoleSpanExporter","prototype","export","spans","resultCallback","_sendSpans","shutdown","forceFlush","Promise","resolve","_exportInfo","span","traceId","spanContext","parentId","parentSpanId","traceState","_a","serialize","name","id","spanId","kind","timestamp","startTime","duration","attributes","status","events","links","done","spans_1","__values","spans_1_1","next","value","console","dir","depth","code","SUCCESS"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-base/src/export/ConsoleSpanExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport {\n  ExportResult,\n  ExportResultCode,\n  hrTimeToMicroseconds,\n} from '@opentelemetry/core';\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleSpanExporter implements SpanExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    return this._sendSpans(spans, resultCallback);\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  private _exportInfo(span: ReadableSpan) {\n    return {\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      traceState: span.spanContext().traceState?.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links,\n    };\n  }\n\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  private _sendSpans(\n    spans: ReadableSpan[],\n    done?: (result: ExportResult) => void\n  ): void {\n    for (const span of spans) {\n      console.dir(this._exportInfo(span), { depth: 3 });\n    }\n    if (done) {\n      return done({ code: ExportResultCode.SUCCESS });\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAEEA,gBAAgB,EAChBC,oBAAoB,QACf,qBAAqB;AAE5B;;;;AAKA;AACA,IAAAC,mBAAA;EAAA,SAAAA,oBAAA,GAiEA;EAhEE;;;;;EAKAA,mBAAA,CAAAC,SAAA,CAAAC,MAAM,GAAN,UACEC,KAAqB,EACrBC,cAA8C;IAE9C,OAAO,IAAI,CAACC,UAAU,CAACF,KAAK,EAAEC,cAAc,CAAC;EAC/C,CAAC;EAED;;;EAGAJ,mBAAA,CAAAC,SAAA,CAAAK,QAAQ,GAAR;IACE,IAAI,CAACD,UAAU,CAAC,EAAE,CAAC;IACnB,OAAO,IAAI,CAACE,UAAU,EAAE;EAC1B,CAAC;EAED;;;EAGAP,mBAAA,CAAAC,SAAA,CAAAM,UAAU,GAAV;IACE,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EAED;;;;EAIQT,mBAAA,CAAAC,SAAA,CAAAS,WAAW,GAAnB,UAAoBC,IAAkB;;IACpC,OAAO;MACLC,OAAO,EAAED,IAAI,CAACE,WAAW,EAAE,CAACD,OAAO;MACnCE,QAAQ,EAAEH,IAAI,CAACI,YAAY;MAC3BC,UAAU,EAAE,CAAAC,EAAA,GAAAN,IAAI,CAACE,WAAW,EAAE,CAACG,UAAU,cAAAC,EAAA,uBAAAA,EAAA,CAAEC,SAAS,EAAE;MACtDC,IAAI,EAAER,IAAI,CAACQ,IAAI;MACfC,EAAE,EAAET,IAAI,CAACE,WAAW,EAAE,CAACQ,MAAM;MAC7BC,IAAI,EAAEX,IAAI,CAACW,IAAI;MACfC,SAAS,EAAExB,oBAAoB,CAACY,IAAI,CAACa,SAAS,CAAC;MAC/CC,QAAQ,EAAE1B,oBAAoB,CAACY,IAAI,CAACc,QAAQ,CAAC;MAC7CC,UAAU,EAAEf,IAAI,CAACe,UAAU;MAC3BC,MAAM,EAAEhB,IAAI,CAACgB,MAAM;MACnBC,MAAM,EAAEjB,IAAI,CAACiB,MAAM;MACnBC,KAAK,EAAElB,IAAI,CAACkB;KACb;EACH,CAAC;EAED;;;;;EAKQ7B,mBAAA,CAAAC,SAAA,CAAAI,UAAU,GAAlB,UACEF,KAAqB,EACrB2B,IAAqC;;;MAErC,KAAmB,IAAAC,OAAA,GAAAC,QAAA,CAAA7B,KAAK,GAAA8B,SAAA,GAAAF,OAAA,CAAAG,IAAA,KAAAD,SAAA,CAAAH,IAAA,EAAAG,SAAA,GAAAF,OAAA,CAAAG,IAAA,IAAE;QAArB,IAAMvB,IAAI,GAAAsB,SAAA,CAAAE,KAAA;QACbC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3B,WAAW,CAACC,IAAI,CAAC,EAAE;UAAE2B,KAAK,EAAE;QAAC,CAAE,CAAC;;;;;;;;;;;;;IAEnD,IAAIR,IAAI,EAAE;MACR,OAAOA,IAAI,CAAC;QAAES,IAAI,EAAEzC,gBAAgB,CAAC0C;MAAO,CAAE,CAAC;;EAEnD,CAAC;EACH,OAAAxC,mBAAC;AAAD,CAAC,CAjED"},"metadata":{},"sourceType":"module","externalDependencies":[]}