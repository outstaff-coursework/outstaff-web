{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nvar StackContextManager = /** @class */function () {\n  function StackContextManager() {\n    /**\n     * whether the context manager is enabled or not\n     */\n    this._enabled = false;\n    /**\n     * Keeps the reference to current context\n     */\n    this._currentContext = ROOT_CONTEXT;\n  }\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  StackContextManager.prototype._bindFunction = function (context, target) {\n    if (context === void 0) {\n      context = ROOT_CONTEXT;\n    }\n    var manager = this;\n    var contextWrapper = function () {\n      var _this = this;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return manager.with(context, function () {\n        return target.apply(_this, args);\n      });\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length\n    });\n    return contextWrapper;\n  };\n  /**\n   * Returns the active context\n   */\n  StackContextManager.prototype.active = function () {\n    return this._currentContext;\n  };\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  StackContextManager.prototype.bind = function (context, target) {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  };\n  /**\n   * Disable the context manager (clears the current context)\n   */\n  StackContextManager.prototype.disable = function () {\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  };\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  StackContextManager.prototype.enable = function () {\n    if (this._enabled) {\n      return this;\n    }\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  };\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  StackContextManager.prototype.with = function (context, fn, thisArg) {\n    var args = [];\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n    var previousContext = this._currentContext;\n    this._currentContext = context || ROOT_CONTEXT;\n    try {\n      return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n    } finally {\n      this._currentContext = previousContext;\n    }\n  };\n  return StackContextManager;\n}();\nexport { StackContextManager };","map":{"version":3,"names":["ROOT_CONTEXT","StackContextManager","_enabled","_currentContext","prototype","_bindFunction","context","target","manager","contextWrapper","_this","args","_i","arguments","length","with","apply","Object","defineProperty","enumerable","configurable","writable","value","active","bind","undefined","disable","enable","fn","thisArg","previousContext","call","__spreadArray","__read"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-web/src/StackContextManager.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ContextManager, ROOT_CONTEXT } from '@opentelemetry/api';\n\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nexport class StackContextManager implements ContextManager {\n  /**\n   * whether the context manager is enabled or not\n   */\n  private _enabled = false;\n\n  /**\n   * Keeps the reference to current context\n   */\n  public _currentContext = ROOT_CONTEXT;\n\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _bindFunction<T extends Function>(\n    context = ROOT_CONTEXT,\n    target: T\n  ): T {\n    const manager = this;\n    const contextWrapper = function (this: unknown, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    return contextWrapper as unknown as T;\n  }\n\n  /**\n   * Returns the active context\n   */\n  active(): Context {\n    return this._currentContext;\n  }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  /**\n   * Disable the context manager (clears the current context)\n   */\n  disable(): this {\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  enable(): this {\n    if (this._enabled) {\n      return this;\n    }\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  }\n\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context | null,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const previousContext = this._currentContext;\n    this._currentContext = context || ROOT_CONTEXT;\n\n    try {\n      return fn.call(thisArg, ...args);\n    } finally {\n      this._currentContext = previousContext;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}