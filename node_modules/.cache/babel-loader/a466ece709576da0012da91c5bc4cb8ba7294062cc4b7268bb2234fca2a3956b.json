{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '../trace/suppress-tracing';\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppresion of Traces.\n */\nexport function _export(exporter, arg) {\n  return new Promise(function (resolve) {\n    // prevent downstream exporter calls from generating spans\n    context.with(suppressTracing(context.active()), function () {\n      exporter.export(arg, function (result) {\n        resolve(result);\n      });\n    });\n  });\n}","map":{"version":3,"names":["context","suppressTracing","_export","exporter","arg","Promise","resolve","with","active","export","result"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/internal/exporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport { ExportResult } from '../ExportResult';\nimport { suppressTracing } from '../trace/suppress-tracing';\n\nexport interface Exporter<T> {\n  export(arg: T, resultCallback: (result: ExportResult) => void): void;\n}\n\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppresion of Traces.\n */\nexport function _export<T>(\n  exporter: Exporter<T>,\n  arg: T\n): Promise<ExportResult> {\n  return new Promise(resolve => {\n    // prevent downstream exporter calls from generating spans\n    context.with(suppressTracing(context.active()), () => {\n      exporter.export(arg, (result: ExportResult) => {\n        resolve(result);\n      });\n    });\n  });\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,OAAO,QAAQ,oBAAoB;AAE5C,SAASC,eAAe,QAAQ,2BAA2B;AAM3D;;;;AAIA,OAAM,SAAUC,OAAOA,CACrBC,QAAqB,EACrBC,GAAM;EAEN,OAAO,IAAIC,OAAO,CAAC,UAAAC,OAAO;IACxB;IACAN,OAAO,CAACO,IAAI,CAACN,eAAe,CAACD,OAAO,CAACQ,MAAM,EAAE,CAAC,EAAE;MAC9CL,QAAQ,CAACM,MAAM,CAACL,GAAG,EAAE,UAACM,MAAoB;QACxCJ,OAAO,CAACI,MAAM,CAAC;MACjB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}