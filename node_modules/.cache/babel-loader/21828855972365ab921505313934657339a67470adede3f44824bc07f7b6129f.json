{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trace, metrics } from '@opentelemetry/api';\nimport { disableInstrumentations, enableInstrumentations, parseInstrumentationOptions } from './autoLoaderUtils';\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(options) {\n  var instrumentations = parseInstrumentationOptions(options.instrumentations).instrumentations;\n  var tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  var meterProvider = options.meterProvider || metrics.getMeterProvider();\n  enableInstrumentations(instrumentations, tracerProvider, meterProvider);\n  return function () {\n    disableInstrumentations(instrumentations);\n  };\n}","map":{"version":3,"names":["trace","metrics","disableInstrumentations","enableInstrumentations","parseInstrumentationOptions","registerInstrumentations","options","instrumentations","tracerProvider","getTracerProvider","meterProvider","getMeterProvider"],"sources":["/home/egor/node_modules/@opentelemetry/instrumentation/src/autoLoader.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, metrics } from '@opentelemetry/api';\nimport {\n  disableInstrumentations,\n  enableInstrumentations,\n  parseInstrumentationOptions,\n} from './autoLoaderUtils';\nimport { AutoLoaderOptions } from './types_internal';\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(\n  options: AutoLoaderOptions\n): () => void {\n  const { instrumentations } = parseInstrumentationOptions(\n    options.instrumentations\n  );\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n\n  enableInstrumentations(instrumentations, tracerProvider, meterProvider);\n\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,KAAK,EAAEC,OAAO,QAAQ,oBAAoB;AACnD,SACEC,uBAAuB,EACvBC,sBAAsB,EACtBC,2BAA2B,QACtB,mBAAmB;AAG1B;;;;;;AAMA,OAAM,SAAUC,wBAAwBA,CACtCC,OAA0B;EAElB,IAAAC,gBAAgB,GAAKH,2BAA2B,CACtDE,OAAO,CAACC,gBAAgB,CACzB,CAAAA,gBAFuB;EAGxB,IAAMC,cAAc,GAAGF,OAAO,CAACE,cAAc,IAAIR,KAAK,CAACS,iBAAiB,EAAE;EAC1E,IAAMC,aAAa,GAAGJ,OAAO,CAACI,aAAa,IAAIT,OAAO,CAACU,gBAAgB,EAAE;EAEzER,sBAAsB,CAACI,gBAAgB,EAAEC,cAAc,EAAEE,aAAa,CAAC;EAEvE,OAAO;IACLR,uBAAuB,CAACK,gBAAgB,CAAC;EAC3C,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}