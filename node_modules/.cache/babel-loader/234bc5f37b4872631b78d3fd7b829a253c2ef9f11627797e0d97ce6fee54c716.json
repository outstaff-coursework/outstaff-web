{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * In-memory Metrics Exporter is a Push Metric Exporter\n * which accumulates metrics data in the local memory and\n * allows to inspect it (useful for e.g. unit tests).\n */\nvar InMemoryMetricExporter = /** @class */function () {\n  function InMemoryMetricExporter(aggregationTemporality) {\n    this._shutdown = false;\n    this._metrics = [];\n    this._aggregationTemporality = aggregationTemporality;\n  }\n  /**\n   * @inheritedDoc\n   */\n  InMemoryMetricExporter.prototype.export = function (metrics, resultCallback) {\n    // Avoid storing metrics when exporter is shutdown\n    if (this._shutdown) {\n      setTimeout(function () {\n        return resultCallback({\n          code: ExportResultCode.FAILED\n        });\n      }, 0);\n      return;\n    }\n    this._metrics.push(metrics);\n    setTimeout(function () {\n      return resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }, 0);\n  };\n  /**\n   * Returns all the collected resource metrics\n   * @returns ResourceMetrics[]\n   */\n  InMemoryMetricExporter.prototype.getMetrics = function () {\n    return this._metrics;\n  };\n  InMemoryMetricExporter.prototype.forceFlush = function () {\n    return Promise.resolve();\n  };\n  InMemoryMetricExporter.prototype.reset = function () {\n    this._metrics = [];\n  };\n  InMemoryMetricExporter.prototype.selectAggregationTemporality = function (_instrumentType) {\n    return this._aggregationTemporality;\n  };\n  InMemoryMetricExporter.prototype.shutdown = function () {\n    this._shutdown = true;\n    return Promise.resolve();\n  };\n  return InMemoryMetricExporter;\n}();\nexport { InMemoryMetricExporter };","map":{"version":3,"names":["ExportResultCode","InMemoryMetricExporter","aggregationTemporality","_shutdown","_metrics","_aggregationTemporality","prototype","export","metrics","resultCallback","setTimeout","code","FAILED","push","SUCCESS","getMetrics","forceFlush","Promise","resolve","reset","selectAggregationTemporality","_instrumentType","shutdown"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/export/InMemoryMetricExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResultCode } from '@opentelemetry/core';\nimport { ExportResult } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\n\n/**\n * In-memory Metrics Exporter is a Push Metric Exporter\n * which accumulates metrics data in the local memory and\n * allows to inspect it (useful for e.g. unit tests).\n */\nexport class InMemoryMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _aggregationTemporality: AggregationTemporality;\n  private _metrics: ResourceMetrics[] = [];\n\n  constructor(aggregationTemporality: AggregationTemporality) {\n    this._aggregationTemporality = aggregationTemporality;\n  }\n\n  /**\n   * @inheritedDoc\n   */\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    // Avoid storing metrics when exporter is shutdown\n    if (this._shutdown) {\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    this._metrics.push(metrics);\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  /**\n   * Returns all the collected resource metrics\n   * @returns ResourceMetrics[]\n   */\n  public getMetrics(): ResourceMetrics[] {\n    return this._metrics;\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset() {\n    this._metrics = [];\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporality;\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,gBAAgB,QAAQ,qBAAqB;AAOtD;;;;;AAKA,IAAAC,sBAAA;EAKE,SAAAA,uBAAYC,sBAA8C;IAJhD,KAAAC,SAAS,GAAG,KAAK;IAEnB,KAAAC,QAAQ,GAAsB,EAAE;IAGtC,IAAI,CAACC,uBAAuB,GAAGH,sBAAsB;EACvD;EAEA;;;EAGAD,sBAAA,CAAAK,SAAA,CAAAC,MAAM,GAAN,UACEC,OAAwB,EACxBC,cAA8C;IAE9C;IACA,IAAI,IAAI,CAACN,SAAS,EAAE;MAClBO,UAAU,CAAC;QAAM,OAAAD,cAAc,CAAC;UAAEE,IAAI,EAAEX,gBAAgB,CAACY;QAAM,CAAE,CAAC;MAAjD,CAAiD,EAAE,CAAC,CAAC;MACtE;;IAGF,IAAI,CAACR,QAAQ,CAACS,IAAI,CAACL,OAAO,CAAC;IAC3BE,UAAU,CAAC;MAAM,OAAAD,cAAc,CAAC;QAAEE,IAAI,EAAEX,gBAAgB,CAACc;MAAO,CAAE,CAAC;IAAlD,CAAkD,EAAE,CAAC,CAAC;EACzE,CAAC;EAED;;;;EAIOb,sBAAA,CAAAK,SAAA,CAAAS,UAAU,GAAjB;IACE,OAAO,IAAI,CAACX,QAAQ;EACtB,CAAC;EAEDH,sBAAA,CAAAK,SAAA,CAAAU,UAAU,GAAV;IACE,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EAEDjB,sBAAA,CAAAK,SAAA,CAAAa,KAAK,GAAL;IACE,IAAI,CAACf,QAAQ,GAAG,EAAE;EACpB,CAAC;EAEDH,sBAAA,CAAAK,SAAA,CAAAc,4BAA4B,GAA5B,UACEC,eAA+B;IAE/B,OAAO,IAAI,CAAChB,uBAAuB;EACrC,CAAC;EAEDJ,sBAAA,CAAAK,SAAA,CAAAgB,QAAQ,GAAR;IACE,IAAI,CAACnB,SAAS,GAAG,IAAI;IACrB,OAAOc,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EACH,OAAAjB,sBAAC;AAAD,CAAC,CApDD"},"metadata":{},"sourceType":"module","externalDependencies":[]}