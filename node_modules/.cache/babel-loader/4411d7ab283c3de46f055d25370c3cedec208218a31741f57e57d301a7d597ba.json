{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { MappingError } from './types';\n/**\n * ExponentMapping implements exponential mapping functions for\n * scales <=0. For scales > 0 LogarithmMapping should be used.\n */\nvar ExponentMapping = /** @class */function () {\n  function ExponentMapping(scale) {\n    this._shift = -scale;\n  }\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  ExponentMapping.prototype.mapToIndex = function (value) {\n    if (value < ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex();\n    }\n    var exp = ieee754.getNormalBase2(value);\n    // In case the value is an exact power of two, compute a\n    // correction of -1. Note, we are using a custom _rightShift\n    // to accommodate a 52-bit argument, which the native bitwise\n    // operators do not support\n    var correction = this._rightShift(ieee754.getSignificand(value) - 1, ieee754.SIGNIFICAND_WIDTH);\n    return exp + correction >> this._shift;\n  };\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  ExponentMapping.prototype.lowerBoundary = function (index) {\n    var minIndex = this._minNormalLowerBoundaryIndex();\n    if (index < minIndex) {\n      throw new MappingError(\"underflow: \" + index + \" is < minimum lower boundary: \" + minIndex);\n    }\n    var maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index > maxIndex) {\n      throw new MappingError(\"overflow: \" + index + \" is > maximum lower boundary: \" + maxIndex);\n    }\n    return util.ldexp(1, index << this._shift);\n  };\n  Object.defineProperty(ExponentMapping.prototype, \"scale\", {\n    /**\n     * The scale used by this mapping\n     * @returns {number}\n     */\n    get: function () {\n      if (this._shift === 0) {\n        return 0;\n      }\n      return -this._shift;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ExponentMapping.prototype._minNormalLowerBoundaryIndex = function () {\n    var index = ieee754.MIN_NORMAL_EXPONENT >> this._shift;\n    if (this._shift < 2) {\n      index--;\n    }\n    return index;\n  };\n  ExponentMapping.prototype._maxNormalLowerBoundaryIndex = function () {\n    return ieee754.MAX_NORMAL_EXPONENT >> this._shift;\n  };\n  ExponentMapping.prototype._rightShift = function (value, shift) {\n    return Math.floor(value * Math.pow(2, -shift));\n  };\n  return ExponentMapping;\n}();\nexport { ExponentMapping };","map":{"version":3,"names":["ieee754","util","MappingError","ExponentMapping","scale","_shift","prototype","mapToIndex","value","MIN_VALUE","_minNormalLowerBoundaryIndex","exp","getNormalBase2","correction","_rightShift","getSignificand","SIGNIFICAND_WIDTH","lowerBoundary","index","minIndex","maxIndex","_maxNormalLowerBoundaryIndex","ldexp","Object","defineProperty","get","MIN_NORMAL_EXPONENT","MAX_NORMAL_EXPONENT","shift","Math","floor","pow"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ExponentMapping.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * ExponentMapping implements exponential mapping functions for\n * scales <=0. For scales > 0 LogarithmMapping should be used.\n */\nexport class ExponentMapping implements Mapping {\n  private readonly _shift: number;\n\n  constructor(scale: number) {\n    this._shift = -scale;\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value < ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex();\n    }\n\n    const exp = ieee754.getNormalBase2(value);\n\n    // In case the value is an exact power of two, compute a\n    // correction of -1. Note, we are using a custom _rightShift\n    // to accommodate a 52-bit argument, which the native bitwise\n    // operators do not support\n    const correction = this._rightShift(\n      ieee754.getSignificand(value) - 1,\n      ieee754.SIGNIFICAND_WIDTH\n    );\n\n    return (exp + correction) >> this._shift;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index < minIndex) {\n      throw new MappingError(\n        `underflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index > maxIndex) {\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    return util.ldexp(1, index << this._shift);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    if (this._shift === 0) {\n      return 0;\n    }\n    return -this._shift;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    let index = ieee754.MIN_NORMAL_EXPONENT >> this._shift;\n    if (this._shift < 2) {\n      index--;\n    }\n\n    return index;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ieee754.MAX_NORMAL_EXPONENT >> this._shift;\n  }\n\n  private _rightShift(value: number, shift: number): number {\n    return Math.floor(value * Math.pow(2, -shift));\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAO,KAAKA,OAAO,MAAM,WAAW;AACpC,OAAO,KAAKC,IAAI,MAAM,SAAS;AAC/B,SAAkBC,YAAY,QAAQ,SAAS;AAE/C;;;;AAIA,IAAAC,eAAA;EAGE,SAAAA,gBAAYC,KAAa;IACvB,IAAI,CAACC,MAAM,GAAG,CAACD,KAAK;EACtB;EAEA;;;;;EAKAD,eAAA,CAAAG,SAAA,CAAAC,UAAU,GAAV,UAAWC,KAAa;IACtB,IAAIA,KAAK,GAAGR,OAAO,CAACS,SAAS,EAAE;MAC7B,OAAO,IAAI,CAACC,4BAA4B,EAAE;;IAG5C,IAAMC,GAAG,GAAGX,OAAO,CAACY,cAAc,CAACJ,KAAK,CAAC;IAEzC;IACA;IACA;IACA;IACA,IAAMK,UAAU,GAAG,IAAI,CAACC,WAAW,CACjCd,OAAO,CAACe,cAAc,CAACP,KAAK,CAAC,GAAG,CAAC,EACjCR,OAAO,CAACgB,iBAAiB,CAC1B;IAED,OAAQL,GAAG,GAAGE,UAAU,IAAK,IAAI,CAACR,MAAM;EAC1C,CAAC;EAED;;;;;;EAMAF,eAAA,CAAAG,SAAA,CAAAW,aAAa,GAAb,UAAcC,KAAa;IACzB,IAAMC,QAAQ,GAAG,IAAI,CAACT,4BAA4B,EAAE;IACpD,IAAIQ,KAAK,GAAGC,QAAQ,EAAE;MACpB,MAAM,IAAIjB,YAAY,CACpB,gBAAcgB,KAAK,sCAAiCC,QAAU,CAC/D;;IAEH,IAAMC,QAAQ,GAAG,IAAI,CAACC,4BAA4B,EAAE;IACpD,IAAIH,KAAK,GAAGE,QAAQ,EAAE;MACpB,MAAM,IAAIlB,YAAY,CACpB,eAAagB,KAAK,sCAAiCE,QAAU,CAC9D;;IAGH,OAAOnB,IAAI,CAACqB,KAAK,CAAC,CAAC,EAAEJ,KAAK,IAAI,IAAI,CAACb,MAAM,CAAC;EAC5C,CAAC;EAMDkB,MAAA,CAAAC,cAAA,CAAIrB,eAAA,CAAAG,SAAA,SAAK;IAJT;;;;SAIA,SAAAmB,CAAA;MACE,IAAI,IAAI,CAACpB,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,CAAC;;MAEV,OAAO,CAAC,IAAI,CAACA,MAAM;IACrB,CAAC;;;;EAEOF,eAAA,CAAAG,SAAA,CAAAI,4BAA4B,GAApC;IACE,IAAIQ,KAAK,GAAGlB,OAAO,CAAC0B,mBAAmB,IAAI,IAAI,CAACrB,MAAM;IACtD,IAAI,IAAI,CAACA,MAAM,GAAG,CAAC,EAAE;MACnBa,KAAK,EAAE;;IAGT,OAAOA,KAAK;EACd,CAAC;EAEOf,eAAA,CAAAG,SAAA,CAAAe,4BAA4B,GAApC;IACE,OAAOrB,OAAO,CAAC2B,mBAAmB,IAAI,IAAI,CAACtB,MAAM;EACnD,CAAC;EAEOF,eAAA,CAAAG,SAAA,CAAAQ,WAAW,GAAnB,UAAoBN,KAAa,EAAEoB,KAAa;IAC9C,OAAOC,IAAI,CAACC,KAAK,CAACtB,KAAK,GAAGqB,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EAChD,CAAC;EACH,OAAAzB,eAAC;AAAD,CAAC,CAjFD"},"metadata":{},"sourceType":"module","externalDependencies":[]}