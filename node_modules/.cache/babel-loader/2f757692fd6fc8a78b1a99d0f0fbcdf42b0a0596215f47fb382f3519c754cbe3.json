{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { InstrumentationAbstract } from '../../instrumentation';\n/**\n * Base abstract class for instrumenting web plugins\n */\nvar InstrumentationBase = /** @class */function (_super) {\n  __extends(InstrumentationBase, _super);\n  function InstrumentationBase(instrumentationName, instrumentationVersion, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;\n    if (_this._config.enabled) {\n      _this.enable();\n    }\n    return _this;\n  }\n  return InstrumentationBase;\n}(InstrumentationAbstract);\nexport { InstrumentationBase };","map":{"version":3,"names":["InstrumentationAbstract","InstrumentationBase","_super","__extends","instrumentationName","instrumentationVersion","config","_this","call","_config","enabled","enable"],"sources":["/home/egor/node_modules/@opentelemetry/instrumentation/src/platform/browser/instrumentation.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationAbstract } from '../../instrumentation';\nimport * as types from '../../types';\n\n/**\n * Base abstract class for instrumenting web plugins\n */\nexport abstract class InstrumentationBase\n  extends InstrumentationAbstract\n  implements types.Instrumentation\n{\n  constructor(\n    instrumentationName: string,\n    instrumentationVersion: string,\n    config: types.InstrumentationConfig = {}\n  ) {\n    super(instrumentationName, instrumentationVersion, config);\n\n    if (this._config.enabled) {\n      this.enable();\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAASA,uBAAuB,QAAQ,uBAAuB;AAG/D;;;AAGA,IAAAC,mBAAA,0BAAAC,MAAA;EACUC,SAAA,CAAAF,mBAAA,EAAAC,MAAA;EAGR,SAAAD,oBACEG,mBAA2B,EAC3BC,sBAA8B,EAC9BC,MAAwC;IAAxC,IAAAA,MAAA;MAAAA,MAAA,KAAwC;IAAA;IAH1C,IAAAC,KAAA,GAKEL,MAAA,CAAAM,IAAA,OAAMJ,mBAAmB,EAAEC,sBAAsB,EAAEC,MAAM,CAAC;IAE1D,IAAIC,KAAI,CAACE,OAAO,CAACC,OAAO,EAAE;MACxBH,KAAI,CAACI,MAAM,EAAE;;;EAEjB;EACF,OAAAV,mBAAC;AAAD,CAAC,CAdSD,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}