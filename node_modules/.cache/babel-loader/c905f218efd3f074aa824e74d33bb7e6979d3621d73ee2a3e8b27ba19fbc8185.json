{"ast":null,"code":"import { dateNow, faro, genShortID } from '@grafana/faro-core';\nimport { isSampled } from './sampling';\nimport { SESSION_EXPIRATION_TIME, SESSION_INACTIVITY_TIME } from './sessionConstants';\nexport function createUserSessionObject({\n  sessionId,\n  isSampled = true\n} = {}) {\n  var _a, _b;\n  const now = dateNow();\n  const generateSessionId = (_b = (_a = faro.config) === null || _a === void 0 ? void 0 : _a.sessionTracking) === null || _b === void 0 ? void 0 : _b.generateSessionId;\n  if (sessionId == null) {\n    sessionId = typeof generateSessionId === 'function' ? generateSessionId() : genShortID();\n  }\n  return {\n    sessionId,\n    lastActivity: now,\n    started: now,\n    isSampled: isSampled\n  };\n}\nexport function isUserSessionValid(session) {\n  if (session == null) {\n    return false;\n  }\n  const now = dateNow();\n  const lifetimeValid = now - session.started < SESSION_EXPIRATION_TIME;\n  if (!lifetimeValid) {\n    return false;\n  }\n  const inactivityPeriodValid = now - session.lastActivity < SESSION_INACTIVITY_TIME;\n  return inactivityPeriodValid;\n}\nexport function getUserSessionUpdater({\n  fetchUserSession,\n  storeUserSession\n}) {\n  return function updateSession() {\n    var _a, _b, _c, _d;\n    if (!fetchUserSession || !storeUserSession) {\n      return;\n    }\n    const sessionFromStorage = fetchUserSession();\n    if (isUserSessionValid(sessionFromStorage)) {\n      storeUserSession(Object.assign(Object.assign({}, sessionFromStorage), {\n        lastActivity: dateNow()\n      }));\n    } else {\n      let newSession = addSessionMetadataToNextSession(createUserSessionObject({\n        isSampled: isSampled()\n      }), sessionFromStorage);\n      storeUserSession(newSession);\n      (_a = faro.api) === null || _a === void 0 ? void 0 : _a.setSession(newSession.sessionMeta);\n      (_c = (_b = faro.config.sessionTracking) === null || _b === void 0 ? void 0 : _b.onSessionChange) === null || _c === void 0 ? void 0 : _c.call(_b, (_d = sessionFromStorage === null || sessionFromStorage === void 0 ? void 0 : sessionFromStorage.sessionMeta) !== null && _d !== void 0 ? _d : null, newSession.sessionMeta);\n    }\n  };\n}\nexport function addSessionMetadataToNextSession(newSession, previousSession) {\n  var _a, _b, _c, _d;\n  const sessionWithMeta = Object.assign(Object.assign({}, newSession), {\n    sessionMeta: {\n      id: newSession.sessionId,\n      attributes: Object.assign(Object.assign(Object.assign(Object.assign({}, (_b = (_a = faro.config.sessionTracking) === null || _a === void 0 ? void 0 : _a.session) === null || _b === void 0 ? void 0 : _b.attributes), (_d = (_c = faro.metas.value.session) === null || _c === void 0 ? void 0 : _c.attributes) !== null && _d !== void 0 ? _d : {}), previousSession != null ? {\n        previousSession: previousSession.sessionId\n      } : {}), {\n        isSampled: newSession.isSampled.toString()\n      })\n    }\n  });\n  return sessionWithMeta;\n}","map":{"version":3,"names":["dateNow","faro","genShortID","isSampled","SESSION_EXPIRATION_TIME","SESSION_INACTIVITY_TIME","createUserSessionObject","sessionId","now","generateSessionId","_b","_a","config","sessionTracking","lastActivity","started","isUserSessionValid","session","lifetimeValid","inactivityPeriodValid","getUserSessionUpdater","fetchUserSession","storeUserSession","updateSession","sessionFromStorage","Object","assign","newSession","addSessionMetadataToNextSession","api","setSession","sessionMeta","_c","onSessionChange","call","_d","previousSession","sessionWithMeta","id","attributes","metas","value","toString"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/instrumentations/session/sessionManager/sessionManagerUtils.ts"],"sourcesContent":["import { dateNow, faro, genShortID } from '@grafana/faro-core';\n\nimport { isSampled } from './sampling';\nimport { SESSION_EXPIRATION_TIME, SESSION_INACTIVITY_TIME } from './sessionConstants';\nimport type { FaroUserSession } from './types';\n\ntype CreateUserSessionObjectParams = {\n  sessionId?: string;\n  isSampled?: boolean;\n};\n\nexport function createUserSessionObject({\n  sessionId,\n  isSampled = true,\n}: CreateUserSessionObjectParams = {}): FaroUserSession {\n  const now = dateNow();\n\n  const generateSessionId = faro.config?.sessionTracking?.generateSessionId;\n\n  if (sessionId == null) {\n    sessionId = typeof generateSessionId === 'function' ? generateSessionId() : genShortID();\n  }\n\n  return {\n    sessionId,\n    lastActivity: now,\n    started: now,\n    isSampled: isSampled,\n  };\n}\n\nexport function isUserSessionValid(session: FaroUserSession | null): boolean {\n  if (session == null) {\n    return false;\n  }\n\n  const now = dateNow();\n  const lifetimeValid = now - session.started < SESSION_EXPIRATION_TIME;\n\n  if (!lifetimeValid) {\n    return false;\n  }\n\n  const inactivityPeriodValid = now - session.lastActivity < SESSION_INACTIVITY_TIME;\n  return inactivityPeriodValid;\n}\n\ntype GetUserSessionUpdaterParams = {\n  storeUserSession: (session: FaroUserSession) => void;\n  fetchUserSession: () => FaroUserSession | null;\n};\n\nexport function getUserSessionUpdater({ fetchUserSession, storeUserSession }: GetUserSessionUpdaterParams): () => void {\n  return function updateSession(): void {\n    if (!fetchUserSession || !storeUserSession) {\n      return;\n    }\n\n    const sessionFromStorage = fetchUserSession();\n\n    if (isUserSessionValid(sessionFromStorage)) {\n      storeUserSession({ ...sessionFromStorage!, lastActivity: dateNow() });\n    } else {\n      let newSession = addSessionMetadataToNextSession(\n        createUserSessionObject({ isSampled: isSampled() }),\n        sessionFromStorage\n      );\n\n      storeUserSession(newSession);\n\n      faro.api?.setSession(newSession.sessionMeta);\n      faro.config.sessionTracking?.onSessionChange?.(sessionFromStorage?.sessionMeta ?? null, newSession.sessionMeta!);\n    }\n  };\n}\n\nexport function addSessionMetadataToNextSession(newSession: FaroUserSession, previousSession: FaroUserSession | null) {\n  const sessionWithMeta: Required<FaroUserSession> = {\n    ...newSession,\n    sessionMeta: {\n      id: newSession.sessionId,\n      attributes: {\n        ...faro.config.sessionTracking?.session?.attributes,\n        ...(faro.metas.value.session?.attributes ?? {}),\n        ...(previousSession != null ? { previousSession: previousSession.sessionId } : {}),\n        isSampled: newSession.isSampled.toString(),\n      },\n    },\n  };\n\n  return sessionWithMeta;\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,IAAI,EAAEC,UAAU,QAAQ,oBAAoB;AAE9D,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,uBAAuB,EAAEC,uBAAuB,QAAQ,oBAAoB;AAQrF,OAAM,SAAUC,uBAAuBA,CAAC;EACtCC,SAAS;EACTJ,SAAS,GAAG;AAAI,IACiB,EAAE;;EACnC,MAAMK,GAAG,GAAGR,OAAO,EAAE;EAErB,MAAMS,iBAAiB,GAAG,CAAAC,EAAA,IAAAC,EAAA,GAAAV,IAAI,CAACW,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,eAAe,cAAAH,EAAA,uBAAAA,EAAA,CAAED,iBAAiB;EAEzE,IAAIF,SAAS,IAAI,IAAI,EAAE;IACrBA,SAAS,GAAG,OAAOE,iBAAiB,KAAK,UAAU,GAAGA,iBAAiB,EAAE,GAAGP,UAAU,EAAE;;EAG1F,OAAO;IACLK,SAAS;IACTO,YAAY,EAAEN,GAAG;IACjBO,OAAO,EAAEP,GAAG;IACZL,SAAS,EAAEA;GACZ;AACH;AAEA,OAAM,SAAUa,kBAAkBA,CAACC,OAA+B;EAChE,IAAIA,OAAO,IAAI,IAAI,EAAE;IACnB,OAAO,KAAK;;EAGd,MAAMT,GAAG,GAAGR,OAAO,EAAE;EACrB,MAAMkB,aAAa,GAAGV,GAAG,GAAGS,OAAO,CAACF,OAAO,GAAGX,uBAAuB;EAErE,IAAI,CAACc,aAAa,EAAE;IAClB,OAAO,KAAK;;EAGd,MAAMC,qBAAqB,GAAGX,GAAG,GAAGS,OAAO,CAACH,YAAY,GAAGT,uBAAuB;EAClF,OAAOc,qBAAqB;AAC9B;AAOA,OAAM,SAAUC,qBAAqBA,CAAC;EAAEC,gBAAgB;EAAEC;AAAgB,CAA+B;EACvG,OAAO,SAASC,aAAaA,CAAA;;IAC3B,IAAI,CAACF,gBAAgB,IAAI,CAACC,gBAAgB,EAAE;MAC1C;;IAGF,MAAME,kBAAkB,GAAGH,gBAAgB,EAAE;IAE7C,IAAIL,kBAAkB,CAACQ,kBAAkB,CAAC,EAAE;MAC1CF,gBAAgB,CAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMF,kBAAmB;QAAEV,YAAY,EAAEd,OAAO;MAAE,GAAG;KACtE,MAAM;MACL,IAAI2B,UAAU,GAAGC,+BAA+B,CAC9CtB,uBAAuB,CAAC;QAAEH,SAAS,EAAEA,SAAS;MAAE,CAAE,CAAC,EACnDqB,kBAAkB,CACnB;MAEDF,gBAAgB,CAACK,UAAU,CAAC;MAE5B,CAAAhB,EAAA,GAAAV,IAAI,CAAC4B,GAAG,cAAAlB,EAAA,uBAAAA,EAAA,CAAEmB,UAAU,CAACH,UAAU,CAACI,WAAW,CAAC;MAC5C,CAAAC,EAAA,IAAAtB,EAAA,GAAAT,IAAI,CAACW,MAAM,CAACC,eAAe,cAAAH,EAAA,uBAAAA,EAAA,CAAEuB,eAAe,cAAAD,EAAA,uBAAAA,EAAA,CAAAE,IAAA,CAAAxB,EAAA,EAAG,CAAAyB,EAAA,GAAAX,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEO,WAAW,cAAAI,EAAA,cAAAA,EAAA,GAAI,IAAI,EAAER,UAAU,CAACI,WAAY,CAAC;;EAEpH,CAAC;AACH;AAEA,OAAM,SAAUH,+BAA+BA,CAACD,UAA2B,EAAES,eAAuC;;EAClH,MAAMC,eAAe,GAAAZ,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAChBC,UAAU;IACbI,WAAW,EAAE;MACXO,EAAE,EAAEX,UAAU,CAACpB,SAAS;MACxBgC,UAAU,EAAAd,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACL,CAAAhB,EAAA,IAAAC,EAAA,GAAAV,IAAI,CAACW,MAAM,CAACC,eAAe,cAAAF,EAAA,uBAAAA,EAAA,CAAEM,OAAO,cAAAP,EAAA,uBAAAA,EAAA,CAAE6B,UAAU,GAC/C,CAAAJ,EAAA,IAAAH,EAAA,GAAA/B,IAAI,CAACuC,KAAK,CAACC,KAAK,CAACxB,OAAO,cAAAe,EAAA,uBAAAA,EAAA,CAAEO,UAAU,cAAAJ,EAAA,cAAAA,EAAA,GAAI,EAAG,GAC3CC,eAAe,IAAI,IAAI,GAAG;QAAEA,eAAe,EAAEA,eAAe,CAAC7B;MAAS,CAAE,GAAG,EAAG;QAClFJ,SAAS,EAAEwB,UAAU,CAACxB,SAAS,CAACuC,QAAQ;MAAE;;EAE7C,EACF;EAED,OAAOL,eAAe;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}