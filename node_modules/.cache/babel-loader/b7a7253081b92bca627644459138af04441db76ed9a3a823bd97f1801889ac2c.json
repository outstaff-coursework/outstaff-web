{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ViewRegistry = /** @class */function () {\n  function ViewRegistry() {\n    this._registeredViews = [];\n  }\n  ViewRegistry.prototype.addView = function (view) {\n    this._registeredViews.push(view);\n  };\n  ViewRegistry.prototype.findViews = function (instrument, meter) {\n    var _this = this;\n    var views = this._registeredViews.filter(function (registeredView) {\n      return _this._matchInstrument(registeredView.instrumentSelector, instrument) && _this._matchMeter(registeredView.meterSelector, meter);\n    });\n    return views;\n  };\n  ViewRegistry.prototype._matchInstrument = function (selector, instrument) {\n    return (selector.getType() === undefined || instrument.type === selector.getType()) && selector.getNameFilter().match(instrument.name) && selector.getUnitFilter().match(instrument.unit);\n  };\n  ViewRegistry.prototype._matchMeter = function (selector, meter) {\n    return selector.getNameFilter().match(meter.name) && (meter.version === undefined || selector.getVersionFilter().match(meter.version)) && (meter.schemaUrl === undefined || selector.getSchemaUrlFilter().match(meter.schemaUrl));\n  };\n  return ViewRegistry;\n}();\nexport { ViewRegistry };","map":{"version":3,"names":["ViewRegistry","_registeredViews","prototype","addView","view","push","findViews","instrument","meter","_this","views","filter","registeredView","_matchInstrument","instrumentSelector","_matchMeter","meterSelector","selector","getType","undefined","type","getNameFilter","match","name","getUnitFilter","unit","version","getVersionFilter","schemaUrl","getSchemaUrlFilter"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/view/ViewRegistry.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { View } from './View';\n\nexport class ViewRegistry {\n  private _registeredViews: View[] = [];\n\n  addView(view: View) {\n    this._registeredViews.push(view);\n  }\n\n  findViews(\n    instrument: InstrumentDescriptor,\n    meter: InstrumentationScope\n  ): View[] {\n    const views = this._registeredViews.filter(registeredView => {\n      return (\n        this._matchInstrument(registeredView.instrumentSelector, instrument) &&\n        this._matchMeter(registeredView.meterSelector, meter)\n      );\n    });\n\n    return views;\n  }\n\n  private _matchInstrument(\n    selector: InstrumentSelector,\n    instrument: InstrumentDescriptor\n  ): boolean {\n    return (\n      (selector.getType() === undefined ||\n        instrument.type === selector.getType()) &&\n      selector.getNameFilter().match(instrument.name) &&\n      selector.getUnitFilter().match(instrument.unit)\n    );\n  }\n\n  private _matchMeter(\n    selector: MeterSelector,\n    meter: InstrumentationScope\n  ): boolean {\n    return (\n      selector.getNameFilter().match(meter.name) &&\n      (meter.version === undefined ||\n        selector.getVersionFilter().match(meter.version)) &&\n      (meter.schemaUrl === undefined ||\n        selector.getSchemaUrlFilter().match(meter.schemaUrl))\n    );\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAsBA,IAAAA,YAAA;EAAA,SAAAA,aAAA;IACU,KAAAC,gBAAgB,GAAW,EAAE;EA4CvC;EA1CED,YAAA,CAAAE,SAAA,CAAAC,OAAO,GAAP,UAAQC,IAAU;IAChB,IAAI,CAACH,gBAAgB,CAACI,IAAI,CAACD,IAAI,CAAC;EAClC,CAAC;EAEDJ,YAAA,CAAAE,SAAA,CAAAI,SAAS,GAAT,UACEC,UAAgC,EAChCC,KAA2B;IAF7B,IAAAC,KAAA;IAIE,IAAMC,KAAK,GAAG,IAAI,CAACT,gBAAgB,CAACU,MAAM,CAAC,UAAAC,cAAc;MACvD,OACEH,KAAI,CAACI,gBAAgB,CAACD,cAAc,CAACE,kBAAkB,EAAEP,UAAU,CAAC,IACpEE,KAAI,CAACM,WAAW,CAACH,cAAc,CAACI,aAAa,EAAER,KAAK,CAAC;IAEzD,CAAC,CAAC;IAEF,OAAOE,KAAK;EACd,CAAC;EAEOV,YAAA,CAAAE,SAAA,CAAAW,gBAAgB,GAAxB,UACEI,QAA4B,EAC5BV,UAAgC;IAEhC,OACE,CAACU,QAAQ,CAACC,OAAO,EAAE,KAAKC,SAAS,IAC/BZ,UAAU,CAACa,IAAI,KAAKH,QAAQ,CAACC,OAAO,EAAE,KACxCD,QAAQ,CAACI,aAAa,EAAE,CAACC,KAAK,CAACf,UAAU,CAACgB,IAAI,CAAC,IAC/CN,QAAQ,CAACO,aAAa,EAAE,CAACF,KAAK,CAACf,UAAU,CAACkB,IAAI,CAAC;EAEnD,CAAC;EAEOzB,YAAA,CAAAE,SAAA,CAAAa,WAAW,GAAnB,UACEE,QAAuB,EACvBT,KAA2B;IAE3B,OACES,QAAQ,CAACI,aAAa,EAAE,CAACC,KAAK,CAACd,KAAK,CAACe,IAAI,CAAC,KACzCf,KAAK,CAACkB,OAAO,KAAKP,SAAS,IAC1BF,QAAQ,CAACU,gBAAgB,EAAE,CAACL,KAAK,CAACd,KAAK,CAACkB,OAAO,CAAC,CAAC,KAClDlB,KAAK,CAACoB,SAAS,KAAKT,SAAS,IAC5BF,QAAQ,CAACY,kBAAkB,EAAE,CAACP,KAAK,CAACd,KAAK,CAACoB,SAAS,CAAC,CAAC;EAE3D,CAAC;EACH,OAAA5B,YAAC;AAAD,CAAC,CA7CD"},"metadata":{},"sourceType":"module","externalDependencies":[]}