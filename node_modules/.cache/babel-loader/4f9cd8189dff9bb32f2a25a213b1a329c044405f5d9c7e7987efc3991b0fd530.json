{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Deferred } from './promise';\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */function () {\n  function BindOnceFuture(_callback, _that) {\n    this._callback = _callback;\n    this._that = _that;\n    this._isCalled = false;\n    this._deferred = new Deferred();\n  }\n  Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n    get: function () {\n      return this._isCalled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n    get: function () {\n      return this._deferred.promise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BindOnceFuture.prototype.call = function () {\n    var _a;\n    var _this = this;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray([this._that], __read(args), false))).then(function (val) {\n          return _this._deferred.resolve(val);\n        }, function (err) {\n          return _this._deferred.reject(err);\n        });\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  };\n  return BindOnceFuture;\n}();\nexport { BindOnceFuture };","map":{"version":3,"names":["Deferred","BindOnceFuture","_callback","_that","_isCalled","_deferred","Object","defineProperty","prototype","get","promise","call","_this","args","_i","arguments","length","Promise","resolve","_a","apply","__spreadArray","__read","then","val","err","reject"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/utils/callback.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R,\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(\n    private _callback: T,\n    private _that: This\n  ) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAASA,QAAQ,QAAQ,WAAW;AAEpC;;;AAGA,IAAAC,cAAA;EAOE,SAAAA,eACUC,SAAY,EACZC,KAAW;IADX,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,KAAK,GAALA,KAAK;IAJP,KAAAC,SAAS,GAAG,KAAK;IACjB,KAAAC,SAAS,GAAG,IAAIL,QAAQ,EAAK;EAIlC;EAEHM,MAAA,CAAAC,cAAA,CAAIN,cAAA,CAAAO,SAAA,YAAQ;SAAZ,SAAAC,CAAA;MACE,OAAO,IAAI,CAACL,SAAS;IACvB,CAAC;;;;EAEDE,MAAA,CAAAC,cAAA,CAAIN,cAAA,CAAAO,SAAA,WAAO;SAAX,SAAAC,CAAA;MACE,OAAO,IAAI,CAACJ,SAAS,CAACK,OAAO;IAC/B,CAAC;;;;EAEDT,cAAA,CAAAO,SAAA,CAAAG,IAAI,GAAJ;;IAAA,IAAAC,KAAA;IAAK,IAAAC,IAAA;SAAA,IAAAC,EAAA,IAAsB,EAAtBA,EAAA,GAAAC,SAAA,CAAAC,MAAsB,EAAtBF,EAAA,EAAsB;MAAtBD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACH,IAAI,CAAC,IAAI,CAACV,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI;QACFa,OAAO,CAACC,OAAO,CAAC,CAAAC,EAAA,OAAI,CAACjB,SAAS,EAACS,IAAI,CAAAS,KAAA,CAAAD,EAAA,EAAAE,aAAA,EAAC,IAAI,CAAClB,KAAK,GAAAmB,MAAA,CAAKT,IAAI,WAAE,CAACU,IAAI,CAC5D,UAAAC,GAAG;UAAI,OAAAZ,KAAI,CAACP,SAAS,CAACa,OAAO,CAACM,GAAG,CAAC;QAA3B,CAA2B,EAClC,UAAAC,GAAG;UAAI,OAAAb,KAAI,CAACP,SAAS,CAACqB,MAAM,CAACD,GAAG,CAAC;QAA1B,CAA0B,CAClC;OACF,CAAC,OAAOA,GAAG,EAAE;QACZ,IAAI,CAACpB,SAAS,CAACqB,MAAM,CAACD,GAAG,CAAC;;;IAG9B,OAAO,IAAI,CAACpB,SAAS,CAACK,OAAO;EAC/B,CAAC;EACH,OAAAT,cAAC;AAAD,CAAC,CAlCD"},"metadata":{},"sourceType":"module","externalDependencies":[]}