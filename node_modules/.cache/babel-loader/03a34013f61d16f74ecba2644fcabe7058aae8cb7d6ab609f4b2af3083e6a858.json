{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nvar WebTracerProvider = /** @class */function (_super) {\n  __extends(WebTracerProvider, _super);\n  /**\n   * Constructs a new Tracer instance.\n   * @param config Web Tracer config\n   */\n  function WebTracerProvider(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this, config) || this;\n    if (config.contextManager) {\n      throw 'contextManager should be defined in register method not in' + ' constructor';\n    }\n    if (config.propagator) {\n      throw 'propagator should be defined in register method not in constructor';\n    }\n    return _this;\n  }\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  WebTracerProvider.prototype.register = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    if (config.contextManager === undefined) {\n      config.contextManager = new StackContextManager();\n    }\n    if (config.contextManager) {\n      config.contextManager.enable();\n    }\n    _super.prototype.register.call(this, config);\n  };\n  return WebTracerProvider;\n}(BasicTracerProvider);\nexport { WebTracerProvider };","map":{"version":3,"names":["BasicTracerProvider","StackContextManager","WebTracerProvider","_super","__extends","config","_this","call","contextManager","propagator","prototype","register","undefined","enable"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-web/src/WebTracerProvider.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BasicTracerProvider,\n  SDKRegistrationConfig,\n  TracerConfig,\n} from '@opentelemetry/sdk-trace-base';\nimport { StackContextManager } from './StackContextManager';\n\n/**\n * WebTracerConfig provides an interface for configuring a Web Tracer.\n */\nexport type WebTracerConfig = TracerConfig;\n\n/**\n * This class represents a web tracer with {@link StackContextManager}\n */\nexport class WebTracerProvider extends BasicTracerProvider {\n  /**\n   * Constructs a new Tracer instance.\n   * @param config Web Tracer config\n   */\n  constructor(config: WebTracerConfig = {}) {\n    super(config);\n\n    if ((config as SDKRegistrationConfig).contextManager) {\n      throw (\n        'contextManager should be defined in register method not in' +\n        ' constructor'\n      );\n    }\n    if ((config as SDKRegistrationConfig).propagator) {\n      throw 'propagator should be defined in register method not in constructor';\n    }\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  override register(config: SDKRegistrationConfig = {}): void {\n    if (config.contextManager === undefined) {\n      config.contextManager = new StackContextManager();\n    }\n    if (config.contextManager) {\n      config.contextManager.enable();\n    }\n\n    super.register(config);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SACEA,mBAAmB,QAGd,+BAA+B;AACtC,SAASC,mBAAmB,QAAQ,uBAAuB;AAO3D;;;AAGA,IAAAC,iBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EACrC;;;;EAIA,SAAAD,kBAAYG,MAA4B;IAA5B,IAAAA,MAAA;MAAAA,MAAA,KAA4B;IAAA;IAAxC,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,MAAM,CAAC;IAEb,IAAKA,MAAgC,CAACG,cAAc,EAAE;MACpD,MACE,4DAA4D,GAC5D,cAAc;;IAGlB,IAAKH,MAAgC,CAACI,UAAU,EAAE;MAChD,MAAM,oEAAoE;;;EAE9E;EAEA;;;;;;;EAOSP,iBAAA,CAAAQ,SAAA,CAAAC,QAAQ,GAAjB,UAAkBN,MAAkC;IAAlC,IAAAA,MAAA;MAAAA,MAAA,KAAkC;IAAA;IAClD,IAAIA,MAAM,CAACG,cAAc,KAAKI,SAAS,EAAE;MACvCP,MAAM,CAACG,cAAc,GAAG,IAAIP,mBAAmB,EAAE;;IAEnD,IAAII,MAAM,CAACG,cAAc,EAAE;MACzBH,MAAM,CAACG,cAAc,CAACK,MAAM,EAAE;;IAGhCV,MAAA,CAAAO,SAAA,CAAMC,QAAQ,CAAAJ,IAAA,OAACF,MAAM,CAAC;EACxB,CAAC;EACH,OAAAH,iBAAC;AAAD,CAAC,CApCsCF,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}