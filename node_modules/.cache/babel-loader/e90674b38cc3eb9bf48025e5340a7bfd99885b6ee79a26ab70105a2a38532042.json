{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction intValue(charCode) {\n  // 0-9\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n  // a-f\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n  // A-F\n  return charCode - 55;\n}\nexport function hexToBinary(hexStr) {\n  var buf = new Uint8Array(hexStr.length / 2);\n  var offset = 0;\n  for (var i = 0; i < hexStr.length; i += 2) {\n    var hi = intValue(hexStr.charCodeAt(i));\n    var lo = intValue(hexStr.charCodeAt(i + 1));\n    buf[offset++] = hi << 4 | lo;\n  }\n  return buf;\n}","map":{"version":3,"names":["intValue","charCode","hexToBinary","hexStr","buf","Uint8Array","length","offset","i","hi","charCodeAt","lo"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/common/hex-to-binary.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction intValue(charCode: number): number {\n  // 0-9\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n\n  // a-f\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n\n  // A-F\n  return charCode - 55;\n}\n\nexport function hexToBinary(hexStr: string): Uint8Array {\n  const buf = new Uint8Array(hexStr.length / 2);\n  let offset = 0;\n\n  for (let i = 0; i < hexStr.length; i += 2) {\n    const hi = intValue(hexStr.charCodeAt(i));\n    const lo = intValue(hexStr.charCodeAt(i + 1));\n    buf[offset++] = (hi << 4) | lo;\n  }\n\n  return buf;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,QAAQA,CAACC,QAAgB;EAChC;EACA,IAAIA,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,EAAE,EAAE;IACpC,OAAOA,QAAQ,GAAG,EAAE;;EAGtB;EACA,IAAIA,QAAQ,IAAI,EAAE,IAAIA,QAAQ,IAAI,GAAG,EAAE;IACrC,OAAOA,QAAQ,GAAG,EAAE;;EAGtB;EACA,OAAOA,QAAQ,GAAG,EAAE;AACtB;AAEA,OAAM,SAAUC,WAAWA,CAACC,MAAc;EACxC,IAAMC,GAAG,GAAG,IAAIC,UAAU,CAACF,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC;EAC7C,IAAIC,MAAM,GAAG,CAAC;EAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,CAACG,MAAM,EAAEE,CAAC,IAAI,CAAC,EAAE;IACzC,IAAMC,EAAE,GAAGT,QAAQ,CAACG,MAAM,CAACO,UAAU,CAACF,CAAC,CAAC,CAAC;IACzC,IAAMG,EAAE,GAAGX,QAAQ,CAACG,MAAM,CAACO,UAAU,CAACF,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7CJ,GAAG,CAACG,MAAM,EAAE,CAAC,GAAIE,EAAE,IAAI,CAAC,GAAIE,EAAE;;EAGhC,OAAOP,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}