{"ast":null,"code":"import { allLogLevels, BaseInstrumentation, LogLevel, VERSION } from '@grafana/faro-core';\nexport class ConsoleInstrumentation extends BaseInstrumentation {\n  constructor(options = {}) {\n    super();\n    this.options = options;\n    this.name = '@grafana/faro-web-sdk:instrumentation-console';\n    this.version = VERSION;\n  }\n  initialize() {\n    this.logDebug('Initializing\\n', this.options);\n    allLogLevels.filter(level => {\n      var _a;\n      return !((_a = this.options.disabledLevels) !== null && _a !== void 0 ? _a : ConsoleInstrumentation.defaultDisabledLevels).includes(level);\n    }).forEach(level => {\n      /* eslint-disable-next-line no-console */\n      console[level] = (...args) => {\n        try {\n          this.api.pushLog(args, {\n            level\n          });\n        } catch (err) {\n          this.logError(err);\n        } finally {\n          this.unpatchedConsole[level](...args);\n        }\n      };\n    });\n  }\n}\nConsoleInstrumentation.defaultDisabledLevels = [LogLevel.DEBUG, LogLevel.TRACE, LogLevel.LOG];","map":{"version":3,"names":["allLogLevels","BaseInstrumentation","LogLevel","VERSION","ConsoleInstrumentation","constructor","options","name","version","initialize","logDebug","filter","level","_a","disabledLevels","defaultDisabledLevels","includes","forEach","console","args","api","pushLog","err","logError","unpatchedConsole","DEBUG","TRACE","LOG"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/instrumentations/console/instrumentation.ts"],"sourcesContent":["import { allLogLevels, BaseInstrumentation, LogLevel, VERSION } from '@grafana/faro-core';\n\nimport type { ConsoleInstrumentationOptions } from './types';\n\nexport class ConsoleInstrumentation extends BaseInstrumentation {\n  readonly name = '@grafana/faro-web-sdk:instrumentation-console';\n  readonly version = VERSION;\n\n  static defaultDisabledLevels: LogLevel[] = [LogLevel.DEBUG, LogLevel.TRACE, LogLevel.LOG];\n\n  constructor(private options: ConsoleInstrumentationOptions = {}) {\n    super();\n  }\n\n  initialize() {\n    this.logDebug('Initializing\\n', this.options);\n\n    allLogLevels\n      .filter((level) => !(this.options.disabledLevels ?? ConsoleInstrumentation.defaultDisabledLevels).includes(level))\n      .forEach((level) => {\n        /* eslint-disable-next-line no-console */\n        console[level] = (...args) => {\n          try {\n            this.api.pushLog(args, { level });\n          } catch (err) {\n            this.logError(err);\n          } finally {\n            this.unpatchedConsole[level](...args);\n          }\n        };\n      });\n  }\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,mBAAmB,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,oBAAoB;AAIzF,OAAM,MAAOC,sBAAuB,SAAQH,mBAAmB;EAM7DI,YAAoBC,OAAA,GAAyC,EAAE;IAC7D,KAAK,EAAE;IADW,KAAAA,OAAO,GAAPA,OAAO;IALlB,KAAAC,IAAI,GAAG,+CAA+C;IACtD,KAAAC,OAAO,GAAGL,OAAO;EAM1B;EAEAM,UAAUA,CAAA;IACR,IAAI,CAACC,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAACJ,OAAO,CAAC;IAE7CN,YAAY,CACTW,MAAM,CAAEC,KAAK,IAAI;MAAA,IAAAC,EAAA;MAAC,QAAC,CAAC,CAAAA,EAAA,OAAI,CAACP,OAAO,CAACQ,cAAc,cAAAD,EAAA,cAAAA,EAAA,GAAIT,sBAAsB,CAACW,qBAAqB,EAAEC,QAAQ,CAACJ,KAAK,CAAC;IAAA,EAAC,CACjHK,OAAO,CAAEL,KAAK,IAAI;MACjB;MACAM,OAAO,CAACN,KAAK,CAAC,GAAG,CAAC,GAAGO,IAAI,KAAI;QAC3B,IAAI;UACF,IAAI,CAACC,GAAG,CAACC,OAAO,CAACF,IAAI,EAAE;YAAEP;UAAK,CAAE,CAAC;SAClC,CAAC,OAAOU,GAAG,EAAE;UACZ,IAAI,CAACC,QAAQ,CAACD,GAAG,CAAC;SACnB,SAAS;UACR,IAAI,CAACE,gBAAgB,CAACZ,KAAK,CAAC,CAAC,GAAGO,IAAI,CAAC;;MAEzC,CAAC;IACH,CAAC,CAAC;EACN;;AAvBOf,sBAAA,CAAAW,qBAAqB,GAAe,CAACb,QAAQ,CAACuB,KAAK,EAAEvB,QAAQ,CAACwB,KAAK,EAAExB,QAAQ,CAACyB,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}