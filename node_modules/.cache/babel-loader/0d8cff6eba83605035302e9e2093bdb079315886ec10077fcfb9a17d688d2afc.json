{"ast":null,"code":"import { initializeEventsAPI } from './events';\nimport { initializeExceptionsAPI } from './exceptions';\nimport { initializeLogsAPI } from './logs';\nimport { initializeMeasurementsAPI } from './measurements';\nimport { initializeMetaAPI } from './meta';\nimport { initializeTracesAPI } from './traces';\nexport function initializeAPI(unpatchedConsole, internalLogger, config, metas, transports) {\n  internalLogger.debug('Initializing API');\n  const tracesApi = initializeTracesAPI(unpatchedConsole, internalLogger, config, metas, transports);\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, tracesApi), initializeExceptionsAPI(unpatchedConsole, internalLogger, config, metas, transports, tracesApi)), initializeMetaAPI(unpatchedConsole, internalLogger, config, metas, transports)), initializeLogsAPI(unpatchedConsole, internalLogger, config, metas, transports, tracesApi)), initializeMeasurementsAPI(unpatchedConsole, internalLogger, config, metas, transports, tracesApi)), initializeEventsAPI(unpatchedConsole, internalLogger, config, metas, transports, tracesApi));\n}","map":{"version":3,"names":["initializeEventsAPI","initializeExceptionsAPI","initializeLogsAPI","initializeMeasurementsAPI","initializeMetaAPI","initializeTracesAPI","initializeAPI","unpatchedConsole","internalLogger","config","metas","transports","debug","tracesApi","Object","assign"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/api/initialize.ts"],"sourcesContent":["import type { Config } from '../config';\nimport type { InternalLogger } from '../internalLogger';\nimport type { Metas } from '../metas';\nimport type { Transports } from '../transports';\nimport type { UnpatchedConsole } from '../unpatchedConsole';\n\nimport { initializeEventsAPI } from './events';\nimport { initializeExceptionsAPI } from './exceptions';\nimport { initializeLogsAPI } from './logs';\nimport { initializeMeasurementsAPI } from './measurements';\nimport { initializeMetaAPI } from './meta';\nimport { initializeTracesAPI } from './traces';\nimport type { API } from './types';\n\nexport function initializeAPI(\n  unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  config: Config,\n  metas: Metas,\n  transports: Transports\n): API {\n  internalLogger.debug('Initializing API');\n\n  const tracesApi = initializeTracesAPI(unpatchedConsole, internalLogger, config, metas, transports);\n\n  return {\n    ...tracesApi,\n    ...initializeExceptionsAPI(unpatchedConsole, internalLogger, config, metas, transports, tracesApi),\n    ...initializeMetaAPI(unpatchedConsole, internalLogger, config, metas, transports),\n    ...initializeLogsAPI(unpatchedConsole, internalLogger, config, metas, transports, tracesApi),\n    ...initializeMeasurementsAPI(unpatchedConsole, internalLogger, config, metas, transports, tracesApi),\n    ...initializeEventsAPI(unpatchedConsole, internalLogger, config, metas, transports, tracesApi),\n  };\n}\n"],"mappings":"AAMA,SAASA,mBAAmB,QAAQ,UAAU;AAC9C,SAASC,uBAAuB,QAAQ,cAAc;AACtD,SAASC,iBAAiB,QAAQ,QAAQ;AAC1C,SAASC,yBAAyB,QAAQ,gBAAgB;AAC1D,SAASC,iBAAiB,QAAQ,QAAQ;AAC1C,SAASC,mBAAmB,QAAQ,UAAU;AAG9C,OAAM,SAAUC,aAAaA,CAC3BC,gBAAkC,EAClCC,cAA8B,EAC9BC,MAAc,EACdC,KAAY,EACZC,UAAsB;EAEtBH,cAAc,CAACI,KAAK,CAAC,kBAAkB,CAAC;EAExC,MAAMC,SAAS,GAAGR,mBAAmB,CAACE,gBAAgB,EAAEC,cAAc,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,CAAC;EAElG,OAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKF,SAAS,GACTZ,uBAAuB,CAACM,gBAAgB,EAAEC,cAAc,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEE,SAAS,CAAC,GAC/FT,iBAAiB,CAACG,gBAAgB,EAAEC,cAAc,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,CAAC,GAC9ET,iBAAiB,CAACK,gBAAgB,EAAEC,cAAc,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEE,SAAS,CAAC,GACzFV,yBAAyB,CAACI,gBAAgB,EAAEC,cAAc,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEE,SAAS,CAAC,GACjGb,mBAAmB,CAACO,gBAAgB,EAAEC,cAAc,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEE,SAAS,CAAC;AAElG"},"metadata":{},"sourceType":"module","externalDependencies":[]}