{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nvar InMemorySpanExporter = /** @class */function () {\n  function InMemorySpanExporter() {\n    this._finishedSpans = [];\n    /**\n     * Indicates if the exporter has been \"shutdown.\"\n     * When false, exported spans will not be stored in-memory.\n     */\n    this._stopped = false;\n  }\n  InMemorySpanExporter.prototype.export = function (spans, resultCallback) {\n    var _a;\n    if (this._stopped) return resultCallback({\n      code: ExportResultCode.FAILED,\n      error: new Error('Exporter has been stopped')\n    });\n    (_a = this._finishedSpans).push.apply(_a, __spreadArray([], __read(spans), false));\n    setTimeout(function () {\n      return resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }, 0);\n  };\n  InMemorySpanExporter.prototype.shutdown = function () {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return this.forceFlush();\n  };\n  /**\n   * Exports any pending spans in the exporter\n   */\n  InMemorySpanExporter.prototype.forceFlush = function () {\n    return Promise.resolve();\n  };\n  InMemorySpanExporter.prototype.reset = function () {\n    this._finishedSpans = [];\n  };\n  InMemorySpanExporter.prototype.getFinishedSpans = function () {\n    return this._finishedSpans;\n  };\n  return InMemorySpanExporter;\n}();\nexport { InMemorySpanExporter };","map":{"version":3,"names":["ExportResultCode","InMemorySpanExporter","_finishedSpans","_stopped","prototype","export","spans","resultCallback","code","FAILED","error","Error","_a","push","apply","__spreadArray","__read","setTimeout","SUCCESS","shutdown","forceFlush","Promise","resolve","reset","getFinishedSpans"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-base/src/export/InMemorySpanExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nexport class InMemorySpanExporter implements SpanExporter {\n  private _finishedSpans: ReadableSpan[] = [];\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported spans will not be stored in-memory.\n   */\n  protected _stopped = false;\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._stopped)\n      return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been stopped'),\n      });\n    this._finishedSpans.push(...spans);\n\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  shutdown(): Promise<void> {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset(): void {\n    this._finishedSpans = [];\n  }\n\n  getFinishedSpans(): ReadableSpan[] {\n    return this._finishedSpans;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAuBA,gBAAgB,QAAQ,qBAAqB;AAEpE;;;;;AAKA,IAAAC,oBAAA;EAAA,SAAAA,qBAAA;IACU,KAAAC,cAAc,GAAmB,EAAE;IAC3C;;;;IAIU,KAAAC,QAAQ,GAAG,KAAK;EAoC5B;EAlCEF,oBAAA,CAAAG,SAAA,CAAAC,MAAM,GAAN,UACEC,KAAqB,EACrBC,cAA8C;;IAE9C,IAAI,IAAI,CAACJ,QAAQ,EACf,OAAOI,cAAc,CAAC;MACpBC,IAAI,EAAER,gBAAgB,CAACS,MAAM;MAC7BC,KAAK,EAAE,IAAIC,KAAK,CAAC,2BAA2B;KAC7C,CAAC;IACJ,CAAAC,EAAA,OAAI,CAACV,cAAc,EAACW,IAAI,CAAAC,KAAA,CAAAF,EAAA,EAAAG,aAAA,KAAAC,MAAA,CAAIV,KAAK;IAEjCW,UAAU,CAAC;MAAM,OAAAV,cAAc,CAAC;QAAEC,IAAI,EAAER,gBAAgB,CAACkB;MAAO,CAAE,CAAC;IAAlD,CAAkD,EAAE,CAAC,CAAC;EACzE,CAAC;EAEDjB,oBAAA,CAAAG,SAAA,CAAAe,QAAQ,GAAR;IACE,IAAI,CAAChB,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACD,cAAc,GAAG,EAAE;IACxB,OAAO,IAAI,CAACkB,UAAU,EAAE;EAC1B,CAAC;EAED;;;EAGAnB,oBAAA,CAAAG,SAAA,CAAAgB,UAAU,GAAV;IACE,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EAEDrB,oBAAA,CAAAG,SAAA,CAAAmB,KAAK,GAAL;IACE,IAAI,CAACrB,cAAc,GAAG,EAAE;EAC1B,CAAC;EAEDD,oBAAA,CAAAG,SAAA,CAAAoB,gBAAgB,GAAhB;IACE,OAAO,IAAI,CAACtB,cAAc;EAC5B,CAAC;EACH,OAAAD,oBAAC;AAAD,CAAC,CA1CD"},"metadata":{},"sourceType":"module","externalDependencies":[]}