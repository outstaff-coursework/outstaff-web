{"ast":null,"code":"import { isFunction } from '../utils';\nexport function initializeMetas(_unpatchedConsole, internalLogger, _config) {\n  let items = [];\n  let listeners = [];\n  const getValue = () => items.reduce((acc, item) => Object.assign(acc, isFunction(item) ? item() : item), {});\n  const notifyListeners = () => {\n    if (listeners.length) {\n      const value = getValue();\n      listeners.forEach(listener => listener(value));\n    }\n  };\n  const add = function () {\n    for (var _len = arguments.length, newItems = new Array(_len), _key = 0; _key < _len; _key++) {\n      newItems[_key] = arguments[_key];\n    }\n    internalLogger.debug('Adding metas\\n', newItems);\n    items.push(...newItems);\n    notifyListeners();\n  };\n  const remove = function () {\n    for (var _len2 = arguments.length, itemsToRemove = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      itemsToRemove[_key2] = arguments[_key2];\n    }\n    internalLogger.debug('Removing metas\\n', itemsToRemove);\n    items = items.filter(currentItem => !itemsToRemove.includes(currentItem));\n    notifyListeners();\n  };\n  const addListener = listener => {\n    internalLogger.debug('Adding metas listener\\n', listener);\n    listeners.push(listener);\n  };\n  const removeListener = listener => {\n    internalLogger.debug('Removing metas listener\\n', listener);\n    listeners = listeners.filter(currentListener => currentListener !== listener);\n  };\n  return {\n    add,\n    remove,\n    addListener,\n    removeListener,\n    get value() {\n      return getValue();\n    }\n  };\n}","map":{"version":3,"names":["isFunction","initializeMetas","_unpatchedConsole","internalLogger","_config","items","listeners","getValue","reduce","acc","item","Object","assign","notifyListeners","length","value","forEach","listener","add","_len","arguments","newItems","Array","_key","debug","push","remove","_len2","itemsToRemove","_key2","filter","currentItem","includes","addListener","removeListener","currentListener"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/metas/initialize.ts"],"sourcesContent":["import type { Config } from '../config';\nimport type { InternalLogger } from '../internalLogger';\nimport type { UnpatchedConsole } from '../unpatchedConsole';\nimport { isFunction } from '../utils';\n\nimport type { Meta, MetaItem, Metas, MetasListener } from './types';\n\nexport function initializeMetas(\n  _unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  _config: Config\n): Metas {\n  let items: MetaItem[] = [];\n  let listeners: MetasListener[] = [];\n\n  const getValue = () => items.reduce<Meta>((acc, item) => Object.assign(acc, isFunction(item) ? item() : item), {});\n\n  const notifyListeners = () => {\n    if (listeners.length) {\n      const value = getValue();\n\n      listeners.forEach((listener) => listener(value));\n    }\n  };\n\n  const add: Metas['add'] = (...newItems) => {\n    internalLogger.debug('Adding metas\\n', newItems);\n\n    items.push(...newItems);\n\n    notifyListeners();\n  };\n\n  const remove: Metas['remove'] = (...itemsToRemove) => {\n    internalLogger.debug('Removing metas\\n', itemsToRemove);\n\n    items = items.filter((currentItem) => !itemsToRemove.includes(currentItem));\n\n    notifyListeners();\n  };\n\n  const addListener: Metas['addListener'] = (listener) => {\n    internalLogger.debug('Adding metas listener\\n', listener);\n\n    listeners.push(listener);\n  };\n\n  const removeListener: Metas['removeListener'] = (listener) => {\n    internalLogger.debug('Removing metas listener\\n', listener);\n\n    listeners = listeners.filter((currentListener) => currentListener !== listener);\n  };\n\n  return {\n    add,\n    remove,\n    addListener,\n    removeListener,\n    get value() {\n      return getValue();\n    },\n  };\n}\n"],"mappings":"AAGA,SAASA,UAAU,QAAQ,UAAU;AAIrC,OAAM,SAAUC,eAAeA,CAC7BC,iBAAmC,EACnCC,cAA8B,EAC9BC,OAAe;EAEf,IAAIC,KAAK,GAAe,EAAE;EAC1B,IAAIC,SAAS,GAAoB,EAAE;EAEnC,MAAMC,QAAQ,GAAGA,CAAA,KAAMF,KAAK,CAACG,MAAM,CAAO,CAACC,GAAG,EAAEC,IAAI,KAAKC,MAAM,CAACC,MAAM,CAACH,GAAG,EAAET,UAAU,CAACU,IAAI,CAAC,GAAGA,IAAI,EAAE,GAAGA,IAAI,CAAC,EAAE,EAAE,CAAC;EAElH,MAAMG,eAAe,GAAGA,CAAA,KAAK;IAC3B,IAAIP,SAAS,CAACQ,MAAM,EAAE;MACpB,MAAMC,KAAK,GAAGR,QAAQ,EAAE;MAExBD,SAAS,CAACU,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACF,KAAK,CAAC,CAAC;;EAEpD,CAAC;EAED,MAAMG,GAAG,GAAiB,SAAAA,CAAA,EAAgB;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAN,MAAA,EAAZO,QAAQ,OAAAC,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;MAARF,QAAQ,CAAAE,IAAA,IAAAH,SAAA,CAAAG,IAAA;IAAA;IACpCpB,cAAc,CAACqB,KAAK,CAAC,gBAAgB,EAAEH,QAAQ,CAAC;IAEhDhB,KAAK,CAACoB,IAAI,CAAC,GAAGJ,QAAQ,CAAC;IAEvBR,eAAe,EAAE;EACnB,CAAC;EAED,MAAMa,MAAM,GAAoB,SAAAA,CAAA,EAAqB;IAAA,SAAAC,KAAA,GAAAP,SAAA,CAAAN,MAAA,EAAjBc,aAAa,OAAAN,KAAA,CAAAK,KAAA,GAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;MAAbD,aAAa,CAAAC,KAAA,IAAAT,SAAA,CAAAS,KAAA;IAAA;IAC/C1B,cAAc,CAACqB,KAAK,CAAC,kBAAkB,EAAEI,aAAa,CAAC;IAEvDvB,KAAK,GAAGA,KAAK,CAACyB,MAAM,CAAEC,WAAW,IAAK,CAACH,aAAa,CAACI,QAAQ,CAACD,WAAW,CAAC,CAAC;IAE3ElB,eAAe,EAAE;EACnB,CAAC;EAED,MAAMoB,WAAW,GAA0BhB,QAAQ,IAAI;IACrDd,cAAc,CAACqB,KAAK,CAAC,yBAAyB,EAAEP,QAAQ,CAAC;IAEzDX,SAAS,CAACmB,IAAI,CAACR,QAAQ,CAAC;EAC1B,CAAC;EAED,MAAMiB,cAAc,GAA6BjB,QAAQ,IAAI;IAC3Dd,cAAc,CAACqB,KAAK,CAAC,2BAA2B,EAAEP,QAAQ,CAAC;IAE3DX,SAAS,GAAGA,SAAS,CAACwB,MAAM,CAAEK,eAAe,IAAKA,eAAe,KAAKlB,QAAQ,CAAC;EACjF,CAAC;EAED,OAAO;IACLC,GAAG;IACHQ,MAAM;IACNO,WAAW;IACXC,cAAc;IACd,IAAInB,KAAKA,CAAA;MACP,OAAOR,QAAQ,EAAE;IACnB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}