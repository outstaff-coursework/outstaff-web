{"ast":null,"code":"import { initializeAPI } from './api';\nimport { initializeInstrumentations, registerInitialInstrumentations } from './instrumentations';\nimport { initializeInternalLogger } from './internalLogger';\nimport { initializeMetas, registerInitialMetas } from './metas';\nimport { isInternalFaroOnGlobalObject, registerFaro } from './sdk';\nimport { initializeTransports, registerInitialTransports } from './transports';\nimport { initializeUnpatchedConsole } from './unpatchedConsole';\nexport function initializeFaro(config) {\n  const unpatchedConsole = initializeUnpatchedConsole(config);\n  const internalLogger = initializeInternalLogger(unpatchedConsole, config);\n  if (isInternalFaroOnGlobalObject() && !config.isolate) {\n    internalLogger.error('Faro is already registered. Either add instrumentations, transports etc. to the global faro instance or use the \"isolate\" property');\n    return undefined;\n  }\n  internalLogger.debug('Initializing');\n  // Initializing the APIs\n  const metas = initializeMetas(unpatchedConsole, internalLogger, config);\n  const transports = initializeTransports(unpatchedConsole, internalLogger, config, metas);\n  const api = initializeAPI(unpatchedConsole, internalLogger, config, metas, transports);\n  const instrumentations = initializeInstrumentations(unpatchedConsole, internalLogger, config, metas, transports, api);\n  const faro = registerFaro(unpatchedConsole, internalLogger, config, metas, transports, api, instrumentations);\n  // make sure Faro is initialized before registering default metas, instrumentations, transports etc.\n  registerInitialMetas(faro);\n  registerInitialTransports(faro);\n  registerInitialInstrumentations(faro);\n  return faro;\n}","map":{"version":3,"names":["initializeAPI","initializeInstrumentations","registerInitialInstrumentations","initializeInternalLogger","initializeMetas","registerInitialMetas","isInternalFaroOnGlobalObject","registerFaro","initializeTransports","registerInitialTransports","initializeUnpatchedConsole","initializeFaro","config","unpatchedConsole","internalLogger","isolate","error","undefined","debug","metas","transports","api","instrumentations","faro"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/initialize.ts"],"sourcesContent":["import { initializeAPI } from './api';\nimport type { Config } from './config';\nimport { initializeInstrumentations, registerInitialInstrumentations } from './instrumentations';\nimport { initializeInternalLogger } from './internalLogger';\nimport { initializeMetas, registerInitialMetas } from './metas';\nimport { isInternalFaroOnGlobalObject, registerFaro } from './sdk';\nimport type { Faro } from './sdk';\nimport { initializeTransports, registerInitialTransports } from './transports';\nimport { initializeUnpatchedConsole } from './unpatchedConsole';\n\nexport function initializeFaro(config: Config): Faro {\n  const unpatchedConsole = initializeUnpatchedConsole(config);\n  const internalLogger = initializeInternalLogger(unpatchedConsole, config);\n\n  if (isInternalFaroOnGlobalObject() && !config.isolate) {\n    internalLogger.error(\n      'Faro is already registered. Either add instrumentations, transports etc. to the global faro instance or use the \"isolate\" property'\n    );\n\n    return undefined!;\n  }\n\n  internalLogger.debug('Initializing');\n\n  // Initializing the APIs\n  const metas = initializeMetas(unpatchedConsole, internalLogger, config);\n  const transports = initializeTransports(unpatchedConsole, internalLogger, config, metas);\n  const api = initializeAPI(unpatchedConsole, internalLogger, config, metas, transports);\n  const instrumentations = initializeInstrumentations(unpatchedConsole, internalLogger, config, metas, transports, api);\n  const faro = registerFaro(unpatchedConsole, internalLogger, config, metas, transports, api, instrumentations);\n\n  // make sure Faro is initialized before registering default metas, instrumentations, transports etc.\n  registerInitialMetas(faro);\n  registerInitialTransports(faro);\n  registerInitialInstrumentations(faro);\n\n  return faro;\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AAErC,SAASC,0BAA0B,EAAEC,+BAA+B,QAAQ,oBAAoB;AAChG,SAASC,wBAAwB,QAAQ,kBAAkB;AAC3D,SAASC,eAAe,EAAEC,oBAAoB,QAAQ,SAAS;AAC/D,SAASC,4BAA4B,EAAEC,YAAY,QAAQ,OAAO;AAElE,SAASC,oBAAoB,EAAEC,yBAAyB,QAAQ,cAAc;AAC9E,SAASC,0BAA0B,QAAQ,oBAAoB;AAE/D,OAAM,SAAUC,cAAcA,CAACC,MAAc;EAC3C,MAAMC,gBAAgB,GAAGH,0BAA0B,CAACE,MAAM,CAAC;EAC3D,MAAME,cAAc,GAAGX,wBAAwB,CAACU,gBAAgB,EAAED,MAAM,CAAC;EAEzE,IAAIN,4BAA4B,EAAE,IAAI,CAACM,MAAM,CAACG,OAAO,EAAE;IACrDD,cAAc,CAACE,KAAK,CAClB,oIAAoI,CACrI;IAED,OAAOC,SAAU;;EAGnBH,cAAc,CAACI,KAAK,CAAC,cAAc,CAAC;EAEpC;EACA,MAAMC,KAAK,GAAGf,eAAe,CAACS,gBAAgB,EAAEC,cAAc,EAAEF,MAAM,CAAC;EACvE,MAAMQ,UAAU,GAAGZ,oBAAoB,CAACK,gBAAgB,EAAEC,cAAc,EAAEF,MAAM,EAAEO,KAAK,CAAC;EACxF,MAAME,GAAG,GAAGrB,aAAa,CAACa,gBAAgB,EAAEC,cAAc,EAAEF,MAAM,EAAEO,KAAK,EAAEC,UAAU,CAAC;EACtF,MAAME,gBAAgB,GAAGrB,0BAA0B,CAACY,gBAAgB,EAAEC,cAAc,EAAEF,MAAM,EAAEO,KAAK,EAAEC,UAAU,EAAEC,GAAG,CAAC;EACrH,MAAME,IAAI,GAAGhB,YAAY,CAACM,gBAAgB,EAAEC,cAAc,EAAEF,MAAM,EAAEO,KAAK,EAAEC,UAAU,EAAEC,GAAG,EAAEC,gBAAgB,CAAC;EAE7G;EACAjB,oBAAoB,CAACkB,IAAI,CAAC;EAC1Bd,yBAAyB,CAACc,IAAI,CAAC;EAC/BrB,+BAA+B,CAACqB,IAAI,CAAC;EAErC,OAAOA,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}