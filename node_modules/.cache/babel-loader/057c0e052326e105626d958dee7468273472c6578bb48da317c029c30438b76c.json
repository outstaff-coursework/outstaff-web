{"ast":null,"code":"import { BaseInstrumentation, EVENT_VIEW_CHANGED, VERSION } from '@grafana/faro-core';\n// all this does is send VIEW_CHANGED event\nexport class ViewInstrumentation extends BaseInstrumentation {\n  constructor() {\n    super(...arguments);\n    this.name = '@grafana/faro-web-sdk:instrumentation-view';\n    this.version = VERSION;\n  }\n  sendViewChangedEvent(meta) {\n    var _a, _b, _c;\n    const view = meta.view;\n    if (view && view.name !== ((_a = this.notifiedView) === null || _a === void 0 ? void 0 : _a.name)) {\n      this.api.pushEvent(EVENT_VIEW_CHANGED, {\n        fromView: (_c = (_b = this.notifiedView) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '',\n        toView: view.name\n      }, undefined, {\n        skipDedupe: true\n      });\n      this.notifiedView = view;\n    }\n  }\n  initialize() {\n    this.sendViewChangedEvent(this.metas.value);\n    this.metas.addListener(this.sendViewChangedEvent.bind(this));\n  }\n}","map":{"version":3,"names":["BaseInstrumentation","EVENT_VIEW_CHANGED","VERSION","ViewInstrumentation","constructor","name","version","sendViewChangedEvent","meta","view","_a","notifiedView","api","pushEvent","fromView","_c","_b","toView","undefined","skipDedupe","initialize","metas","value","addListener","bind"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/instrumentations/view/instrumentation.ts"],"sourcesContent":["import { BaseInstrumentation, EVENT_VIEW_CHANGED, Meta, MetaView, VERSION } from '@grafana/faro-core';\n\n// all this does is send VIEW_CHANGED event\nexport class ViewInstrumentation extends BaseInstrumentation {\n  readonly name = '@grafana/faro-web-sdk:instrumentation-view';\n  readonly version = VERSION;\n\n  // previously notified view, to ensure we don't send view changed\n  // event twice for the same view\n  private notifiedView: MetaView | undefined;\n\n  private sendViewChangedEvent(meta: Meta): void {\n    const view = meta.view;\n\n    if (view && view.name !== this.notifiedView?.name) {\n      this.api.pushEvent(\n        EVENT_VIEW_CHANGED,\n        {\n          fromView: this.notifiedView?.name ?? '',\n          toView: view.name,\n        },\n        undefined,\n        { skipDedupe: true }\n      );\n\n      this.notifiedView = view;\n    }\n  }\n\n  initialize() {\n    this.sendViewChangedEvent(this.metas.value);\n\n    this.metas.addListener(this.sendViewChangedEvent.bind(this));\n  }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,kBAAkB,EAAkBC,OAAO,QAAQ,oBAAoB;AAErG;AACA,OAAM,MAAOC,mBAAoB,SAAQH,mBAAmB;EAA5DI,YAAA;;IACW,KAAAC,IAAI,GAAG,4CAA4C;IACnD,KAAAC,OAAO,GAAGJ,OAAO;EA6B5B;EAvBUK,oBAAoBA,CAACC,IAAU;;IACrC,MAAMC,IAAI,GAAGD,IAAI,CAACC,IAAI;IAEtB,IAAIA,IAAI,IAAIA,IAAI,CAACJ,IAAI,MAAK,CAAAK,EAAA,OAAI,CAACC,YAAY,cAAAD,EAAA,uBAAAA,EAAA,CAAEL,IAAI,GAAE;MACjD,IAAI,CAACO,GAAG,CAACC,SAAS,CAChBZ,kBAAkB,EAClB;QACEa,QAAQ,EAAE,CAAAC,EAAA,IAAAC,EAAA,OAAI,CAACL,YAAY,cAAAK,EAAA,uBAAAA,EAAA,CAAEX,IAAI,cAAAU,EAAA,cAAAA,EAAA,GAAI,EAAE;QACvCE,MAAM,EAAER,IAAI,CAACJ;OACd,EACDa,SAAS,EACT;QAAEC,UAAU,EAAE;MAAI,CAAE,CACrB;MAED,IAAI,CAACR,YAAY,GAAGF,IAAI;;EAE5B;EAEAW,UAAUA,CAAA;IACR,IAAI,CAACb,oBAAoB,CAAC,IAAI,CAACc,KAAK,CAACC,KAAK,CAAC;IAE3C,IAAI,CAACD,KAAK,CAACE,WAAW,CAAC,IAAI,CAAChB,oBAAoB,CAACiB,IAAI,CAAC,IAAI,CAAC,CAAC;EAC9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}