{"ast":null,"code":"import { isNumber } from '@grafana/faro-core';\nimport { buildStackFrame } from './buildStackFrame';\nimport { evalString, firefoxEvalRegex, firefoxEvalString, firefoxLineRegex, newLineString, reactMinifiedRegex, webkitAddressAtString, webkitAddressAtStringLength, webkitEvalRegex, webkitEvalString, webkitLineRegex } from './const';\nimport { getDataFromSafariExtensions } from './getDataFromSafariExtensions';\nexport function getStackFramesFromError(error) {\n  let lines = [];\n  if (error.stacktrace) {\n    lines = error.stacktrace.split(newLineString).filter((_line, idx) => idx % 2 === 0);\n  } else if (error.stack) {\n    lines = error.stack.split(newLineString);\n  }\n  const stackFrames = lines.reduce((acc, line, idx) => {\n    let parts;\n    let func;\n    let filename;\n    let lineno;\n    let colno;\n    if (parts = webkitLineRegex.exec(line)) {\n      func = parts[1];\n      filename = parts[2];\n      lineno = parts[3];\n      colno = parts[4];\n      if (filename === null || filename === void 0 ? void 0 : filename.startsWith(webkitEvalString)) {\n        const submatch = webkitEvalRegex.exec(filename);\n        if (submatch) {\n          filename = submatch[1];\n          lineno = submatch[2];\n          colno = submatch[3];\n        }\n      }\n      filename = (filename === null || filename === void 0 ? void 0 : filename.startsWith(webkitAddressAtString)) ? filename.substring(webkitAddressAtStringLength) : filename;\n      [func, filename] = getDataFromSafariExtensions(func, filename);\n    } else if (parts = firefoxLineRegex.exec(line)) {\n      func = parts[1];\n      filename = parts[3];\n      lineno = parts[4];\n      colno = parts[5];\n      if (!!filename && filename.includes(firefoxEvalString)) {\n        const submatch = firefoxEvalRegex.exec(filename);\n        if (submatch) {\n          func = func || evalString;\n          filename = submatch[1];\n          lineno = submatch[2];\n        }\n      } else if (idx === 0 && !colno && isNumber(error.columnNumber)) {\n        colno = String(error.columnNumber + 1);\n      }\n      [func, filename] = getDataFromSafariExtensions(func, filename);\n    }\n    if (filename || func) {\n      acc.push(buildStackFrame(filename, func, lineno ? Number(lineno) : undefined, colno ? Number(colno) : undefined));\n    }\n    return acc;\n  }, []);\n  if (reactMinifiedRegex.test(error.message)) {\n    return stackFrames.slice(1);\n  }\n  return stackFrames;\n}","map":{"version":3,"names":["isNumber","buildStackFrame","evalString","firefoxEvalRegex","firefoxEvalString","firefoxLineRegex","newLineString","reactMinifiedRegex","webkitAddressAtString","webkitAddressAtStringLength","webkitEvalRegex","webkitEvalString","webkitLineRegex","getDataFromSafariExtensions","getStackFramesFromError","error","lines","stacktrace","split","filter","_line","idx","stack","stackFrames","reduce","acc","line","parts","func","filename","lineno","colno","exec","startsWith","submatch","substring","includes","columnNumber","String","push","Number","undefined","test","message","slice"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/instrumentations/errors/stackFrames/getStackFramesFromError.ts"],"sourcesContent":["import { isNumber } from '@grafana/faro-core';\nimport type { ExceptionStackFrame, ExtendedError } from '@grafana/faro-core';\n\nimport { buildStackFrame } from './buildStackFrame';\nimport {\n  evalString,\n  firefoxEvalRegex,\n  firefoxEvalString,\n  firefoxLineRegex,\n  newLineString,\n  reactMinifiedRegex,\n  webkitAddressAtString,\n  webkitAddressAtStringLength,\n  webkitEvalRegex,\n  webkitEvalString,\n  webkitLineRegex,\n} from './const';\nimport { getDataFromSafariExtensions } from './getDataFromSafariExtensions';\n\nexport function getStackFramesFromError(error: ExtendedError): ExceptionStackFrame[] {\n  let lines: string[] = [];\n\n  if (error.stacktrace) {\n    lines = error.stacktrace.split(newLineString).filter((_line, idx) => idx % 2 === 0);\n  } else if (error.stack) {\n    lines = error.stack.split(newLineString);\n  }\n\n  const stackFrames = lines.reduce((acc, line, idx) => {\n    let parts: RegExpExecArray | null;\n    let func: string | undefined;\n    let filename: string | undefined;\n    let lineno: string | undefined;\n    let colno: string | undefined;\n\n    if ((parts = webkitLineRegex.exec(line))) {\n      func = parts[1];\n      filename = parts[2];\n      lineno = parts[3];\n      colno = parts[4];\n\n      if (filename?.startsWith(webkitEvalString)) {\n        const submatch = webkitEvalRegex.exec(filename);\n\n        if (submatch) {\n          filename = submatch[1];\n          lineno = submatch[2];\n          colno = submatch[3];\n        }\n      }\n\n      filename = filename?.startsWith(webkitAddressAtString)\n        ? filename.substring(webkitAddressAtStringLength)\n        : filename;\n      [func, filename] = getDataFromSafariExtensions(func, filename);\n    } else if ((parts = firefoxLineRegex.exec(line))) {\n      func = parts[1];\n      filename = parts[3];\n      lineno = parts[4];\n      colno = parts[5];\n\n      if (!!filename && filename.includes(firefoxEvalString)) {\n        const submatch = firefoxEvalRegex.exec(filename);\n\n        if (submatch) {\n          func = func || evalString;\n          filename = submatch[1];\n          lineno = submatch[2];\n        }\n      } else if (idx === 0 && !colno && isNumber(error.columnNumber)) {\n        colno = String(error.columnNumber! + 1);\n      }\n\n      [func, filename] = getDataFromSafariExtensions(func, filename);\n    }\n\n    if (filename || func) {\n      acc.push(buildStackFrame(filename, func, lineno ? Number(lineno) : undefined, colno ? Number(colno) : undefined));\n    }\n\n    return acc;\n  }, [] as ExceptionStackFrame[]);\n\n  if (reactMinifiedRegex.test(error.message)) {\n    return stackFrames.slice(1);\n  }\n\n  return stackFrames;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}