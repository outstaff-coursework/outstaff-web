{"ast":null,"code":"export function initializeInstrumentations(unpatchedConsole, internalLogger, config, metas, transports, api) {\n  internalLogger.debug('Initializing instrumentations');\n  const instrumentations = [];\n  const add = function () {\n    internalLogger.debug('Adding instrumentations');\n    for (var _len = arguments.length, newInstrumentations = new Array(_len), _key = 0; _key < _len; _key++) {\n      newInstrumentations[_key] = arguments[_key];\n    }\n    newInstrumentations.forEach(newInstrumentation => {\n      internalLogger.debug(\"Adding \\\"\".concat(newInstrumentation.name, \"\\\" instrumentation\"));\n      const exists = instrumentations.some(existingInstrumentation => existingInstrumentation.name === newInstrumentation.name);\n      if (exists) {\n        internalLogger.warn(\"Instrumentation \".concat(newInstrumentation.name, \" is already added\"));\n        return;\n      }\n      newInstrumentation.unpatchedConsole = unpatchedConsole;\n      newInstrumentation.internalLogger = internalLogger;\n      newInstrumentation.config = config;\n      newInstrumentation.metas = metas;\n      newInstrumentation.transports = transports;\n      newInstrumentation.api = api;\n      instrumentations.push(newInstrumentation);\n      newInstrumentation.initialize();\n    });\n  };\n  const remove = function () {\n    internalLogger.debug('Removing instrumentations');\n    for (var _len2 = arguments.length, instrumentationsToRemove = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      instrumentationsToRemove[_key2] = arguments[_key2];\n    }\n    instrumentationsToRemove.forEach(instrumentationToRemove => {\n      var _a, _b;\n      internalLogger.debug(\"Removing \\\"\".concat(instrumentationToRemove.name, \"\\\" instrumentation\"));\n      const existingInstrumentationIndex = instrumentations.reduce((acc, existingInstrumentation, existingTransportIndex) => {\n        if (acc === null && existingInstrumentation.name === instrumentationToRemove.name) {\n          return existingTransportIndex;\n        }\n        return null;\n      }, null);\n      if (!existingInstrumentationIndex) {\n        internalLogger.warn(\"Instrumentation \\\"\".concat(instrumentationToRemove.name, \"\\\" is not added\"));\n        return;\n      }\n      (_b = (_a = instrumentations[existingInstrumentationIndex]).destroy) === null || _b === void 0 ? void 0 : _b.call(_a);\n      instrumentations.splice(existingInstrumentationIndex, 1);\n    });\n  };\n  return {\n    add,\n    get instrumentations() {\n      return [...instrumentations];\n    },\n    remove\n  };\n}","map":{"version":3,"names":["initializeInstrumentations","unpatchedConsole","internalLogger","config","metas","transports","api","debug","instrumentations","add","_len","arguments","length","newInstrumentations","Array","_key","forEach","newInstrumentation","concat","name","exists","some","existingInstrumentation","warn","push","initialize","remove","_len2","instrumentationsToRemove","_key2","instrumentationToRemove","existingInstrumentationIndex","reduce","acc","existingTransportIndex","_b","_a","destroy","call","splice"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/instrumentations/initialize.ts"],"sourcesContent":["import type { API } from '../api';\nimport type { Config } from '../config';\nimport type { InternalLogger } from '../internalLogger';\nimport type { Metas } from '../metas';\nimport type { Transports } from '../transports';\nimport type { UnpatchedConsole } from '../unpatchedConsole';\n\nimport type { Instrumentation, Instrumentations } from './types';\n\nexport function initializeInstrumentations(\n  unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  config: Config,\n  metas: Metas,\n  transports: Transports,\n  api: API\n): Instrumentations {\n  internalLogger.debug('Initializing instrumentations');\n\n  const instrumentations: Instrumentation[] = [];\n\n  const add: Instrumentations['add'] = (...newInstrumentations) => {\n    internalLogger.debug('Adding instrumentations');\n\n    newInstrumentations.forEach((newInstrumentation) => {\n      internalLogger.debug(`Adding \"${newInstrumentation.name}\" instrumentation`);\n\n      const exists = instrumentations.some(\n        (existingInstrumentation) => existingInstrumentation.name === newInstrumentation.name\n      );\n\n      if (exists) {\n        internalLogger.warn(`Instrumentation ${newInstrumentation.name} is already added`);\n\n        return;\n      }\n\n      newInstrumentation.unpatchedConsole = unpatchedConsole;\n      newInstrumentation.internalLogger = internalLogger;\n      newInstrumentation.config = config;\n      newInstrumentation.metas = metas;\n      newInstrumentation.transports = transports;\n      newInstrumentation.api = api;\n\n      instrumentations.push(newInstrumentation);\n\n      newInstrumentation.initialize();\n    });\n  };\n\n  const remove: Instrumentations['remove'] = (...instrumentationsToRemove) => {\n    internalLogger.debug('Removing instrumentations');\n\n    instrumentationsToRemove.forEach((instrumentationToRemove) => {\n      internalLogger.debug(`Removing \"${instrumentationToRemove.name}\" instrumentation`);\n\n      const existingInstrumentationIndex = instrumentations.reduce<number | null>(\n        (acc, existingInstrumentation, existingTransportIndex) => {\n          if (acc === null && existingInstrumentation.name === instrumentationToRemove.name) {\n            return existingTransportIndex;\n          }\n\n          return null;\n        },\n        null\n      );\n\n      if (!existingInstrumentationIndex) {\n        internalLogger.warn(`Instrumentation \"${instrumentationToRemove.name}\" is not added`);\n\n        return;\n      }\n\n      instrumentations[existingInstrumentationIndex]!.destroy?.();\n\n      instrumentations.splice(existingInstrumentationIndex, 1);\n    });\n  };\n\n  return {\n    add,\n    get instrumentations() {\n      return [...instrumentations];\n    },\n    remove,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}