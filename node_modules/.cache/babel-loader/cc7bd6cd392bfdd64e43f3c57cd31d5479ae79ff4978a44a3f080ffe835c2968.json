{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, ValueType } from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument } from './Instruments';\n/**\n * The class implements {@link ObservableResult} interface.\n */\nvar ObservableResultImpl = /** @class */function () {\n  function ObservableResultImpl(_instrumentName, _valueType) {\n    this._instrumentName = _instrumentName;\n    this._valueType = _valueType;\n    /**\n     * @internal\n     */\n    this._buffer = new AttributeHashMap();\n  }\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  ObservableResultImpl.prototype.observe = function (value, attributes) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\"non-number value provided to metric \" + this._instrumentName + \": \" + value);\n      return;\n    }\n    if (this._valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\"INT value type cannot accept a floating-point value for \" + this._instrumentName + \", ignoring the fractional digits.\");\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._buffer.set(attributes, value);\n  };\n  return ObservableResultImpl;\n}();\nexport { ObservableResultImpl };\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nvar BatchObservableResultImpl = /** @class */function () {\n  function BatchObservableResultImpl() {\n    /**\n     * @internal\n     */\n    this._buffer = new Map();\n  }\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  BatchObservableResultImpl.prototype.observe = function (metric, value, attributes) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n    if (!isObservableInstrument(metric)) {\n      return;\n    }\n    var map = this._buffer.get(metric);\n    if (map == null) {\n      map = new AttributeHashMap();\n      this._buffer.set(metric, map);\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\"non-number value provided to metric \" + metric._descriptor.name + \": \" + value);\n      return;\n    }\n    if (metric._descriptor.valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\"INT value type cannot accept a floating-point value for \" + metric._descriptor.name + \", ignoring the fractional digits.\");\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    map.set(attributes, value);\n  };\n  return BatchObservableResultImpl;\n}();\nexport { BatchObservableResultImpl };","map":{"version":3,"names":["diag","ValueType","AttributeHashMap","isObservableInstrument","ObservableResultImpl","_instrumentName","_valueType","_buffer","prototype","observe","value","attributes","warn","INT","Number","isInteger","Math","trunc","set","BatchObservableResultImpl","Map","metric","map","get","_descriptor","name","valueType"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/ObservableResult.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  ObservableResult,\n  MetricAttributes,\n  ValueType,\n  BatchObservableResult,\n  Observable,\n} from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument, ObservableInstrument } from './Instruments';\n\n/**\n * The class implements {@link ObservableResult} interface.\n */\nexport class ObservableResultImpl implements ObservableResult {\n  /**\n   * @internal\n   */\n  _buffer = new AttributeHashMap<number>();\n\n  constructor(\n    private _instrumentName: string,\n    private _valueType: ValueType\n  ) {}\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(value: number, attributes: MetricAttributes = {}): void {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._instrumentName}: ${value}`\n      );\n      return;\n    }\n    if (this._valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._instrumentName}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._buffer.set(attributes, value);\n  }\n}\n\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nexport class BatchObservableResultImpl implements BatchObservableResult {\n  /**\n   * @internal\n   */\n  _buffer: Map<ObservableInstrument, AttributeHashMap<number>> = new Map();\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(\n    metric: Observable,\n    value: number,\n    attributes: MetricAttributes = {}\n  ): void {\n    if (!isObservableInstrument(metric)) {\n      return;\n    }\n    let map = this._buffer.get(metric);\n    if (map == null) {\n      map = new AttributeHashMap();\n      this._buffer.set(metric, map);\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${metric._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      metric._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${metric._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    map.set(attributes, value);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SACEA,IAAI,EAGJC,SAAS,QAGJ,oBAAoB;AAC3B,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,sBAAsB,QAA8B,eAAe;AAE5E;;;AAGA,IAAAC,oBAAA;EAME,SAAAA,qBACUC,eAAuB,EACvBC,UAAqB;IADrB,KAAAD,eAAe,GAAfA,eAAe;IACf,KAAAC,UAAU,GAAVA,UAAU;IAPpB;;;IAGA,KAAAC,OAAO,GAAG,IAAIL,gBAAgB,EAAU;EAKrC;EAEH;;;EAGAE,oBAAA,CAAAI,SAAA,CAAAC,OAAO,GAAP,UAAQC,KAAa,EAAEC,UAAiC;IAAjC,IAAAA,UAAA;MAAAA,UAAA,KAAiC;IAAA;IACtD,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;MAC7BV,IAAI,CAACY,IAAI,CACP,yCAAuC,IAAI,CAACP,eAAe,UAAKK,KAAO,CACxE;MACD;;IAEF,IAAI,IAAI,CAACJ,UAAU,KAAKL,SAAS,CAACY,GAAG,IAAI,CAACC,MAAM,CAACC,SAAS,CAACL,KAAK,CAAC,EAAE;MACjEV,IAAI,CAACY,IAAI,CACP,6DAA2D,IAAI,CAACP,eAAe,sCAAmC,CACnH;MACDK,KAAK,GAAGM,IAAI,CAACC,KAAK,CAACP,KAAK,CAAC;MACzB;MACA,IAAI,CAACI,MAAM,CAACC,SAAS,CAACL,KAAK,CAAC,EAAE;QAC5B;;;IAGJ,IAAI,CAACH,OAAO,CAACW,GAAG,CAACP,UAAU,EAAED,KAAK,CAAC;EACrC,CAAC;EACH,OAAAN,oBAAC;AAAD,CAAC,CAjCD;;AAmCA;;;AAGA,IAAAe,yBAAA;EAAA,SAAAA,0BAAA;IACE;;;IAGA,KAAAZ,OAAO,GAAwD,IAAIa,GAAG,EAAE;EAuC1E;EArCE;;;EAGAD,yBAAA,CAAAX,SAAA,CAAAC,OAAO,GAAP,UACEY,MAAkB,EAClBX,KAAa,EACbC,UAAiC;IAAjC,IAAAA,UAAA;MAAAA,UAAA,KAAiC;IAAA;IAEjC,IAAI,CAACR,sBAAsB,CAACkB,MAAM,CAAC,EAAE;MACnC;;IAEF,IAAIC,GAAG,GAAG,IAAI,CAACf,OAAO,CAACgB,GAAG,CAACF,MAAM,CAAC;IAClC,IAAIC,GAAG,IAAI,IAAI,EAAE;MACfA,GAAG,GAAG,IAAIpB,gBAAgB,EAAE;MAC5B,IAAI,CAACK,OAAO,CAACW,GAAG,CAACG,MAAM,EAAEC,GAAG,CAAC;;IAE/B,IAAI,OAAOZ,KAAK,KAAK,QAAQ,EAAE;MAC7BV,IAAI,CAACY,IAAI,CACP,yCAAuCS,MAAM,CAACG,WAAW,CAACC,IAAI,UAAKf,KAAO,CAC3E;MACD;;IAEF,IACEW,MAAM,CAACG,WAAW,CAACE,SAAS,KAAKzB,SAAS,CAACY,GAAG,IAC9C,CAACC,MAAM,CAACC,SAAS,CAACL,KAAK,CAAC,EACxB;MACAV,IAAI,CAACY,IAAI,CACP,6DAA2DS,MAAM,CAACG,WAAW,CAACC,IAAI,sCAAmC,CACtH;MACDf,KAAK,GAAGM,IAAI,CAACC,KAAK,CAACP,KAAK,CAAC;MACzB;MACA,IAAI,CAACI,MAAM,CAACC,SAAS,CAACL,KAAK,CAAC,EAAE;QAC5B;;;IAGJY,GAAG,CAACJ,GAAG,CAACP,UAAU,EAAED,KAAK,CAAC;EAC5B,CAAC;EACH,OAAAS,yBAAC;AAAD,CAAC,CA3CD"},"metadata":{},"sourceType":"module","externalDependencies":[]}