{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { envDetectorSync } from './EnvDetectorSync';\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nvar EnvDetector = /** @class */function () {\n  function EnvDetector() {}\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  EnvDetector.prototype.detect = function (config) {\n    return Promise.resolve(envDetectorSync.detect(config));\n  };\n  return EnvDetector;\n}();\nexport var envDetector = new EnvDetector();","map":{"version":3,"names":["envDetectorSync","EnvDetector","prototype","detect","config","Promise","resolve","envDetector"],"sources":["/home/egor/node_modules/@opentelemetry/resources/src/detectors/EnvDetector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA,SAASA,eAAe,QAAQ,mBAAmB;AAEnD;;;;AAIA,IAAAC,WAAA;EAAA,SAAAA,YAAA,GAWA;EAVE;;;;;;;EAOAA,WAAA,CAAAC,SAAA,CAAAC,MAAM,GAAN,UAAOC,MAAgC;IACrC,OAAOC,OAAO,CAACC,OAAO,CAACN,eAAe,CAACG,MAAM,CAACC,MAAM,CAAC,CAAC;EACxD,CAAC;EACH,OAAAH,WAAC;AAAD,CAAC,CAXD;AAaA,OAAO,IAAMM,WAAW,GAAG,IAAIN,WAAW,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}