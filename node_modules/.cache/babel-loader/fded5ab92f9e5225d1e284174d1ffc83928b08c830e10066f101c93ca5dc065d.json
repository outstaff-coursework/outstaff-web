{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url, urlToMatch) {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(url, ignoredUrls) {\n  var e_1, _a;\n  if (!ignoredUrls) {\n    return false;\n  }\n  try {\n    for (var ignoredUrls_1 = __values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()) {\n      var ignoreUrl = ignoredUrls_1_1.value;\n      if (urlMatches(url, ignoreUrl)) {\n        return true;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["urlMatches","url","urlToMatch","match","isUrlIgnored","ignoredUrls","ignoredUrls_1","__values","ignoredUrls_1_1","next","done","ignoreUrl","value"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/utils/url.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url: string, urlToMatch: string | RegExp): boolean {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(\n  url: string,\n  ignoredUrls?: Array<string | RegExp>\n): boolean {\n  if (!ignoredUrls) {\n    return false;\n  }\n\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUA,UAAUA,CAACC,GAAW,EAAEC,UAA2B;EACjE,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClC,OAAOD,GAAG,KAAKC,UAAU;GAC1B,MAAM;IACL,OAAO,CAAC,CAACD,GAAG,CAACE,KAAK,CAACD,UAAU,CAAC;;AAElC;AACA;;;;;AAKA,OAAM,SAAUE,YAAYA,CAC1BH,GAAW,EACXI,WAAoC;;EAEpC,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,KAAK;;;IAGd,KAAwB,IAAAC,aAAA,GAAAC,QAAA,CAAAF,WAAW,GAAAG,eAAA,GAAAF,aAAA,CAAAG,IAAA,KAAAD,eAAA,CAAAE,IAAA,EAAAF,eAAA,GAAAF,aAAA,CAAAG,IAAA,IAAE;MAAhC,IAAME,SAAS,GAAAH,eAAA,CAAAI,KAAA;MAClB,IAAIZ,UAAU,CAACC,GAAG,EAAEU,SAAS,CAAC,EAAE;QAC9B,OAAO,IAAI;;;;;;;;;;;;;;EAGf,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}