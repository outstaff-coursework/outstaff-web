{"ast":null,"code":"import { TransportItemType } from '../../transports';\nexport function initializeTracesAPI(_unpatchedConsole, internalLogger, _config, metas, transports) {\n  internalLogger.debug('Initializing traces API');\n  let otel = undefined;\n  const initOTEL = (trace, context) => {\n    internalLogger.debug('Initializing OpenTelemetry');\n    otel = {\n      trace,\n      context\n    };\n  };\n  const getTraceContext = () => {\n    const ctx = otel === null || otel === void 0 ? void 0 : otel.trace.getSpanContext(otel.context.active());\n    return !ctx ? undefined : {\n      trace_id: ctx.traceId,\n      span_id: ctx.spanId\n    };\n  };\n  const pushTraces = payload => {\n    try {\n      const item = {\n        type: TransportItemType.TRACE,\n        payload,\n        meta: metas.value\n      };\n      internalLogger.debug('Pushing trace\\n', item);\n      transports.execute(item);\n    } catch (err) {\n      internalLogger.error('Error pushing trace\\n', err);\n    }\n  };\n  const getOTEL = () => otel;\n  const isOTELInitialized = () => !!otel;\n  return {\n    getOTEL,\n    getTraceContext,\n    initOTEL,\n    isOTELInitialized,\n    pushTraces\n  };\n}","map":{"version":3,"names":["TransportItemType","initializeTracesAPI","_unpatchedConsole","internalLogger","_config","metas","transports","debug","otel","undefined","initOTEL","trace","context","getTraceContext","ctx","getSpanContext","active","trace_id","traceId","span_id","spanId","pushTraces","payload","item","type","TRACE","meta","value","execute","err","error","getOTEL","isOTELInitialized"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/api/traces/initialize.ts"],"sourcesContent":["import type { Config } from '../../config';\nimport type { InternalLogger } from '../../internalLogger';\nimport type { Metas } from '../../metas';\nimport { TransportItem, TransportItemType, Transports } from '../../transports';\nimport type { UnpatchedConsole } from '../../unpatchedConsole';\n\nimport type { OTELApi, TraceEvent, TracesAPI } from './types';\n\nexport function initializeTracesAPI(\n  _unpatchedConsole: UnpatchedConsole,\n  internalLogger: InternalLogger,\n  _config: Config,\n  metas: Metas,\n  transports: Transports\n): TracesAPI {\n  internalLogger.debug('Initializing traces API');\n\n  let otel: OTELApi | undefined = undefined;\n\n  const initOTEL: TracesAPI['initOTEL'] = (trace, context) => {\n    internalLogger.debug('Initializing OpenTelemetry');\n\n    otel = {\n      trace,\n      context,\n    };\n  };\n\n  const getTraceContext: TracesAPI['getTraceContext'] = () => {\n    const ctx = otel?.trace.getSpanContext(otel.context.active());\n\n    return !ctx\n      ? undefined\n      : {\n          trace_id: ctx.traceId,\n          span_id: ctx.spanId,\n        };\n  };\n\n  const pushTraces: TracesAPI['pushTraces'] = (payload) => {\n    try {\n      const item: TransportItem<TraceEvent> = {\n        type: TransportItemType.TRACE,\n        payload,\n        meta: metas.value,\n      };\n\n      internalLogger.debug('Pushing trace\\n', item);\n\n      transports.execute(item);\n    } catch (err) {\n      internalLogger.error('Error pushing trace\\n', err);\n    }\n  };\n\n  const getOTEL: TracesAPI['getOTEL'] = () => otel;\n\n  const isOTELInitialized: TracesAPI['isOTELInitialized'] = () => !!otel;\n\n  return {\n    getOTEL,\n    getTraceContext,\n    initOTEL,\n    isOTELInitialized,\n    pushTraces,\n  };\n}\n"],"mappings":"AAGA,SAAwBA,iBAAiB,QAAoB,kBAAkB;AAK/E,OAAM,SAAUC,mBAAmBA,CACjCC,iBAAmC,EACnCC,cAA8B,EAC9BC,OAAe,EACfC,KAAY,EACZC,UAAsB;EAEtBH,cAAc,CAACI,KAAK,CAAC,yBAAyB,CAAC;EAE/C,IAAIC,IAAI,GAAwBC,SAAS;EAEzC,MAAMC,QAAQ,GAA0BA,CAACC,KAAK,EAAEC,OAAO,KAAI;IACzDT,cAAc,CAACI,KAAK,CAAC,4BAA4B,CAAC;IAElDC,IAAI,GAAG;MACLG,KAAK;MACLC;KACD;EACH,CAAC;EAED,MAAMC,eAAe,GAAiCA,CAAA,KAAK;IACzD,MAAMC,GAAG,GAAGN,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,KAAK,CAACI,cAAc,CAACP,IAAI,CAACI,OAAO,CAACI,MAAM,EAAE,CAAC;IAE7D,OAAO,CAACF,GAAG,GACPL,SAAS,GACT;MACEQ,QAAQ,EAAEH,GAAG,CAACI,OAAO;MACrBC,OAAO,EAAEL,GAAG,CAACM;KACd;EACP,CAAC;EAED,MAAMC,UAAU,GAA6BC,OAAO,IAAI;IACtD,IAAI;MACF,MAAMC,IAAI,GAA8B;QACtCC,IAAI,EAAExB,iBAAiB,CAACyB,KAAK;QAC7BH,OAAO;QACPI,IAAI,EAAErB,KAAK,CAACsB;OACb;MAEDxB,cAAc,CAACI,KAAK,CAAC,iBAAiB,EAAEgB,IAAI,CAAC;MAE7CjB,UAAU,CAACsB,OAAO,CAACL,IAAI,CAAC;KACzB,CAAC,OAAOM,GAAG,EAAE;MACZ1B,cAAc,CAAC2B,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;;EAEtD,CAAC;EAED,MAAME,OAAO,GAAyBA,CAAA,KAAMvB,IAAI;EAEhD,MAAMwB,iBAAiB,GAAmCA,CAAA,KAAM,CAAC,CAACxB,IAAI;EAEtE,OAAO;IACLuB,OAAO;IACPlB,eAAe;IACfH,QAAQ;IACRsB,iBAAiB;IACjBX;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}