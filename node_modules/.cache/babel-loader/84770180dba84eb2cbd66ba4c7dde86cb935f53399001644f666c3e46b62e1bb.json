{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ENVIRONMENT, parseEnvironment } from '../../utils/environment';\nimport { _globalThis } from './globalThis';\n/**\n * Gets the environment variables\n */\nexport function getEnv() {\n  var globalEnv = parseEnvironment(_globalThis);\n  return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);\n}","map":{"version":3,"names":["DEFAULT_ENVIRONMENT","parseEnvironment","_globalThis","getEnv","globalEnv","Object","assign"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/platform/browser/environment.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\nimport { _globalThis } from './globalThis';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const globalEnv = parseEnvironment(\n    _globalThis as typeof globalThis & RAW_ENVIRONMENT\n  );\n  return Object.assign({}, DEFAULT_ENVIRONMENT, globalEnv);\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SACEA,mBAAmB,EAGnBC,gBAAgB,QACX,yBAAyB;AAChC,SAASC,WAAW,QAAQ,cAAc;AAE1C;;;AAGA,OAAM,SAAUC,MAAMA,CAAA;EACpB,IAAMC,SAAS,GAAGH,gBAAgB,CAChCC,WAAkD,CACnD;EACD,OAAOG,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEN,mBAAmB,EAAEI,SAAS,CAAC;AAC1D"},"metadata":{},"sourceType":"module","externalDependencies":[]}