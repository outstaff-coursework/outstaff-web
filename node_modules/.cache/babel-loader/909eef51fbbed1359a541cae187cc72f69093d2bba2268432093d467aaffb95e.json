{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n  delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n  try {\n    delegateHandler(ex);\n  } catch (_a) {} // eslint-disable-line no-empty\n}","map":{"version":3,"names":["loggingErrorHandler","delegateHandler","setGlobalErrorHandler","handler","globalErrorHandler","ex","_a"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/common/global-error-handler.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAASA,mBAAmB,QAAQ,yBAAyB;AAG7D;AACA,IAAIC,eAAe,GAAGD,mBAAmB,EAAE;AAE3C;;;;AAIA,OAAM,SAAUE,qBAAqBA,CAACC,OAAqB;EACzDF,eAAe,GAAGE,OAAO;AAC3B;AAEA;;;;AAIA,OAAM,SAAUC,kBAAkBA,CAACC,EAAa;EAC9C,IAAI;IACFJ,eAAe,CAACI,EAAE,CAAC;GACpB,CAAC,OAAAC,EAAA,EAAM,EAAE,CAAC;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}