{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\nimport { DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR } from './AggregationSelector';\n/* eslint-disable no-console */\nvar ConsoleMetricExporter = /** @class */function () {\n  function ConsoleMetricExporter(options) {\n    var _a;\n    this._shutdown = false;\n    this._temporalitySelector = (_a = options === null || options === void 0 ? void 0 : options.temporalitySelector) !== null && _a !== void 0 ? _a : DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n  }\n  ConsoleMetricExporter.prototype.export = function (metrics, resultCallback) {\n    if (this._shutdown) {\n      // If the exporter is shutting down, by spec, we need to return FAILED as export result\n      setImmediate(resultCallback, {\n        code: ExportResultCode.FAILED\n      });\n      return;\n    }\n    return ConsoleMetricExporter._sendMetrics(metrics, resultCallback);\n  };\n  ConsoleMetricExporter.prototype.forceFlush = function () {\n    return Promise.resolve();\n  };\n  ConsoleMetricExporter.prototype.selectAggregationTemporality = function (_instrumentType) {\n    return this._temporalitySelector(_instrumentType);\n  };\n  ConsoleMetricExporter.prototype.shutdown = function () {\n    this._shutdown = true;\n    return Promise.resolve();\n  };\n  ConsoleMetricExporter._sendMetrics = function (metrics, done) {\n    var e_1, _a, e_2, _b;\n    try {\n      for (var _c = __values(metrics.scopeMetrics), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var scopeMetrics = _d.value;\n        try {\n          for (var _e = (e_2 = void 0, __values(scopeMetrics.metrics)), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var metric = _f.value;\n            console.dir({\n              descriptor: metric.descriptor,\n              dataPointType: metric.dataPointType,\n              dataPoints: metric.dataPoints\n            });\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    done({\n      code: ExportResultCode.SUCCESS\n    });\n  };\n  return ConsoleMetricExporter;\n}();\nexport { ConsoleMetricExporter };","map":{"version":3,"names":["ExportResultCode","DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR","ConsoleMetricExporter","options","_shutdown","_temporalitySelector","_a","temporalitySelector","prototype","export","metrics","resultCallback","setImmediate","code","FAILED","_sendMetrics","forceFlush","Promise","resolve","selectAggregationTemporality","_instrumentType","shutdown","done","_c","__values","scopeMetrics","_d","next","value","_e","e_2","_f","metric","console","dir","descriptor","dataPointType","dataPoints","SUCCESS"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/export/ConsoleMetricExporter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\nimport {\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\ninterface ConsoleMetricExporterOptions {\n  temporalitySelector?: AggregationTemporalitySelector;\n}\n\n/* eslint-disable no-console */\nexport class ConsoleMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _temporalitySelector: AggregationTemporalitySelector;\n\n  constructor(options?: ConsoleMetricExporterOptions) {\n    this._temporalitySelector =\n      options?.temporalitySelector ?? DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdown) {\n      // If the exporter is shutting down, by spec, we need to return FAILED as export result\n      setImmediate(resultCallback, { code: ExportResultCode.FAILED });\n      return;\n    }\n\n    return ConsoleMetricExporter._sendMetrics(metrics, resultCallback);\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._temporalitySelector(_instrumentType);\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n\n  private static _sendMetrics(\n    metrics: ResourceMetrics,\n    done: (result: ExportResult) => void\n  ): void {\n    for (const scopeMetrics of metrics.scopeMetrics) {\n      for (const metric of scopeMetrics.metrics) {\n        console.dir({\n          descriptor: metric.descriptor,\n          dataPointType: metric.dataPointType,\n          dataPoints: metric.dataPoints,\n        });\n      }\n    }\n\n    done({ code: ExportResultCode.SUCCESS });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeA,SAAuBA,gBAAgB,QAAQ,qBAAqB;AAKpE,SAEEC,wCAAwC,QACnC,uBAAuB;AAM9B;AACA,IAAAC,qBAAA;EAIE,SAAAA,sBAAYC,OAAsC;;IAHxC,KAAAC,SAAS,GAAG,KAAK;IAIzB,IAAI,CAACC,oBAAoB,GACvB,CAAAC,EAAA,GAAAH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,mBAAmB,cAAAD,EAAA,cAAAA,EAAA,GAAIL,wCAAwC;EAC5E;EAEAC,qBAAA,CAAAM,SAAA,CAAAC,MAAM,GAAN,UACEC,OAAwB,EACxBC,cAA8C;IAE9C,IAAI,IAAI,CAACP,SAAS,EAAE;MAClB;MACAQ,YAAY,CAACD,cAAc,EAAE;QAAEE,IAAI,EAAEb,gBAAgB,CAACc;MAAM,CAAE,CAAC;MAC/D;;IAGF,OAAOZ,qBAAqB,CAACa,YAAY,CAACL,OAAO,EAAEC,cAAc,CAAC;EACpE,CAAC;EAEDT,qBAAA,CAAAM,SAAA,CAAAQ,UAAU,GAAV;IACE,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EAEDhB,qBAAA,CAAAM,SAAA,CAAAW,4BAA4B,GAA5B,UACEC,eAA+B;IAE/B,OAAO,IAAI,CAACf,oBAAoB,CAACe,eAAe,CAAC;EACnD,CAAC;EAEDlB,qBAAA,CAAAM,SAAA,CAAAa,QAAQ,GAAR;IACE,IAAI,CAACjB,SAAS,GAAG,IAAI;IACrB,OAAOa,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EAEchB,qBAAA,CAAAa,YAAY,GAA3B,UACEL,OAAwB,EACxBY,IAAoC;;;MAEpC,KAA2B,IAAAC,EAAA,GAAAC,QAAA,CAAAd,OAAO,CAACe,YAAY,GAAAC,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAJ,IAAA,EAAAI,EAAA,GAAAH,EAAA,CAAAI,IAAA,IAAE;QAA5C,IAAMF,YAAY,GAAAC,EAAA,CAAAE,KAAA;;UACrB,KAAqB,IAAAC,EAAA,IAAAC,GAAA,WAAAN,QAAA,CAAAC,YAAY,CAACf,OAAO,IAAAqB,EAAA,GAAAF,EAAA,CAAAF,IAAA,KAAAI,EAAA,CAAAT,IAAA,EAAAS,EAAA,GAAAF,EAAA,CAAAF,IAAA,IAAE;YAAtC,IAAMK,MAAM,GAAAD,EAAA,CAAAH,KAAA;YACfK,OAAO,CAACC,GAAG,CAAC;cACVC,UAAU,EAAEH,MAAM,CAACG,UAAU;cAC7BC,aAAa,EAAEJ,MAAM,CAACI,aAAa;cACnCC,UAAU,EAAEL,MAAM,CAACK;aACpB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;IAINf,IAAI,CAAC;MAAET,IAAI,EAAEb,gBAAgB,CAACsC;IAAO,CAAE,CAAC;EAC1C,CAAC;EACH,OAAApC,qBAAC;AAAD,CAAC,CArDD"},"metadata":{},"sourceType":"module","externalDependencies":[]}