{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function getIncompatibilityDetails(existing, otherDescriptor) {\n  var incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += \"\\t- Unit '\" + existing.unit + \"' does not match '\" + otherDescriptor.unit + \"'\\n\";\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += \"\\t- Type '\" + existing.type + \"' does not match '\" + otherDescriptor.type + \"'\\n\";\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += \"\\t- Value Type '\" + existing.valueType + \"' does not match '\" + otherDescriptor.valueType + \"'\\n\";\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += \"\\t- Description '\" + existing.description + \"' does not match '\" + otherDescriptor.description + \"'\\n\";\n  }\n  return incompatibility;\n}\nexport function getValueTypeConflictResolutionRecipe(existing, otherDescriptor) {\n  return \"\\t- use valueType '\" + existing.valueType + \"' on instrument creation or use an instrument name other than '\" + otherDescriptor.name + \"'\";\n}\nexport function getUnitConflictResolutionRecipe(existing, otherDescriptor) {\n  return \"\\t- use unit '\" + existing.unit + \"' on instrument creation or use an instrument name other than '\" + otherDescriptor.name + \"'\";\n}\nexport function getTypeConflictResolutionRecipe(existing, otherDescriptor) {\n  var selector = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit\n  };\n  var selectorString = JSON.stringify(selector);\n  return \"\\t- create a new view with a name other than '\" + existing.name + \"' and InstrumentSelector '\" + selectorString + \"'\";\n}\nexport function getDescriptionResolutionRecipe(existing, otherDescriptor) {\n  var selector = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit\n  };\n  var selectorString = JSON.stringify(selector);\n  return \"\\t- create a new view with a name other than '\" + existing.name + \"' and InstrumentSelector '\" + selectorString + \"'\\n    \\t- OR - create a new view with the name \" + existing.name + \" and description '\" + existing.description + \"' and InstrumentSelector \" + selectorString + \"\\n    \\t- OR - create a new view with the name \" + otherDescriptor.name + \" and description '\" + existing.description + \"' and InstrumentSelector \" + selectorString;\n}\nexport function getConflictResolutionRecipe(existing, otherDescriptor) {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n  return '';\n}","map":{"version":3,"names":["getIncompatibilityDetails","existing","otherDescriptor","incompatibility","unit","type","valueType","description","getValueTypeConflictResolutionRecipe","name","getUnitConflictResolutionRecipe","getTypeConflictResolutionRecipe","selector","selectorString","JSON","stringify","getDescriptionResolutionRecipe","getConflictResolutionRecipe"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/view/RegistrationConflicts.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentSelectorCriteria } from './InstrumentSelector';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\n\nexport function getIncompatibilityDetails(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  let incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += `\\t- Unit '${existing.unit}' does not match '${otherDescriptor.unit}'\\n`;\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += `\\t- Type '${existing.type}' does not match '${otherDescriptor.type}'\\n`;\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += `\\t- Value Type '${existing.valueType}' does not match '${otherDescriptor.valueType}'\\n`;\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += `\\t- Description '${existing.description}' does not match '${otherDescriptor.description}'\\n`;\n  }\n\n  return incompatibility;\n}\n\nexport function getValueTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use valueType '${existing.valueType}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getUnitConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use unit '${existing.unit}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'`;\n}\n\nexport function getDescriptionResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'\n    \\t- OR - create a new view with the name ${existing.name} and description '${existing.description}' and InstrumentSelector ${selectorString}\n    \\t- OR - create a new view with the name ${otherDescriptor.name} and description '${existing.description}' and InstrumentSelector ${selectorString}`;\n}\n\nexport function getConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n\n  return '';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}