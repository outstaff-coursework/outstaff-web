{"ast":null,"code":"import { toAttributes } from '../common/internal';\nexport function sdkSpanToOtlpSpan(span, encoder) {\n  var _a;\n  var ctx = span.spanContext();\n  var status = span.status;\n  return {\n    traceId: encoder.encodeSpanContext(ctx.traceId),\n    spanId: encoder.encodeSpanContext(ctx.spanId),\n    parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),\n    traceState: (_a = ctx.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n    endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(function (event) {\n      return toOtlpSpanEvent(event, encoder);\n    }),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code,\n      message: status.message\n    },\n    links: span.links.map(function (link) {\n      return toOtlpLink(link, encoder);\n    }),\n    droppedLinksCount: span.droppedLinksCount\n  };\n}\nexport function toOtlpLink(link, encoder) {\n  var _a;\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: encoder.encodeSpanContext(link.context.spanId),\n    traceId: encoder.encodeSpanContext(link.context.traceId),\n    traceState: (_a = link.context.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0\n  };\n}\nexport function toOtlpSpanEvent(timedEvent, encoder) {\n  return {\n    attributes: timedEvent.attributes ? toAttributes(timedEvent.attributes) : [],\n    name: timedEvent.name,\n    timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0\n  };\n}","map":{"version":3,"names":["toAttributes","sdkSpanToOtlpSpan","span","encoder","ctx","spanContext","status","traceId","encodeSpanContext","spanId","parentSpanId","encodeOptionalSpanContext","traceState","_a","serialize","name","kind","startTimeUnixNano","encodeHrTime","startTime","endTimeUnixNano","endTime","attributes","droppedAttributesCount","events","map","event","toOtlpSpanEvent","droppedEventsCount","code","message","links","link","toOtlpLink","droppedLinksCount","context","timedEvent","timeUnixNano","time"],"sources":["/home/egor/node_modules/@opentelemetry/otlp-transformer/src/trace/internal.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport type { Encoder } from '../common';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, encoder: Encoder): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  return {\n    traceId: encoder.encodeSpanContext(ctx.traceId),\n    spanId: encoder.encodeSpanContext(ctx.spanId),\n    parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),\n    traceState: ctx.traceState?.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n    endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(event => toOtlpSpanEvent(event, encoder)),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, encoder)),\n    droppedLinksCount: span.droppedLinksCount,\n  };\n}\n\nexport function toOtlpLink(link: Link, encoder: Encoder): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: encoder.encodeSpanContext(link.context.spanId),\n    traceId: encoder.encodeSpanContext(link.context.traceId),\n    traceState: link.context.traceState?.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0,\n  };\n}\n\nexport function toOtlpSpanEvent(\n  timedEvent: TimedEvent,\n  encoder: Encoder\n): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n  };\n}\n"],"mappings":"AAkBA,SAASA,YAAY,QAAQ,oBAAoB;AAGjD,OAAM,SAAUC,iBAAiBA,CAACC,IAAkB,EAAEC,OAAgB;;EACpE,IAAMC,GAAG,GAAGF,IAAI,CAACG,WAAW,EAAE;EAC9B,IAAMC,MAAM,GAAGJ,IAAI,CAACI,MAAM;EAC1B,OAAO;IACLC,OAAO,EAAEJ,OAAO,CAACK,iBAAiB,CAACJ,GAAG,CAACG,OAAO,CAAC;IAC/CE,MAAM,EAAEN,OAAO,CAACK,iBAAiB,CAACJ,GAAG,CAACK,MAAM,CAAC;IAC7CC,YAAY,EAAEP,OAAO,CAACQ,yBAAyB,CAACT,IAAI,CAACQ,YAAY,CAAC;IAClEE,UAAU,EAAE,CAAAC,EAAA,GAAAT,GAAG,CAACQ,UAAU,cAAAC,EAAA,uBAAAA,EAAA,CAAEC,SAAS,EAAE;IACvCC,IAAI,EAAEb,IAAI,CAACa,IAAI;IACf;IACAC,IAAI,EAAEd,IAAI,CAACc,IAAI,IAAI,IAAI,GAAG,CAAC,GAAGd,IAAI,CAACc,IAAI,GAAG,CAAC;IAC3CC,iBAAiB,EAAEd,OAAO,CAACe,YAAY,CAAChB,IAAI,CAACiB,SAAS,CAAC;IACvDC,eAAe,EAAEjB,OAAO,CAACe,YAAY,CAAChB,IAAI,CAACmB,OAAO,CAAC;IACnDC,UAAU,EAAEtB,YAAY,CAACE,IAAI,CAACoB,UAAU,CAAC;IACzCC,sBAAsB,EAAErB,IAAI,CAACqB,sBAAsB;IACnDC,MAAM,EAAEtB,IAAI,CAACsB,MAAM,CAACC,GAAG,CAAC,UAAAC,KAAK;MAAI,OAAAC,eAAe,CAACD,KAAK,EAAEvB,OAAO,CAAC;IAA/B,CAA+B,CAAC;IACjEyB,kBAAkB,EAAE1B,IAAI,CAAC0B,kBAAkB;IAC3CtB,MAAM,EAAE;MACN;MACAuB,IAAI,EAAEvB,MAAM,CAACuB,IAA8B;MAC3CC,OAAO,EAAExB,MAAM,CAACwB;KACjB;IACDC,KAAK,EAAE7B,IAAI,CAAC6B,KAAK,CAACN,GAAG,CAAC,UAAAO,IAAI;MAAI,OAAAC,UAAU,CAACD,IAAI,EAAE7B,OAAO,CAAC;IAAzB,CAAyB,CAAC;IACxD+B,iBAAiB,EAAEhC,IAAI,CAACgC;GACzB;AACH;AAEA,OAAM,SAAUD,UAAUA,CAACD,IAAU,EAAE7B,OAAgB;;EACrD,OAAO;IACLmB,UAAU,EAAEU,IAAI,CAACV,UAAU,GAAGtB,YAAY,CAACgC,IAAI,CAACV,UAAU,CAAC,GAAG,EAAE;IAChEb,MAAM,EAAEN,OAAO,CAACK,iBAAiB,CAACwB,IAAI,CAACG,OAAO,CAAC1B,MAAM,CAAC;IACtDF,OAAO,EAAEJ,OAAO,CAACK,iBAAiB,CAACwB,IAAI,CAACG,OAAO,CAAC5B,OAAO,CAAC;IACxDK,UAAU,EAAE,CAAAC,EAAA,GAAAmB,IAAI,CAACG,OAAO,CAACvB,UAAU,cAAAC,EAAA,uBAAAA,EAAA,CAAEC,SAAS,EAAE;IAChDS,sBAAsB,EAAES,IAAI,CAACT,sBAAsB,IAAI;GACxD;AACH;AAEA,OAAM,SAAUI,eAAeA,CAC7BS,UAAsB,EACtBjC,OAAgB;EAEhB,OAAO;IACLmB,UAAU,EAAEc,UAAU,CAACd,UAAU,GAC7BtB,YAAY,CAACoC,UAAU,CAACd,UAAU,CAAC,GACnC,EAAE;IACNP,IAAI,EAAEqB,UAAU,CAACrB,IAAI;IACrBsB,YAAY,EAAElC,OAAO,CAACe,YAAY,CAACkB,UAAU,CAACE,IAAI,CAAC;IACnDf,sBAAsB,EAAEa,UAAU,CAACb,sBAAsB,IAAI;GAC9D;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}