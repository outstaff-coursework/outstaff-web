{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AggregatorKind } from './types';\n/** Basic aggregator for None which keeps no recorded value. */\nvar DropAggregator = /** @class */function () {\n  function DropAggregator() {\n    this.kind = AggregatorKind.DROP;\n  }\n  DropAggregator.prototype.createAccumulation = function () {\n    return undefined;\n  };\n  DropAggregator.prototype.merge = function (_previous, _delta) {\n    return undefined;\n  };\n  DropAggregator.prototype.diff = function (_previous, _current) {\n    return undefined;\n  };\n  DropAggregator.prototype.toMetricData = function (_descriptor, _aggregationTemporality, _accumulationByAttributes, _endTime) {\n    return undefined;\n  };\n  return DropAggregator;\n}();\nexport { DropAggregator };","map":{"version":3,"names":["AggregatorKind","DropAggregator","kind","DROP","prototype","createAccumulation","undefined","merge","_previous","_delta","diff","_current","toMetricData","_descriptor","_aggregationTemporality","_accumulationByAttributes","_endTime"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Drop.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData, MetricDescriptor } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregatorKind, Aggregator, AccumulationRecord } from './types';\n\n/** Basic aggregator for None which keeps no recorded value. */\nexport class DropAggregator implements Aggregator<undefined> {\n  kind: AggregatorKind.DROP = AggregatorKind.DROP;\n\n  createAccumulation() {\n    return undefined;\n  }\n\n  merge(_previous: undefined, _delta: undefined) {\n    return undefined;\n  }\n\n  diff(_previous: undefined, _current: undefined) {\n    return undefined;\n  }\n\n  toMetricData(\n    _descriptor: MetricDescriptor,\n    _aggregationTemporality: AggregationTemporality,\n    _accumulationByAttributes: AccumulationRecord<undefined>[],\n    _endTime: HrTime\n  ): Maybe<MetricData> {\n    return undefined;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAoBA,SAASA,cAAc,QAAwC,SAAS;AAExE;AACA,IAAAC,cAAA;EAAA,SAAAA,eAAA;IACE,KAAAC,IAAI,GAAwBF,cAAc,CAACG,IAAI;EAsBjD;EApBEF,cAAA,CAAAG,SAAA,CAAAC,kBAAkB,GAAlB;IACE,OAAOC,SAAS;EAClB,CAAC;EAEDL,cAAA,CAAAG,SAAA,CAAAG,KAAK,GAAL,UAAMC,SAAoB,EAAEC,MAAiB;IAC3C,OAAOH,SAAS;EAClB,CAAC;EAEDL,cAAA,CAAAG,SAAA,CAAAM,IAAI,GAAJ,UAAKF,SAAoB,EAAEG,QAAmB;IAC5C,OAAOL,SAAS;EAClB,CAAC;EAEDL,cAAA,CAAAG,SAAA,CAAAQ,YAAY,GAAZ,UACEC,WAA6B,EAC7BC,uBAA+C,EAC/CC,yBAA0D,EAC1DC,QAAgB;IAEhB,OAAOV,SAAS;EAClB,CAAC;EACH,OAAAL,cAAC;AAAD,CAAC,CAvBD"},"metadata":{},"sourceType":"module","externalDependencies":[]}