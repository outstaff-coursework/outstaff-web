{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { context, propagation, trace, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { otperformance, TRACE_PARENT_HEADER } from '@opentelemetry/core';\nimport { addSpanNetworkEvent, addSpanNetworkEvents, hasKey, PerformanceTimingNames as PTN } from '@opentelemetry/sdk-trace-web';\nimport { InstrumentationBase, safeExecuteInTheMiddle } from '@opentelemetry/instrumentation';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { VERSION } from './version';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { addSpanPerformancePaintEvents, getPerformanceNavigationEntries } from './utils';\n/**\n * This class represents a document load plugin\n */\nvar DocumentLoadInstrumentation = /** @class */function (_super) {\n  __extends(DocumentLoadInstrumentation, _super);\n  /**\n   *\n   * @param config\n   */\n  function DocumentLoadInstrumentation(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this, '@opentelemetry/instrumentation-document-load', VERSION, config) || this;\n    _this.component = 'document-load';\n    _this.version = '1';\n    _this.moduleName = _this.component;\n    return _this;\n  }\n  DocumentLoadInstrumentation.prototype.init = function () {};\n  /**\n   * callback to be executed when page is loaded\n   */\n  DocumentLoadInstrumentation.prototype._onDocumentLoaded = function () {\n    var _this = this;\n    // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd.\n    // Support for event \"loadend\" is very limited and cannot be used\n    window.setTimeout(function () {\n      _this._collectPerformance();\n    });\n  };\n  /**\n   * Adds spans for all resources\n   * @param rootSpan\n   */\n  DocumentLoadInstrumentation.prototype._addResourcesSpans = function (rootSpan) {\n    var _this = this;\n    var _a, _b;\n    var resources = (_b = (_a = otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'resource');\n    if (resources) {\n      resources.forEach(function (resource) {\n        _this._initResourceSpan(resource, rootSpan);\n      });\n    }\n  };\n  /**\n   * Collects information about performance and creates appropriate spans\n   */\n  DocumentLoadInstrumentation.prototype._collectPerformance = function () {\n    var _this = this;\n    var metaElement = Array.from(document.getElementsByTagName('meta')).find(function (e) {\n      return e.getAttribute('name') === TRACE_PARENT_HEADER;\n    });\n    var entries = getPerformanceNavigationEntries();\n    var traceparent = metaElement && metaElement.content || '';\n    context.with(propagation.extract(ROOT_CONTEXT, {\n      traceparent: traceparent\n    }), function () {\n      var _a;\n      var rootSpan = _this._startSpan(AttributeNames.DOCUMENT_LOAD, PTN.FETCH_START, entries);\n      if (!rootSpan) {\n        return;\n      }\n      context.with(trace.setSpan(context.active(), rootSpan), function () {\n        var fetchSpan = _this._startSpan(AttributeNames.DOCUMENT_FETCH, PTN.FETCH_START, entries);\n        if (fetchSpan) {\n          fetchSpan.setAttribute(SemanticAttributes.HTTP_URL, location.href);\n          context.with(trace.setSpan(context.active(), fetchSpan), function () {\n            var _a;\n            addSpanNetworkEvents(fetchSpan, entries);\n            _this._addCustomAttributesOnSpan(fetchSpan, (_a = _this._getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.documentFetch);\n            _this._endSpan(fetchSpan, PTN.RESPONSE_END, entries);\n          });\n        }\n      });\n      rootSpan.setAttribute(SemanticAttributes.HTTP_URL, location.href);\n      rootSpan.setAttribute(SemanticAttributes.HTTP_USER_AGENT, navigator.userAgent);\n      _this._addResourcesSpans(rootSpan);\n      addSpanNetworkEvent(rootSpan, PTN.FETCH_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_END, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_INTERACTIVE, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_CONTENT_LOADED_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_CONTENT_LOADED_EVENT_END, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_COMPLETE, entries);\n      addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_END, entries);\n      addSpanPerformancePaintEvents(rootSpan);\n      _this._addCustomAttributesOnSpan(rootSpan, (_a = _this._getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.documentLoad);\n      _this._endSpan(rootSpan, PTN.LOAD_EVENT_END, entries);\n    });\n  };\n  /**\n   * Helper function for ending span\n   * @param span\n   * @param performanceName name of performance entry for time end\n   * @param entries\n   */\n  DocumentLoadInstrumentation.prototype._endSpan = function (span, performanceName, entries) {\n    // span can be undefined when entries are missing the certain performance - the span will not be created\n    if (span) {\n      if (hasKey(entries, performanceName)) {\n        span.end(entries[performanceName]);\n      } else {\n        // just end span\n        span.end();\n      }\n    }\n  };\n  /**\n   * Creates and ends a span with network information about resource added as timed events\n   * @param resource\n   * @param parentSpan\n   */\n  DocumentLoadInstrumentation.prototype._initResourceSpan = function (resource, parentSpan) {\n    var _a;\n    var span = this._startSpan(AttributeNames.RESOURCE_FETCH, PTN.FETCH_START, resource, parentSpan);\n    if (span) {\n      span.setAttribute(SemanticAttributes.HTTP_URL, resource.name);\n      addSpanNetworkEvents(span, resource);\n      this._addCustomAttributesOnResourceSpan(span, resource, (_a = this._getConfig().applyCustomAttributesOnSpan) === null || _a === void 0 ? void 0 : _a.resourceFetch);\n      this._endSpan(span, PTN.RESPONSE_END, resource);\n    }\n  };\n  /**\n   * Helper function for starting a span\n   * @param spanName name of span\n   * @param performanceName name of performance entry for time start\n   * @param entries\n   * @param parentSpan\n   */\n  DocumentLoadInstrumentation.prototype._startSpan = function (spanName, performanceName, entries, parentSpan) {\n    if (hasKey(entries, performanceName) && typeof entries[performanceName] === 'number') {\n      var span = this.tracer.startSpan(spanName, {\n        startTime: entries[performanceName]\n      }, parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined);\n      return span;\n    }\n    return undefined;\n  };\n  /**\n   * executes callback {_onDocumentLoaded} when the page is loaded\n   */\n  DocumentLoadInstrumentation.prototype._waitForPageLoad = function () {\n    if (window.document.readyState === 'complete') {\n      this._onDocumentLoaded();\n    } else {\n      this._onDocumentLoaded = this._onDocumentLoaded.bind(this);\n      window.addEventListener('load', this._onDocumentLoaded);\n    }\n  };\n  DocumentLoadInstrumentation.prototype._getConfig = function () {\n    return this._config;\n  };\n  /**\n   * adds custom attributes to root span if configured\n   */\n  DocumentLoadInstrumentation.prototype._addCustomAttributesOnSpan = function (span, applyCustomAttributesOnSpan) {\n    var _this = this;\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(function () {\n        return applyCustomAttributesOnSpan(span);\n      }, function (error) {\n        if (!error) {\n          return;\n        }\n        _this._diag.error('addCustomAttributesOnSpan', error);\n      }, true);\n    }\n  };\n  /**\n   * adds custom attributes to span if configured\n   */\n  DocumentLoadInstrumentation.prototype._addCustomAttributesOnResourceSpan = function (span, resource, applyCustomAttributesOnSpan) {\n    var _this = this;\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(function () {\n        return applyCustomAttributesOnSpan(span, resource);\n      }, function (error) {\n        if (!error) {\n          return;\n        }\n        _this._diag.error('addCustomAttributesOnResourceSpan', error);\n      }, true);\n    }\n  };\n  /**\n   * implements enable function\n   */\n  DocumentLoadInstrumentation.prototype.enable = function () {\n    // remove previously attached load to avoid adding the same event twice\n    // in case of multiple enable calling.\n    window.removeEventListener('load', this._onDocumentLoaded);\n    this._waitForPageLoad();\n  };\n  /**\n   * implements disable function\n   */\n  DocumentLoadInstrumentation.prototype.disable = function () {\n    window.removeEventListener('load', this._onDocumentLoaded);\n  };\n  return DocumentLoadInstrumentation;\n}(InstrumentationBase);\nexport { DocumentLoadInstrumentation };","map":{"version":3,"names":["context","propagation","trace","ROOT_CONTEXT","otperformance","TRACE_PARENT_HEADER","addSpanNetworkEvent","addSpanNetworkEvents","hasKey","PerformanceTimingNames","PTN","InstrumentationBase","safeExecuteInTheMiddle","AttributeNames","VERSION","SemanticAttributes","addSpanPerformancePaintEvents","getPerformanceNavigationEntries","DocumentLoadInstrumentation","_super","__extends","config","_this","call","component","version","moduleName","prototype","init","_onDocumentLoaded","window","setTimeout","_collectPerformance","_addResourcesSpans","rootSpan","resources","_b","_a","getEntriesByType","forEach","resource","_initResourceSpan","metaElement","Array","from","document","getElementsByTagName","find","e","getAttribute","entries","traceparent","content","with","extract","_startSpan","DOCUMENT_LOAD","FETCH_START","setSpan","active","fetchSpan","DOCUMENT_FETCH","setAttribute","HTTP_URL","location","href","_addCustomAttributesOnSpan","_getConfig","applyCustomAttributesOnSpan","documentFetch","_endSpan","RESPONSE_END","HTTP_USER_AGENT","navigator","userAgent","UNLOAD_EVENT_START","UNLOAD_EVENT_END","DOM_INTERACTIVE","DOM_CONTENT_LOADED_EVENT_START","DOM_CONTENT_LOADED_EVENT_END","DOM_COMPLETE","LOAD_EVENT_START","LOAD_EVENT_END","documentLoad","span","performanceName","end","parentSpan","RESOURCE_FETCH","name","_addCustomAttributesOnResourceSpan","resourceFetch","spanName","tracer","startSpan","startTime","undefined","_waitForPageLoad","readyState","bind","addEventListener","_config","error","_diag","enable","removeEventListener","disable"],"sources":["/home/egor/node_modules/@opentelemetry/instrumentation-document-load/src/instrumentation.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  propagation,\n  trace,\n  Span,\n  ROOT_CONTEXT,\n} from '@opentelemetry/api';\nimport { otperformance, TRACE_PARENT_HEADER } from '@opentelemetry/core';\nimport {\n  addSpanNetworkEvent,\n  addSpanNetworkEvents,\n  hasKey,\n  PerformanceEntries,\n  PerformanceTimingNames as PTN,\n} from '@opentelemetry/sdk-trace-web';\nimport {\n  InstrumentationBase,\n  safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport {\n  DocumentLoadCustomAttributeFunction,\n  DocumentLoadInstrumentationConfig,\n  ResourceFetchCustomAttributeFunction,\n} from './types';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { VERSION } from './version';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport {\n  addSpanPerformancePaintEvents,\n  getPerformanceNavigationEntries,\n} from './utils';\n\n/**\n * This class represents a document load plugin\n */\nexport class DocumentLoadInstrumentation extends InstrumentationBase<unknown> {\n  readonly component: string = 'document-load';\n  readonly version: string = '1';\n  moduleName = this.component;\n\n  /**\n   *\n   * @param config\n   */\n  constructor(config: DocumentLoadInstrumentationConfig = {}) {\n    super('@opentelemetry/instrumentation-document-load', VERSION, config);\n  }\n\n  init() {}\n\n  /**\n   * callback to be executed when page is loaded\n   */\n  private _onDocumentLoaded() {\n    // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd.\n    // Support for event \"loadend\" is very limited and cannot be used\n    window.setTimeout(() => {\n      this._collectPerformance();\n    });\n  }\n\n  /**\n   * Adds spans for all resources\n   * @param rootSpan\n   */\n  private _addResourcesSpans(rootSpan: Span): void {\n    const resources: PerformanceResourceTiming[] = (\n      otperformance as unknown as Performance\n    ).getEntriesByType?.('resource') as PerformanceResourceTiming[];\n    if (resources) {\n      resources.forEach(resource => {\n        this._initResourceSpan(resource, rootSpan);\n      });\n    }\n  }\n\n  /**\n   * Collects information about performance and creates appropriate spans\n   */\n  private _collectPerformance() {\n    const metaElement = Array.from(document.getElementsByTagName('meta')).find(\n      e => e.getAttribute('name') === TRACE_PARENT_HEADER\n    );\n    const entries = getPerformanceNavigationEntries();\n    const traceparent = (metaElement && metaElement.content) || '';\n    context.with(propagation.extract(ROOT_CONTEXT, { traceparent }), () => {\n      const rootSpan = this._startSpan(\n        AttributeNames.DOCUMENT_LOAD,\n        PTN.FETCH_START,\n        entries\n      );\n      if (!rootSpan) {\n        return;\n      }\n      context.with(trace.setSpan(context.active(), rootSpan), () => {\n        const fetchSpan = this._startSpan(\n          AttributeNames.DOCUMENT_FETCH,\n          PTN.FETCH_START,\n          entries\n        );\n        if (fetchSpan) {\n          fetchSpan.setAttribute(SemanticAttributes.HTTP_URL, location.href);\n          context.with(trace.setSpan(context.active(), fetchSpan), () => {\n            addSpanNetworkEvents(fetchSpan, entries);\n            this._addCustomAttributesOnSpan(\n              fetchSpan,\n              this._getConfig().applyCustomAttributesOnSpan?.documentFetch\n            );\n            this._endSpan(fetchSpan, PTN.RESPONSE_END, entries);\n          });\n        }\n      });\n\n      rootSpan.setAttribute(SemanticAttributes.HTTP_URL, location.href);\n      rootSpan.setAttribute(\n        SemanticAttributes.HTTP_USER_AGENT,\n        navigator.userAgent\n      );\n\n      this._addResourcesSpans(rootSpan);\n\n      addSpanNetworkEvent(rootSpan, PTN.FETCH_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_END, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_INTERACTIVE, entries);\n      addSpanNetworkEvent(\n        rootSpan,\n        PTN.DOM_CONTENT_LOADED_EVENT_START,\n        entries\n      );\n      addSpanNetworkEvent(rootSpan, PTN.DOM_CONTENT_LOADED_EVENT_END, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_COMPLETE, entries);\n      addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_END, entries);\n\n      addSpanPerformancePaintEvents(rootSpan);\n      this._addCustomAttributesOnSpan(\n        rootSpan,\n        this._getConfig().applyCustomAttributesOnSpan?.documentLoad\n      );\n      this._endSpan(rootSpan, PTN.LOAD_EVENT_END, entries);\n    });\n  }\n\n  /**\n   * Helper function for ending span\n   * @param span\n   * @param performanceName name of performance entry for time end\n   * @param entries\n   */\n  private _endSpan(\n    span: Span | undefined,\n    performanceName: string,\n    entries: PerformanceEntries\n  ) {\n    // span can be undefined when entries are missing the certain performance - the span will not be created\n    if (span) {\n      if (hasKey(entries, performanceName)) {\n        span.end(entries[performanceName]);\n      } else {\n        // just end span\n        span.end();\n      }\n    }\n  }\n\n  /**\n   * Creates and ends a span with network information about resource added as timed events\n   * @param resource\n   * @param parentSpan\n   */\n  private _initResourceSpan(\n    resource: PerformanceResourceTiming,\n    parentSpan: Span\n  ) {\n    const span = this._startSpan(\n      AttributeNames.RESOURCE_FETCH,\n      PTN.FETCH_START,\n      resource,\n      parentSpan\n    );\n    if (span) {\n      span.setAttribute(SemanticAttributes.HTTP_URL, resource.name);\n      addSpanNetworkEvents(span, resource);\n      this._addCustomAttributesOnResourceSpan(\n        span,\n        resource,\n        this._getConfig().applyCustomAttributesOnSpan?.resourceFetch\n      );\n      this._endSpan(span, PTN.RESPONSE_END, resource);\n    }\n  }\n\n  /**\n   * Helper function for starting a span\n   * @param spanName name of span\n   * @param performanceName name of performance entry for time start\n   * @param entries\n   * @param parentSpan\n   */\n  private _startSpan(\n    spanName: string,\n    performanceName: string,\n    entries: PerformanceEntries,\n    parentSpan?: Span\n  ): Span | undefined {\n    if (\n      hasKey(entries, performanceName) &&\n      typeof entries[performanceName] === 'number'\n    ) {\n      const span = this.tracer.startSpan(\n        spanName,\n        {\n          startTime: entries[performanceName],\n        },\n        parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined\n      );\n      return span;\n    }\n    return undefined;\n  }\n\n  /**\n   * executes callback {_onDocumentLoaded} when the page is loaded\n   */\n  private _waitForPageLoad() {\n    if (window.document.readyState === 'complete') {\n      this._onDocumentLoaded();\n    } else {\n      this._onDocumentLoaded = this._onDocumentLoaded.bind(this);\n      window.addEventListener('load', this._onDocumentLoaded);\n    }\n  }\n\n  private _getConfig(): DocumentLoadInstrumentationConfig {\n    return this._config;\n  }\n  /**\n   * adds custom attributes to root span if configured\n   */\n  private _addCustomAttributesOnSpan(\n    span: Span,\n    applyCustomAttributesOnSpan: DocumentLoadCustomAttributeFunction | undefined\n  ) {\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () => applyCustomAttributesOnSpan(span),\n        error => {\n          if (!error) {\n            return;\n          }\n\n          this._diag.error('addCustomAttributesOnSpan', error);\n        },\n        true\n      );\n    }\n  }\n\n  /**\n   * adds custom attributes to span if configured\n   */\n  private _addCustomAttributesOnResourceSpan(\n    span: Span,\n    resource: PerformanceResourceTiming,\n    applyCustomAttributesOnSpan:\n      | ResourceFetchCustomAttributeFunction\n      | undefined\n  ) {\n    if (applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () => applyCustomAttributesOnSpan(span, resource),\n        error => {\n          if (!error) {\n            return;\n          }\n\n          this._diag.error('addCustomAttributesOnResourceSpan', error);\n        },\n        true\n      );\n    }\n  }\n\n  /**\n   * implements enable function\n   */\n  override enable() {\n    // remove previously attached load to avoid adding the same event twice\n    // in case of multiple enable calling.\n    window.removeEventListener('load', this._onDocumentLoaded);\n    this._waitForPageLoad();\n  }\n\n  /**\n   * implements disable function\n   */\n  override disable() {\n    window.removeEventListener('load', this._onDocumentLoaded);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}