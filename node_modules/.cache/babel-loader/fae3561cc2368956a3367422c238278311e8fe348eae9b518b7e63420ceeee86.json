{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Aggregation } from '../view/Aggregation';\nimport { AggregationTemporality } from './AggregationTemporality';\nexport var DEFAULT_AGGREGATION_SELECTOR = function (_instrumentType) {\n  return Aggregation.Default();\n};\nexport var DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR = function (_instrumentType) {\n  return AggregationTemporality.CUMULATIVE;\n};","map":{"version":3,"names":["Aggregation","AggregationTemporality","DEFAULT_AGGREGATION_SELECTOR","_instrumentType","Default","DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR","CUMULATIVE"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationSelector.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Aggregation } from '../view/Aggregation';\nimport { AggregationTemporality } from './AggregationTemporality';\n\n/**\n * Aggregation selector based on metric instrument types.\n */\nexport type AggregationSelector = (\n  instrumentType: InstrumentType\n) => Aggregation;\n\n/**\n * Aggregation temporality selector based on metric instrument types.\n */\nexport type AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => AggregationTemporality;\n\nexport const DEFAULT_AGGREGATION_SELECTOR: AggregationSelector =\n  _instrumentType => Aggregation.Default();\nexport const DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR: AggregationTemporalitySelector =\n  _instrumentType => AggregationTemporality.CUMULATIVE;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAASA,WAAW,QAAQ,qBAAqB;AACjD,SAASC,sBAAsB,QAAQ,0BAA0B;AAgBjE,OAAO,IAAMC,4BAA4B,GACvC,SAAAA,CAAAC,eAAe;EAAI,OAAAH,WAAW,CAACI,OAAO,EAAE;AAArB,CAAqB;AAC1C,OAAO,IAAMC,wCAAwC,GACnD,SAAAA,CAAAF,eAAe;EAAI,OAAAF,sBAAsB,CAACK,UAAU;AAAjC,CAAiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}