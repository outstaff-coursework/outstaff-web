{"ast":null,"code":"import { faro } from '@grafana/faro-core';\nexport const webStorageType = {\n  session: 'sessionStorage',\n  local: 'localStorage'\n};\n// TODO: remove default storage type from all function\n/**\n * Check if selected web storage mechanism is available.\n * @param type storage mechanism to test availability for.\n * @returns\n */\nexport function isWebStorageAvailable(type) {\n  var _a;\n  try {\n    let storage;\n    storage = window[type];\n    const testItem = '__faro_storage_test__';\n    storage.setItem(testItem, testItem);\n    storage.removeItem(testItem);\n    return true;\n  } catch (error) {\n    // the above can throw\n    (_a = faro.internalLogger) === null || _a === void 0 ? void 0 : _a.info(\"Web storage of type \".concat(type, \" is not available. Reason: \").concat(error));\n    return false;\n  }\n}\n/**\n * Get item from SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function getItem(key, webStorageMechanism) {\n  if (isWebStorageTypeAvailable(webStorageMechanism)) {\n    return window[webStorageMechanism].getItem(key);\n  }\n  return null;\n}\n/**\n * Store item in SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param value: the item data.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function setItem(key, value, webStorageMechanism) {\n  if (isWebStorageTypeAvailable(webStorageMechanism)) {\n    try {\n      window[webStorageMechanism].setItem(key, value);\n    } catch (error) {\n      // do nothing\n    }\n  }\n}\n/**\n * Remove item from SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function removeItem(key, webStorageMechanism) {\n  if (isWebStorageTypeAvailable(webStorageMechanism)) {\n    window[webStorageMechanism].removeItem(key);\n  }\n}\nexport const isLocalStorageAvailable = isWebStorageAvailable(webStorageType.local);\nexport const isSessionStorageAvailable = isWebStorageAvailable(webStorageType.session);\nfunction isWebStorageTypeAvailable(webStorageMechanism) {\n  if (webStorageMechanism === webStorageType.local) {\n    return isLocalStorageAvailable;\n  }\n  if (webStorageMechanism === webStorageType.session) {\n    return isSessionStorageAvailable;\n  }\n  return false;\n}","map":{"version":3,"names":["faro","webStorageType","session","local","isWebStorageAvailable","type","storage","window","testItem","setItem","removeItem","error","_a","internalLogger","info","concat","getItem","key","webStorageMechanism","isWebStorageTypeAvailable","value","isLocalStorageAvailable","isSessionStorageAvailable"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/utils/webStorage.ts"],"sourcesContent":["import { faro } from '@grafana/faro-core';\n\nexport const webStorageType = {\n  session: 'sessionStorage',\n  local: 'localStorage',\n} as const;\n\ntype StorageMechanism = (typeof webStorageType)[keyof typeof webStorageType];\n\n// TODO: remove default storage type from all function\n\n/**\n * Check if selected web storage mechanism is available.\n * @param type storage mechanism to test availability for.\n * @returns\n */\nexport function isWebStorageAvailable(type: StorageMechanism): boolean {\n  try {\n    let storage;\n    storage = window[type];\n\n    const testItem = '__faro_storage_test__';\n    storage.setItem(testItem, testItem);\n    storage.removeItem(testItem);\n    return true;\n  } catch (error) {\n    // the above can throw\n    faro.internalLogger?.info(`Web storage of type ${type} is not available. Reason: ${error}`);\n    return false;\n  }\n}\n\n/**\n * Get item from SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function getItem(key: string, webStorageMechanism: StorageMechanism): string | null {\n  if (isWebStorageTypeAvailable(webStorageMechanism)) {\n    return window[webStorageMechanism].getItem(key);\n  }\n\n  return null;\n}\n\n/**\n * Store item in SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param value: the item data.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function setItem(key: string, value: string, webStorageMechanism: StorageMechanism): void {\n  if (isWebStorageTypeAvailable(webStorageMechanism)) {\n    try {\n      window[webStorageMechanism].setItem(key, value);\n    } catch (error) {\n      // do nothing\n    }\n  }\n}\n\n/**\n * Remove item from SessionStorage or LocalStorage.\n * @param key: the item key.\n * @param webStorageMechanism: wether the item shall be received form local storage or session storage. Defaults to local storage.\n */\nexport function removeItem(key: string, webStorageMechanism: StorageMechanism): void {\n  if (isWebStorageTypeAvailable(webStorageMechanism)) {\n    window[webStorageMechanism].removeItem(key);\n  }\n}\n\nexport const isLocalStorageAvailable = isWebStorageAvailable(webStorageType.local);\nexport const isSessionStorageAvailable = isWebStorageAvailable(webStorageType.session);\n\nfunction isWebStorageTypeAvailable(webStorageMechanism: StorageMechanism) {\n  if (webStorageMechanism === webStorageType.local) {\n    return isLocalStorageAvailable;\n  }\n\n  if (webStorageMechanism === webStorageType.session) {\n    return isSessionStorageAvailable;\n  }\n\n  return false;\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,oBAAoB;AAEzC,OAAO,MAAMC,cAAc,GAAG;EAC5BC,OAAO,EAAE,gBAAgB;EACzBC,KAAK,EAAE;CACC;AAIV;AAEA;;;;;AAKA,OAAM,SAAUC,qBAAqBA,CAACC,IAAsB;;EAC1D,IAAI;IACF,IAAIC,OAAO;IACXA,OAAO,GAAGC,MAAM,CAACF,IAAI,CAAC;IAEtB,MAAMG,QAAQ,GAAG,uBAAuB;IACxCF,OAAO,CAACG,OAAO,CAACD,QAAQ,EAAEA,QAAQ,CAAC;IACnCF,OAAO,CAACI,UAAU,CAACF,QAAQ,CAAC;IAC5B,OAAO,IAAI;GACZ,CAAC,OAAOG,KAAK,EAAE;IACd;IACA,CAAAC,EAAA,GAAAZ,IAAI,CAACa,cAAc,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,IAAI,wBAAAC,MAAA,CAAwBV,IAAI,iCAAAU,MAAA,CAA8BJ,KAAK,CAAE,CAAC;IAC3F,OAAO,KAAK;;AAEhB;AAEA;;;;;AAKA,OAAM,SAAUK,OAAOA,CAACC,GAAW,EAAEC,mBAAqC;EACxE,IAAIC,yBAAyB,CAACD,mBAAmB,CAAC,EAAE;IAClD,OAAOX,MAAM,CAACW,mBAAmB,CAAC,CAACF,OAAO,CAACC,GAAG,CAAC;;EAGjD,OAAO,IAAI;AACb;AAEA;;;;;;AAMA,OAAM,SAAUR,OAAOA,CAACQ,GAAW,EAAEG,KAAa,EAAEF,mBAAqC;EACvF,IAAIC,yBAAyB,CAACD,mBAAmB,CAAC,EAAE;IAClD,IAAI;MACFX,MAAM,CAACW,mBAAmB,CAAC,CAACT,OAAO,CAACQ,GAAG,EAAEG,KAAK,CAAC;KAChD,CAAC,OAAOT,KAAK,EAAE;MACd;IAAA;;AAGN;AAEA;;;;;AAKA,OAAM,SAAUD,UAAUA,CAACO,GAAW,EAAEC,mBAAqC;EAC3E,IAAIC,yBAAyB,CAACD,mBAAmB,CAAC,EAAE;IAClDX,MAAM,CAACW,mBAAmB,CAAC,CAACR,UAAU,CAACO,GAAG,CAAC;;AAE/C;AAEA,OAAO,MAAMI,uBAAuB,GAAGjB,qBAAqB,CAACH,cAAc,CAACE,KAAK,CAAC;AAClF,OAAO,MAAMmB,yBAAyB,GAAGlB,qBAAqB,CAACH,cAAc,CAACC,OAAO,CAAC;AAEtF,SAASiB,yBAAyBA,CAACD,mBAAqC;EACtE,IAAIA,mBAAmB,KAAKjB,cAAc,CAACE,KAAK,EAAE;IAChD,OAAOkB,uBAAuB;;EAGhC,IAAIH,mBAAmB,KAAKjB,cAAc,CAACC,OAAO,EAAE;IAClD,OAAOoB,yBAAyB;;EAGlC,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}