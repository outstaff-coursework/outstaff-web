{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as api from '@opentelemetry/api';\nimport { FlatMap, callWithTimeout } from '../utils';\nimport { DEFAULT_AGGREGATION_SELECTOR, DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR } from './AggregationSelector';\n/**\n * A registered reader of metrics that, when linked to a {@link MetricProducer}, offers global\n * control over metrics.\n */\nvar MetricReader = /** @class */function () {\n  function MetricReader(options) {\n    var _a, _b, _c;\n    // Tracks the shutdown state.\n    // TODO: use BindOncePromise here once a new version of @opentelemetry/core is available.\n    this._shutdown = false;\n    this._aggregationSelector = (_a = options === null || options === void 0 ? void 0 : options.aggregationSelector) !== null && _a !== void 0 ? _a : DEFAULT_AGGREGATION_SELECTOR;\n    this._aggregationTemporalitySelector = (_b = options === null || options === void 0 ? void 0 : options.aggregationTemporalitySelector) !== null && _b !== void 0 ? _b : DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n    this._metricProducers = (_c = options === null || options === void 0 ? void 0 : options.metricProducers) !== null && _c !== void 0 ? _c : [];\n  }\n  /**\n   * Set the {@link MetricProducer} used by this instance. **This should only be called by the\n   * SDK and should be considered internal.**\n   *\n   * To add additional {@link MetricProducer}s to a {@link MetricReader}, pass them to the\n   * constructor as {@link MetricReaderOptions.metricProducers}.\n   *\n   * @internal\n   * @param metricProducer\n   */\n  MetricReader.prototype.setMetricProducer = function (metricProducer) {\n    if (this._sdkMetricProducer) {\n      throw new Error('MetricReader can not be bound to a MeterProvider again.');\n    }\n    this._sdkMetricProducer = metricProducer;\n    this.onInitialized();\n  };\n  /**\n   * Select the {@link Aggregation} for the given {@link InstrumentType} for this\n   * reader.\n   */\n  MetricReader.prototype.selectAggregation = function (instrumentType) {\n    return this._aggregationSelector(instrumentType);\n  };\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this reader.\n   */\n  MetricReader.prototype.selectAggregationTemporality = function (instrumentType) {\n    return this._aggregationTemporalitySelector(instrumentType);\n  };\n  /**\n   * Handle once the SDK has initialized this {@link MetricReader}\n   * Overriding this method is optional.\n   */\n  MetricReader.prototype.onInitialized = function () {\n    // Default implementation is empty.\n  };\n  /**\n   * Collect all metrics from the associated {@link MetricProducer}\n   */\n  MetricReader.prototype.collect = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, sdkCollectionResults, additionalCollectionResults, errors, resource, scopeMetrics;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this._sdkMetricProducer === undefined) {\n              throw new Error('MetricReader is not bound to a MetricProducer');\n            }\n            // Subsequent invocations to collect are not allowed. SDKs SHOULD return some failure for these calls.\n            if (this._shutdown) {\n              throw new Error('MetricReader is shutdown');\n            }\n            return [4 /*yield*/, Promise.all(__spreadArray([this._sdkMetricProducer.collect({\n              timeoutMillis: options === null || options === void 0 ? void 0 : options.timeoutMillis\n            })], __read(this._metricProducers.map(function (producer) {\n              return producer.collect({\n                timeoutMillis: options === null || options === void 0 ? void 0 : options.timeoutMillis\n              });\n            })), false))];\n          case 1:\n            _a = __read.apply(void 0, [_b.sent()]), sdkCollectionResults = _a[0], additionalCollectionResults = _a.slice(1);\n            errors = sdkCollectionResults.errors.concat(FlatMap(additionalCollectionResults, function (result) {\n              return result.errors;\n            }));\n            resource = sdkCollectionResults.resourceMetrics.resource;\n            scopeMetrics = sdkCollectionResults.resourceMetrics.scopeMetrics.concat(FlatMap(additionalCollectionResults, function (result) {\n              return result.resourceMetrics.scopeMetrics;\n            }));\n            return [2 /*return*/, {\n              resourceMetrics: {\n                resource: resource,\n                scopeMetrics: scopeMetrics\n              },\n              errors: errors\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Shuts down the metric reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  MetricReader.prototype.shutdown = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Do not call shutdown again if it has already been called.\n            if (this._shutdown) {\n              api.diag.error('Cannot call shutdown twice.');\n              return [2 /*return*/];\n            }\n\n            if (!((options === null || options === void 0 ? void 0 : options.timeoutMillis) == null)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.onShutdown()];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, callWithTimeout(this.onShutdown(), options.timeoutMillis)];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            this._shutdown = true;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Flushes metrics read by this reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  MetricReader.prototype.forceFlush = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._shutdown) {\n              api.diag.warn('Cannot forceFlush on already shutdown MetricReader.');\n              return [2 /*return*/];\n            }\n\n            if (!((options === null || options === void 0 ? void 0 : options.timeoutMillis) == null)) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.onForceFlush()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n          case 2:\n            return [4 /*yield*/, callWithTimeout(this.onForceFlush(), options.timeoutMillis)];\n          case 3:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return MetricReader;\n}();\nexport { MetricReader };","map":{"version":3,"names":["api","FlatMap","callWithTimeout","DEFAULT_AGGREGATION_SELECTOR","DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR","MetricReader","options","_shutdown","_aggregationSelector","_a","aggregationSelector","_aggregationTemporalitySelector","_b","aggregationTemporalitySelector","_metricProducers","_c","metricProducers","prototype","setMetricProducer","metricProducer","_sdkMetricProducer","Error","onInitialized","selectAggregation","instrumentType","selectAggregationTemporality","collect","undefined","Promise","all","__spreadArray","timeoutMillis","map","producer","__read","apply","sent","sdkCollectionResults","additionalCollectionResults","slice","errors","concat","result","resource","resourceMetrics","scopeMetrics","shutdown","diag","error","onShutdown","forceFlush","warn","onForceFlush"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/export/MetricReader.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { MetricProducer } from './MetricProducer';\nimport { CollectionResult } from './MetricData';\nimport { FlatMap, callWithTimeout } from '../utils';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport {\n  CollectionOptions,\n  ForceFlushOptions,\n  ShutdownOptions,\n} from '../types';\nimport { Aggregation } from '../view/Aggregation';\nimport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_SELECTOR,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\nexport interface MetricReaderOptions {\n  /**\n   * Aggregation selector based on metric instrument types. If no views are\n   * configured for a metric instrument, a per-metric-reader aggregation is\n   * selected with this selector.\n   */\n  aggregationSelector?: AggregationSelector;\n  /**\n   * Aggregation temporality selector based on metric instrument types. If\n   * not configured, cumulative is used for all instruments.\n   */\n  aggregationTemporalitySelector?: AggregationTemporalitySelector;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n}\n\n/**\n * A registered reader of metrics that, when linked to a {@link MetricProducer}, offers global\n * control over metrics.\n */\nexport abstract class MetricReader {\n  // Tracks the shutdown state.\n  // TODO: use BindOncePromise here once a new version of @opentelemetry/core is available.\n  private _shutdown = false;\n  // Additional MetricProducers which will be combined with the SDK's output\n  private _metricProducers: MetricProducer[];\n  // MetricProducer used by this instance which produces metrics from the SDK\n  private _sdkMetricProducer?: MetricProducer;\n  private readonly _aggregationTemporalitySelector: AggregationTemporalitySelector;\n  private readonly _aggregationSelector: AggregationSelector;\n\n  constructor(options?: MetricReaderOptions) {\n    this._aggregationSelector =\n      options?.aggregationSelector ?? DEFAULT_AGGREGATION_SELECTOR;\n    this._aggregationTemporalitySelector =\n      options?.aggregationTemporalitySelector ??\n      DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n    this._metricProducers = options?.metricProducers ?? [];\n  }\n\n  /**\n   * Set the {@link MetricProducer} used by this instance. **This should only be called by the\n   * SDK and should be considered internal.**\n   *\n   * To add additional {@link MetricProducer}s to a {@link MetricReader}, pass them to the\n   * constructor as {@link MetricReaderOptions.metricProducers}.\n   *\n   * @internal\n   * @param metricProducer\n   */\n  setMetricProducer(metricProducer: MetricProducer) {\n    if (this._sdkMetricProducer) {\n      throw new Error(\n        'MetricReader can not be bound to a MeterProvider again.'\n      );\n    }\n    this._sdkMetricProducer = metricProducer;\n    this.onInitialized();\n  }\n\n  /**\n   * Select the {@link Aggregation} for the given {@link InstrumentType} for this\n   * reader.\n   */\n  selectAggregation(instrumentType: InstrumentType): Aggregation {\n    return this._aggregationSelector(instrumentType);\n  }\n\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this reader.\n   */\n  selectAggregationTemporality(\n    instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n\n  /**\n   * Handle once the SDK has initialized this {@link MetricReader}\n   * Overriding this method is optional.\n   */\n  protected onInitialized(): void {\n    // Default implementation is empty.\n  }\n\n  /**\n   * Handle a shutdown signal by the SDK.\n   *\n   * <p> For push exporters, this should shut down any intervals and close any open connections.\n   * @protected\n   */\n  protected abstract onShutdown(): Promise<void>;\n\n  /**\n   * Handle a force flush signal by the SDK.\n   *\n   * <p> In all scenarios metrics should be collected via {@link collect()}.\n   * <p> For push exporters, this should collect and report metrics.\n   * @protected\n   */\n  protected abstract onForceFlush(): Promise<void>;\n\n  /**\n   * Collect all metrics from the associated {@link MetricProducer}\n   */\n  async collect(options?: CollectionOptions): Promise<CollectionResult> {\n    if (this._sdkMetricProducer === undefined) {\n      throw new Error('MetricReader is not bound to a MetricProducer');\n    }\n\n    // Subsequent invocations to collect are not allowed. SDKs SHOULD return some failure for these calls.\n    if (this._shutdown) {\n      throw new Error('MetricReader is shutdown');\n    }\n\n    const [sdkCollectionResults, ...additionalCollectionResults] =\n      await Promise.all([\n        this._sdkMetricProducer.collect({\n          timeoutMillis: options?.timeoutMillis,\n        }),\n        ...this._metricProducers.map(producer =>\n          producer.collect({\n            timeoutMillis: options?.timeoutMillis,\n          })\n        ),\n      ]);\n\n    // Merge the results, keeping the SDK's Resource\n    const errors = sdkCollectionResults.errors.concat(\n      FlatMap(additionalCollectionResults, result => result.errors)\n    );\n    const resource = sdkCollectionResults.resourceMetrics.resource;\n    const scopeMetrics =\n      sdkCollectionResults.resourceMetrics.scopeMetrics.concat(\n        FlatMap(\n          additionalCollectionResults,\n          result => result.resourceMetrics.scopeMetrics\n        )\n      );\n    return {\n      resourceMetrics: {\n        resource,\n        scopeMetrics,\n      },\n      errors,\n    };\n  }\n\n  /**\n   * Shuts down the metric reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    // Do not call shutdown again if it has already been called.\n    if (this._shutdown) {\n      api.diag.error('Cannot call shutdown twice.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onShutdown();\n    } else {\n      await callWithTimeout(this.onShutdown(), options.timeoutMillis);\n    }\n\n    this._shutdown = true;\n  }\n\n  /**\n   * Flushes metrics read by this reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    if (this._shutdown) {\n      api.diag.warn('Cannot forceFlush on already shutdown MetricReader.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onForceFlush();\n      return;\n    }\n\n    await callWithTimeout(this.onForceFlush(), options.timeoutMillis);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}