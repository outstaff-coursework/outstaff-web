{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nvar EnvDetectorSync = /** @class */function () {\n  function EnvDetectorSync() {\n    // Type, attribute keys, and attribute values should not exceed 256 characters.\n    this._MAX_LENGTH = 255;\n    // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n    this._COMMA_SEPARATOR = ',';\n    // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n    this._LABEL_KEY_VALUE_SPLITTER = '=';\n    this._ERROR_MESSAGE_INVALID_CHARS = 'should be a ASCII string with a length greater than 0 and not exceed ' + this._MAX_LENGTH + ' characters.';\n    this._ERROR_MESSAGE_INVALID_VALUE = 'should be a ASCII string with a length not exceed ' + this._MAX_LENGTH + ' characters.';\n  }\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  EnvDetectorSync.prototype.detect = function (_config) {\n    var attributes = {};\n    var env = getEnv();\n    var rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    var serviceName = env.OTEL_SERVICE_NAME;\n    if (rawAttributes) {\n      try {\n        var parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(\"EnvDetector failed: \" + e.message);\n      }\n    }\n    if (serviceName) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n    return new Resource(attributes);\n  };\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespaces, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  EnvDetectorSync.prototype._parseResourceAttributes = function (rawEnvAttributes) {\n    var e_1, _a;\n    if (!rawEnvAttributes) return {};\n    var attributes = {};\n    var rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);\n    try {\n      for (var rawAttributes_1 = __values(rawAttributes), rawAttributes_1_1 = rawAttributes_1.next(); !rawAttributes_1_1.done; rawAttributes_1_1 = rawAttributes_1.next()) {\n        var rawAttribute = rawAttributes_1_1.value;\n        var keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);\n        if (keyValuePair.length !== 2) {\n          continue;\n        }\n        var _b = __read(keyValuePair, 2),\n          key = _b[0],\n          value = _b[1];\n        // Leading and trailing whitespaces are trimmed.\n        key = key.trim();\n        value = value.trim().split(/^\"|\"$/).join('');\n        if (!this._isValidAndNotEmpty(key)) {\n          throw new Error(\"Attribute key \" + this._ERROR_MESSAGE_INVALID_CHARS);\n        }\n        if (!this._isValid(value)) {\n          throw new Error(\"Attribute value \" + this._ERROR_MESSAGE_INVALID_VALUE);\n        }\n        attributes[key] = decodeURIComponent(value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (rawAttributes_1_1 && !rawAttributes_1_1.done && (_a = rawAttributes_1.return)) _a.call(rawAttributes_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return attributes;\n  };\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  EnvDetectorSync.prototype._isValid = function (name) {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  };\n  // https://www.w3.org/TR/baggage/#definition\n  EnvDetectorSync.prototype._isBaggageOctetString = function (str) {\n    for (var i = 0; i < str.length; i++) {\n      var ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  EnvDetectorSync.prototype._isValidAndNotEmpty = function (str) {\n    return str.length > 0 && this._isValid(str);\n  };\n  return EnvDetectorSync;\n}();\nexport var envDetectorSync = new EnvDetectorSync();","map":{"version":3,"names":["diag","getEnv","SemanticResourceAttributes","Resource","EnvDetectorSync","_MAX_LENGTH","_COMMA_SEPARATOR","_LABEL_KEY_VALUE_SPLITTER","_ERROR_MESSAGE_INVALID_CHARS","_ERROR_MESSAGE_INVALID_VALUE","prototype","detect","_config","attributes","env","rawAttributes","OTEL_RESOURCE_ATTRIBUTES","serviceName","OTEL_SERVICE_NAME","parsedAttributes","_parseResourceAttributes","Object","assign","e","debug","message","SERVICE_NAME","rawEnvAttributes","split","rawAttributes_1","__values","rawAttributes_1_1","next","done","rawAttribute","value","keyValuePair","length","_b","__read","key","trim","join","_isValidAndNotEmpty","Error","_isValid","decodeURIComponent","name","_isBaggageOctetString","str","i","ch","charCodeAt","envDetectorSync"],"sources":["/home/egor/node_modules/@opentelemetry/resources/src/detectors/EnvDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespaces, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}