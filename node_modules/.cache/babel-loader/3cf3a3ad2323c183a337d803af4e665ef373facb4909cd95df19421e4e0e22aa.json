{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */function () {\n  function Resource(\n  /**\n   * A dictionary of attributes with string keys and values that provide\n   * information about the entity as numbers, strings or booleans\n   * TODO: Consider to add check/validation on attributes.\n   */\n  attributes, asyncAttributesPromise) {\n    var _this = this;\n    var _a;\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n    this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n      _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n      _this.asyncAttributesPending = false;\n      return asyncAttributes;\n    }, function (err) {\n      diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n      _this.asyncAttributesPending = false;\n      return {};\n    });\n  }\n  /**\n   * Returns an empty Resource\n   */\n  Resource.empty = function () {\n    return Resource.EMPTY;\n  };\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  Resource.default = function () {\n    var _a;\n    return new Resource((_a = {}, _a[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(), _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE], _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME], _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION], _a));\n  };\n  Object.defineProperty(Resource.prototype, \"attributes\", {\n    get: function () {\n      var _a;\n      if (this.asyncAttributesPending) {\n        diag.error('Accessing resource attributes before async attributes settled');\n      }\n      return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  Resource.prototype.waitForAsyncAttributes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._asyncAttributesPromise];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  Resource.prototype.merge = function (other) {\n    var _this = this;\n    var _a;\n    if (!other) return this;\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), (_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes);\n    if (!this._asyncAttributesPromise && !other._asyncAttributesPromise) {\n      return new Resource(mergedSyncAttributes);\n    }\n    var mergedAttributesPromise = Promise.all([this._asyncAttributesPromise, other._asyncAttributesPromise]).then(function (_a) {\n      var _b;\n      var _c = __read(_a, 2),\n        thisAsyncAttributes = _c[0],\n        otherAsyncAttributes = _c[1];\n      return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), (_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes), otherAsyncAttributes);\n    });\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  };\n  Resource.EMPTY = new Resource({});\n  return Resource;\n}();\nexport { Resource };","map":{"version":3,"names":["diag","SemanticResourceAttributes","SDK_INFO","defaultServiceName","Resource","attributes","asyncAttributesPromise","_this","_attributes","asyncAttributesPending","_syncAttributes","_a","_asyncAttributesPromise","then","asyncAttributes","Object","assign","err","debug","empty","EMPTY","default","SERVICE_NAME","TELEMETRY_SDK_LANGUAGE","TELEMETRY_SDK_NAME","TELEMETRY_SDK_VERSION","defineProperty","prototype","get","error","waitForAsyncAttributes","sent","merge","other","mergedSyncAttributes","__assign","mergedAttributesPromise","Promise","all","_c","__read","thisAsyncAttributes","otherAsyncAttributes","_b"],"sources":["/home/egor/node_modules/@opentelemetry/resources/src/Resource.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: defaultServiceName(),\n      [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n      [SemanticResourceAttributes.TELEMETRY_SDK_NAME]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n      [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}