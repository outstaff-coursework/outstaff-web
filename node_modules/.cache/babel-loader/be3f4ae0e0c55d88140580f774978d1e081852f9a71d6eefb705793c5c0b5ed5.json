{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */function () {\n  function RandomIdGenerator() {\n    /**\n     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n     * characters corresponding to 128 bits.\n     */\n    this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n    /**\n     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n     * characters corresponding to 64 bits.\n     */\n    this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n  }\n  return RandomIdGenerator;\n}();\nexport { RandomIdGenerator };\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n  return function generateId() {\n    for (var i = 0; i < bytes * 2; i++) {\n      SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n      // valid hex characters in the range 48-57 and 97-102\n      if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n        SHARED_CHAR_CODES_ARRAY[i] += 39;\n      }\n    }\n    return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n  };\n}","map":{"version":3,"names":["SPAN_ID_BYTES","TRACE_ID_BYTES","RandomIdGenerator","generateTraceId","getIdGenerator","generateSpanId","SHARED_CHAR_CODES_ARRAY","Array","bytes","generateId","i","Math","floor","random","String","fromCharCode","apply","slice"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-base/src/platform/browser/RandomIdGenerator.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../IdGenerator';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes * 2; i++) {\n      SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n      // valid hex characters in the range 48-57 and 97-102\n      if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n        SHARED_CHAR_CODES_ARRAY[i] += 39;\n      }\n    }\n    return String.fromCharCode.apply(\n      null,\n      SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2)\n    );\n  };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,IAAMA,aAAa,GAAG,CAAC;AACvB,IAAMC,cAAc,GAAG,EAAE;AAEzB,IAAAC,iBAAA;EAAA,SAAAA,kBAAA;IACE;;;;IAIA,KAAAC,eAAe,GAAGC,cAAc,CAACH,cAAc,CAAC;IAEhD;;;;IAIA,KAAAI,cAAc,GAAGD,cAAc,CAACJ,aAAa,CAAC;EAChD;EAAA,OAAAE,iBAAC;AAAD,CAAC,CAZD;;AAcA,IAAMI,uBAAuB,GAAGC,KAAK,CAAC,EAAE,CAAC;AACzC,SAASH,cAAcA,CAACI,KAAa;EACnC,OAAO,SAASC,UAAUA,CAAA;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;MAClCJ,uBAAuB,CAACI,CAAC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;MAChE;MACA,IAAIP,uBAAuB,CAACI,CAAC,CAAC,IAAI,EAAE,EAAE;QACpCJ,uBAAuB,CAACI,CAAC,CAAC,IAAI,EAAE;;;IAGpC,OAAOI,MAAM,CAACC,YAAY,CAACC,KAAK,CAC9B,IAAI,EACJV,uBAAuB,CAACW,KAAK,CAAC,CAAC,EAAET,KAAK,GAAG,CAAC,CAAC,CAC5C;EACH,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}