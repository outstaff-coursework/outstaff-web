{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as api from '@opentelemetry/api';\nimport { internal, ExportResultCode, globalErrorHandler, unrefTimer } from '@opentelemetry/core';\nimport { MetricReader } from './MetricReader';\nimport { callWithTimeout, TimeoutError } from '../utils';\nimport { diag } from '@opentelemetry/api';\n/**\n * {@link MetricReader} which collects metrics based on a user-configurable time interval, and passes the metrics to\n * the configured {@link PushMetricExporter}\n */\nvar PeriodicExportingMetricReader = /** @class */function (_super) {\n  __extends(PeriodicExportingMetricReader, _super);\n  function PeriodicExportingMetricReader(options) {\n    var _a, _b, _c, _d;\n    var _this = _super.call(this, {\n      aggregationSelector: (_a = options.exporter.selectAggregation) === null || _a === void 0 ? void 0 : _a.bind(options.exporter),\n      aggregationTemporalitySelector: (_b = options.exporter.selectAggregationTemporality) === null || _b === void 0 ? void 0 : _b.bind(options.exporter),\n      metricProducers: options.metricProducers\n    }) || this;\n    if (options.exportIntervalMillis !== undefined && options.exportIntervalMillis <= 0) {\n      throw Error('exportIntervalMillis must be greater than 0');\n    }\n    if (options.exportTimeoutMillis !== undefined && options.exportTimeoutMillis <= 0) {\n      throw Error('exportTimeoutMillis must be greater than 0');\n    }\n    if (options.exportTimeoutMillis !== undefined && options.exportIntervalMillis !== undefined && options.exportIntervalMillis < options.exportTimeoutMillis) {\n      throw Error('exportIntervalMillis must be greater than or equal to exportTimeoutMillis');\n    }\n    _this._exportInterval = (_c = options.exportIntervalMillis) !== null && _c !== void 0 ? _c : 60000;\n    _this._exportTimeout = (_d = options.exportTimeoutMillis) !== null && _d !== void 0 ? _d : 30000;\n    _this._exporter = options.exporter;\n    return _this;\n  }\n  PeriodicExportingMetricReader.prototype._runOnce = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, callWithTimeout(this._doRun(), this._exportTimeout)];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            err_1 = _a.sent();\n            if (err_1 instanceof TimeoutError) {\n              api.diag.error('Export took longer than %s milliseconds and timed out.', this._exportTimeout);\n              return [2 /*return*/];\n            }\n\n            globalErrorHandler(err_1);\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PeriodicExportingMetricReader.prototype._doRun = function () {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, resourceMetrics, errors, doExport;\n      var _d;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            return [4 /*yield*/, this.collect({\n              timeoutMillis: this._exportTimeout\n            })];\n          case 1:\n            _c = _e.sent(), resourceMetrics = _c.resourceMetrics, errors = _c.errors;\n            if (errors.length > 0) {\n              (_d = api.diag).error.apply(_d, __spreadArray(['PeriodicExportingMetricReader: metrics collection errors'], __read(errors), false));\n            }\n            doExport = function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var result;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, internal._export(this._exporter, resourceMetrics)];\n                    case 1:\n                      result = _a.sent();\n                      if (result.code !== ExportResultCode.SUCCESS) {\n                        throw new Error(\"PeriodicExportingMetricReader: metrics export failed (error \" + result.error + \")\");\n                      }\n                      return [2 /*return*/];\n                  }\n                });\n              });\n            };\n\n            if (!resourceMetrics.resource.asyncAttributesPending) return [3 /*break*/, 2];\n            (_b = (_a = resourceMetrics.resource).waitForAsyncAttributes) === null || _b === void 0 ? void 0 : _b.call(_a).then(doExport, function (err) {\n              return diag.debug('Error while resolving async portion of resource: ', err);\n            });\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, doExport()];\n          case 3:\n            _e.sent();\n            _e.label = 4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PeriodicExportingMetricReader.prototype.onInitialized = function () {\n    var _this = this;\n    // start running the interval as soon as this reader is initialized and keep handle for shutdown.\n    this._interval = setInterval(function () {\n      // this._runOnce never rejects. Using void operator to suppress @typescript-eslint/no-floating-promises.\n      void _this._runOnce();\n    }, this._exportInterval);\n    unrefTimer(this._interval);\n  };\n  PeriodicExportingMetricReader.prototype.onForceFlush = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._runOnce()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this._exporter.forceFlush()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PeriodicExportingMetricReader.prototype.onShutdown = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._interval) {\n              clearInterval(this._interval);\n            }\n            return [4 /*yield*/, this._exporter.shutdown()];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return PeriodicExportingMetricReader;\n}(MetricReader);\nexport { PeriodicExportingMetricReader };","map":{"version":3,"names":["api","internal","ExportResultCode","globalErrorHandler","unrefTimer","MetricReader","callWithTimeout","TimeoutError","diag","PeriodicExportingMetricReader","_super","__extends","options","_this","call","aggregationSelector","_a","exporter","selectAggregation","bind","aggregationTemporalitySelector","_b","selectAggregationTemporality","metricProducers","exportIntervalMillis","undefined","Error","exportTimeoutMillis","_exportInterval","_c","_exportTimeout","_d","_exporter","prototype","_runOnce","_doRun","sent","err_1","error","collect","timeoutMillis","_e","resourceMetrics","errors","length","apply","__spreadArray","__read","doExport","__awaiter","_export","result","code","SUCCESS","resource","asyncAttributesPending","waitForAsyncAttributes","then","err","debug","onInitialized","_interval","setInterval","onForceFlush","forceFlush","onShutdown","clearInterval","shutdown"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/export/PeriodicExportingMetricReader.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { MetricReader } from './MetricReader';\nimport { PushMetricExporter } from './MetricExporter';\nimport { callWithTimeout, TimeoutError } from '../utils';\nimport { diag } from '@opentelemetry/api';\nimport { MetricProducer } from './MetricProducer';\n\nexport type PeriodicExportingMetricReaderOptions = {\n  /**\n   * The backing exporter for the metric reader.\n   */\n  exporter: PushMetricExporter;\n  /**\n   * An internal milliseconds for the metric reader to initiate metric\n   * collection.\n   */\n  exportIntervalMillis?: number;\n  /**\n   * Milliseconds for the async observable callback to timeout.\n   */\n  exportTimeoutMillis?: number;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n};\n\n/**\n * {@link MetricReader} which collects metrics based on a user-configurable time interval, and passes the metrics to\n * the configured {@link PushMetricExporter}\n */\nexport class PeriodicExportingMetricReader extends MetricReader {\n  private _interval?: ReturnType<typeof setInterval>;\n  private _exporter: PushMetricExporter;\n  private readonly _exportInterval: number;\n  private readonly _exportTimeout: number;\n\n  constructor(options: PeriodicExportingMetricReaderOptions) {\n    super({\n      aggregationSelector: options.exporter.selectAggregation?.bind(\n        options.exporter\n      ),\n      aggregationTemporalitySelector:\n        options.exporter.selectAggregationTemporality?.bind(options.exporter),\n      metricProducers: options.metricProducers,\n    });\n\n    if (\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis <= 0\n    ) {\n      throw Error('exportIntervalMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportTimeoutMillis <= 0\n    ) {\n      throw Error('exportTimeoutMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis < options.exportTimeoutMillis\n    ) {\n      throw Error(\n        'exportIntervalMillis must be greater than or equal to exportTimeoutMillis'\n      );\n    }\n\n    this._exportInterval = options.exportIntervalMillis ?? 60000;\n    this._exportTimeout = options.exportTimeoutMillis ?? 30000;\n    this._exporter = options.exporter;\n  }\n\n  private async _runOnce(): Promise<void> {\n    try {\n      await callWithTimeout(this._doRun(), this._exportTimeout);\n    } catch (err) {\n      if (err instanceof TimeoutError) {\n        api.diag.error(\n          'Export took longer than %s milliseconds and timed out.',\n          this._exportTimeout\n        );\n        return;\n      }\n\n      globalErrorHandler(err);\n    }\n  }\n\n  private async _doRun(): Promise<void> {\n    const { resourceMetrics, errors } = await this.collect({\n      timeoutMillis: this._exportTimeout,\n    });\n\n    if (errors.length > 0) {\n      api.diag.error(\n        'PeriodicExportingMetricReader: metrics collection errors',\n        ...errors\n      );\n    }\n\n    const doExport = async () => {\n      const result = await internal._export(this._exporter, resourceMetrics);\n      if (result.code !== ExportResultCode.SUCCESS) {\n        throw new Error(\n          `PeriodicExportingMetricReader: metrics export failed (error ${result.error})`\n        );\n      }\n    };\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (resourceMetrics.resource.asyncAttributesPending) {\n      resourceMetrics.resource\n        .waitForAsyncAttributes?.()\n        .then(doExport, err =>\n          diag.debug('Error while resolving async portion of resource: ', err)\n        );\n    } else {\n      await doExport();\n    }\n  }\n\n  protected override onInitialized(): void {\n    // start running the interval as soon as this reader is initialized and keep handle for shutdown.\n    this._interval = setInterval(() => {\n      // this._runOnce never rejects. Using void operator to suppress @typescript-eslint/no-floating-promises.\n      void this._runOnce();\n    }, this._exportInterval);\n    unrefTimer(this._interval);\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    await this._runOnce();\n    await this._exporter.forceFlush();\n  }\n\n  protected async onShutdown(): Promise<void> {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    await this._exporter.shutdown();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}