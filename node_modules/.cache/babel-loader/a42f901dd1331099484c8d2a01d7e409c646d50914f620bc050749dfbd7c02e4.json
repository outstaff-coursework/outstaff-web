{"ast":null,"code":"import { context, trace } from '@opentelemetry/api';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { W3CTraceContextPropagator } from '@opentelemetry/core';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { Resource } from '@opentelemetry/resources';\nimport { BatchSpanProcessor, WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { BaseInstrumentation, VERSION } from '@grafana/faro-web-sdk';\nimport { FaroTraceExporter } from './faroTraceExporter';\nimport { getDefaultOTELInstrumentations } from './getDefaultOTELInstrumentations';\nimport { FaroSessionSpanProcessor } from './sessionSpanProcessor';\n// the providing of app name here is not great\n// should delay initialization and provide the full Faro config,\n// taking app name from it\nexport class TracingInstrumentation extends BaseInstrumentation {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.options = options;\n    this.name = '@grafana/faro-web-tracing';\n    this.version = VERSION;\n  }\n  initialize() {\n    var _a, _b, _c, _d, _e;\n    const options = this.options;\n    const attributes = {};\n    if (this.config.app.name) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = this.config.app.name;\n    }\n    if (this.config.app.version) {\n      attributes[SemanticResourceAttributes.SERVICE_VERSION] = this.config.app.version;\n    }\n    if (this.config.app.environment) {\n      attributes[SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT] = this.config.app.environment;\n    }\n    Object.assign(attributes, options.resourceAttributes);\n    const resource = Resource.default().merge(new Resource(attributes));\n    const provider = new WebTracerProvider({\n      resource\n    });\n    provider.addSpanProcessor((_a = options.spanProcessor) !== null && _a !== void 0 ? _a : new FaroSessionSpanProcessor(new BatchSpanProcessor(new FaroTraceExporter({\n      api: this.api\n    }), {\n      scheduledDelayMillis: TracingInstrumentation.SCHEDULED_BATCH_DELAY_MS,\n      maxExportBatchSize: 30\n    }), this.metas));\n    provider.register({\n      propagator: (_b = options.propagator) !== null && _b !== void 0 ? _b : new W3CTraceContextPropagator(),\n      contextManager: (_c = options.contextManager) !== null && _c !== void 0 ? _c : new ZoneContextManager()\n    });\n    registerInstrumentations({\n      instrumentations: (_d = options.instrumentations) !== null && _d !== void 0 ? _d : getDefaultOTELInstrumentations({\n        ignoreUrls: this.getIgnoreUrls(),\n        propagateTraceHeaderCorsUrls: (_e = this.options.instrumentationOptions) === null || _e === void 0 ? void 0 : _e.propagateTraceHeaderCorsUrls\n      })\n    });\n    this.api.initOTEL(trace, context);\n  }\n  getIgnoreUrls() {\n    return this.transports.transports.flatMap(transport => transport.getIgnoreUrls());\n  }\n}\nTracingInstrumentation.SCHEDULED_BATCH_DELAY_MS = 1000;","map":{"version":3,"names":["context","trace","ZoneContextManager","W3CTraceContextPropagator","registerInstrumentations","Resource","BatchSpanProcessor","WebTracerProvider","SemanticResourceAttributes","BaseInstrumentation","VERSION","FaroTraceExporter","getDefaultOTELInstrumentations","FaroSessionSpanProcessor","TracingInstrumentation","constructor","options","arguments","length","undefined","name","version","initialize","attributes","config","app","SERVICE_NAME","SERVICE_VERSION","environment","DEPLOYMENT_ENVIRONMENT","Object","assign","resourceAttributes","resource","default","merge","provider","addSpanProcessor","_a","spanProcessor","api","scheduledDelayMillis","SCHEDULED_BATCH_DELAY_MS","maxExportBatchSize","metas","register","propagator","_b","contextManager","_c","instrumentations","_d","ignoreUrls","getIgnoreUrls","propagateTraceHeaderCorsUrls","_e","instrumentationOptions","initOTEL","transports","flatMap","transport"],"sources":["/home/egor/node_modules/@grafana/faro-web-tracing/src/instrumentation.ts"],"sourcesContent":["import { context, trace } from '@opentelemetry/api';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { W3CTraceContextPropagator } from '@opentelemetry/core';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { Resource, ResourceAttributes } from '@opentelemetry/resources';\nimport { BatchSpanProcessor, WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\n\nimport { BaseInstrumentation, Transport, VERSION } from '@grafana/faro-web-sdk';\n\nimport { FaroTraceExporter } from './faroTraceExporter';\nimport { getDefaultOTELInstrumentations } from './getDefaultOTELInstrumentations';\nimport { FaroSessionSpanProcessor } from './sessionSpanProcessor';\nimport type { TracingInstrumentationOptions } from './types';\n\n// the providing of app name here is not great\n// should delay initialization and provide the full Faro config,\n// taking app name from it\n\nexport class TracingInstrumentation extends BaseInstrumentation {\n  name = '@grafana/faro-web-tracing';\n  version = VERSION;\n\n  static SCHEDULED_BATCH_DELAY_MS = 1000;\n\n  constructor(private options: TracingInstrumentationOptions = {}) {\n    super();\n  }\n\n  initialize(): void {\n    const options = this.options;\n    const attributes: ResourceAttributes = {};\n\n    if (this.config.app.name) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = this.config.app.name;\n    }\n\n    if (this.config.app.version) {\n      attributes[SemanticResourceAttributes.SERVICE_VERSION] = this.config.app.version;\n    }\n\n    if (this.config.app.environment) {\n      attributes[SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT] = this.config.app.environment;\n    }\n\n    Object.assign(attributes, options.resourceAttributes);\n\n    const resource = Resource.default().merge(new Resource(attributes));\n\n    const provider = new WebTracerProvider({ resource });\n\n    provider.addSpanProcessor(\n      options.spanProcessor ??\n        new FaroSessionSpanProcessor(\n          new BatchSpanProcessor(new FaroTraceExporter({ api: this.api }), {\n            scheduledDelayMillis: TracingInstrumentation.SCHEDULED_BATCH_DELAY_MS,\n            maxExportBatchSize: 30,\n          }),\n          this.metas\n        )\n    );\n\n    provider.register({\n      propagator: options.propagator ?? new W3CTraceContextPropagator(),\n      contextManager: options.contextManager ?? new ZoneContextManager(),\n    });\n\n    registerInstrumentations({\n      instrumentations:\n        options.instrumentations ??\n        getDefaultOTELInstrumentations({\n          ignoreUrls: this.getIgnoreUrls(),\n          propagateTraceHeaderCorsUrls: this.options.instrumentationOptions?.propagateTraceHeaderCorsUrls,\n        }),\n    });\n\n    this.api.initOTEL(trace, context);\n  }\n\n  private getIgnoreUrls(): Array<string | RegExp> {\n    return this.transports.transports.flatMap((transport: Transport) => transport.getIgnoreUrls());\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}