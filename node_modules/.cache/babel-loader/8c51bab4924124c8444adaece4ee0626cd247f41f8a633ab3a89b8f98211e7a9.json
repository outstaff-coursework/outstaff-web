{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PerformanceTimingNames as PTN } from './enums/PerformanceTimingNames';\nimport { hrTimeToNanoseconds, timeInputToHrTime, urlMatches } from '@opentelemetry/core';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n// Used to normalize relative URLs\nvar urlNormalizingAnchor;\nfunction getUrlNormalizingAnchor() {\n  if (!urlNormalizingAnchor) {\n    urlNormalizingAnchor = document.createElement('a');\n  }\n  return urlNormalizingAnchor;\n}\n/**\n * Helper function to be able to use enum as typed key in type and in interface when using forEach\n * @param obj\n * @param key\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function hasKey(obj, key) {\n  return key in obj;\n}\n/**\n * Helper function for starting an event on span based on {@link PerformanceEntries}\n * @param span\n * @param performanceName name of performance entry for time start\n * @param entries\n */\nexport function addSpanNetworkEvent(span, performanceName, entries) {\n  if (hasKey(entries, performanceName) && typeof entries[performanceName] === 'number') {\n    span.addEvent(performanceName, entries[performanceName]);\n    return span;\n  }\n  return undefined;\n}\n/**\n * Helper function for adding network events\n * @param span\n * @param resource\n */\nexport function addSpanNetworkEvents(span, resource) {\n  addSpanNetworkEvent(span, PTN.FETCH_START, resource);\n  addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_START, resource);\n  addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_END, resource);\n  addSpanNetworkEvent(span, PTN.CONNECT_START, resource);\n  if (hasKey(resource, 'name') && resource['name'].startsWith('https:')) {\n    addSpanNetworkEvent(span, PTN.SECURE_CONNECTION_START, resource);\n  }\n  addSpanNetworkEvent(span, PTN.CONNECT_END, resource);\n  addSpanNetworkEvent(span, PTN.REQUEST_START, resource);\n  addSpanNetworkEvent(span, PTN.RESPONSE_START, resource);\n  addSpanNetworkEvent(span, PTN.RESPONSE_END, resource);\n  var encodedLength = resource[PTN.ENCODED_BODY_SIZE];\n  if (encodedLength !== undefined) {\n    span.setAttribute(SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH, encodedLength);\n  }\n  var decodedLength = resource[PTN.DECODED_BODY_SIZE];\n  // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)\n  if (decodedLength !== undefined && encodedLength !== decodedLength) {\n    span.setAttribute(SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, decodedLength);\n  }\n}\n/**\n * sort resources by startTime\n * @param filteredResources\n */\nexport function sortResources(filteredResources) {\n  return filteredResources.slice().sort(function (a, b) {\n    var valueA = a[PTN.FETCH_START];\n    var valueB = b[PTN.FETCH_START];\n    if (valueA > valueB) {\n      return 1;\n    } else if (valueA < valueB) {\n      return -1;\n    }\n    return 0;\n  });\n}\n/** Returns the origin if present (if in browser context). */\nfunction getOrigin() {\n  return typeof location !== 'undefined' ? location.origin : undefined;\n}\n/**\n * Get closest performance resource ignoring the resources that have been\n * already used.\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n * @param initiatorType\n */\nexport function getResource(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {\n  if (ignoredResources === void 0) {\n    ignoredResources = new WeakSet();\n  }\n  // de-relativize the URL before usage (does no harm to absolute URLs)\n  var parsedSpanUrl = parseUrl(spanUrl);\n  spanUrl = parsedSpanUrl.toString();\n  var filteredResources = filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType);\n  if (filteredResources.length === 0) {\n    return {\n      mainRequest: undefined\n    };\n  }\n  if (filteredResources.length === 1) {\n    return {\n      mainRequest: filteredResources[0]\n    };\n  }\n  var sorted = sortResources(filteredResources);\n  if (parsedSpanUrl.origin !== getOrigin() && sorted.length > 1) {\n    var corsPreFlightRequest = sorted[0];\n    var mainRequest = findMainRequest(sorted, corsPreFlightRequest[PTN.RESPONSE_END], endTimeHR);\n    var responseEnd = corsPreFlightRequest[PTN.RESPONSE_END];\n    var fetchStart = mainRequest[PTN.FETCH_START];\n    // no corsPreFlightRequest\n    if (fetchStart < responseEnd) {\n      mainRequest = corsPreFlightRequest;\n      corsPreFlightRequest = undefined;\n    }\n    return {\n      corsPreFlightRequest: corsPreFlightRequest,\n      mainRequest: mainRequest\n    };\n  } else {\n    return {\n      mainRequest: filteredResources[0]\n    };\n  }\n}\n/**\n * Will find the main request skipping the cors pre flight requests\n * @param resources\n * @param corsPreFlightRequestEndTime\n * @param spanEndTimeHR\n */\nfunction findMainRequest(resources, corsPreFlightRequestEndTime, spanEndTimeHR) {\n  var spanEndTime = hrTimeToNanoseconds(spanEndTimeHR);\n  var minTime = hrTimeToNanoseconds(timeInputToHrTime(corsPreFlightRequestEndTime));\n  var mainRequest = resources[1];\n  var bestGap;\n  var length = resources.length;\n  for (var i = 1; i < length; i++) {\n    var resource = resources[i];\n    var resourceStartTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.FETCH_START]));\n    var resourceEndTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.RESPONSE_END]));\n    var currentGap = spanEndTime - resourceEndTime;\n    if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {\n      bestGap = currentGap;\n      mainRequest = resource;\n    }\n  }\n  return mainRequest;\n}\n/**\n * Filter all resources that has started and finished according to span start time and end time.\n *     It will return the closest resource to a start time\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n */\nfunction filterResourcesForSpan(spanUrl, startTimeHR, endTimeHR, resources, ignoredResources, initiatorType) {\n  var startTime = hrTimeToNanoseconds(startTimeHR);\n  var endTime = hrTimeToNanoseconds(endTimeHR);\n  var filteredResources = resources.filter(function (resource) {\n    var resourceStartTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.FETCH_START]));\n    var resourceEndTime = hrTimeToNanoseconds(timeInputToHrTime(resource[PTN.RESPONSE_END]));\n    return resource.initiatorType.toLowerCase() === (initiatorType || 'xmlhttprequest') && resource.name === spanUrl && resourceStartTime >= startTime && resourceEndTime <= endTime;\n  });\n  if (filteredResources.length > 0) {\n    filteredResources = filteredResources.filter(function (resource) {\n      return !ignoredResources.has(resource);\n    });\n  }\n  return filteredResources;\n}\n/**\n * Parses url using URL constructor or fallback to anchor element.\n * @param url\n */\nexport function parseUrl(url) {\n  if (typeof URL === 'function') {\n    return new URL(url, typeof document !== 'undefined' ? document.baseURI : typeof location !== 'undefined' // Some JS runtimes (e.g. Deno) don't define this\n    ? location.href : undefined);\n  }\n  var element = getUrlNormalizingAnchor();\n  element.href = url;\n  return element;\n}\n/**\n * Parses url using URL constructor or fallback to anchor element and serialize\n * it to a string.\n *\n * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url\n *\n * @param url\n */\nexport function normalizeUrl(url) {\n  var urlLike = parseUrl(url);\n  return urlLike.href;\n}\n/**\n * Get element XPath\n * @param target - target element\n * @param optimised - when id attribute of element is present the xpath can be\n * simplified to contain id\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function getElementXPath(target, optimised) {\n  if (target.nodeType === Node.DOCUMENT_NODE) {\n    return '/';\n  }\n  var targetValue = getNodeValue(target, optimised);\n  if (optimised && targetValue.indexOf('@id') > 0) {\n    return targetValue;\n  }\n  var xpath = '';\n  if (target.parentNode) {\n    xpath += getElementXPath(target.parentNode, false);\n  }\n  xpath += targetValue;\n  return xpath;\n}\n/**\n * get node index within the siblings\n * @param target\n */\nfunction getNodeIndex(target) {\n  if (!target.parentNode) {\n    return 0;\n  }\n  var allowedTypes = [target.nodeType];\n  if (target.nodeType === Node.CDATA_SECTION_NODE) {\n    allowedTypes.push(Node.TEXT_NODE);\n  }\n  var elements = Array.from(target.parentNode.childNodes);\n  elements = elements.filter(function (element) {\n    var localName = element.localName;\n    return allowedTypes.indexOf(element.nodeType) >= 0 && localName === target.localName;\n  });\n  if (elements.length >= 1) {\n    return elements.indexOf(target) + 1; // xpath starts from 1\n  }\n  // if there are no other similar child xpath doesn't need index\n  return 0;\n}\n/**\n * get node value for xpath\n * @param target\n * @param optimised\n */\nfunction getNodeValue(target, optimised) {\n  var nodeType = target.nodeType;\n  var index = getNodeIndex(target);\n  var nodeValue = '';\n  if (nodeType === Node.ELEMENT_NODE) {\n    var id = target.getAttribute('id');\n    if (optimised && id) {\n      return \"//*[@id=\\\"\" + id + \"\\\"]\";\n    }\n    nodeValue = target.localName;\n  } else if (nodeType === Node.TEXT_NODE || nodeType === Node.CDATA_SECTION_NODE) {\n    nodeValue = 'text()';\n  } else if (nodeType === Node.COMMENT_NODE) {\n    nodeValue = 'comment()';\n  } else {\n    return '';\n  }\n  // if index is 1 it can be omitted in xpath\n  if (nodeValue && index > 1) {\n    return \"/\" + nodeValue + \"[\" + index + \"]\";\n  }\n  return \"/\" + nodeValue;\n}\n/**\n * Checks if trace headers should be propagated\n * @param spanUrl\n * @private\n */\nexport function shouldPropagateTraceHeaders(spanUrl, propagateTraceHeaderCorsUrls) {\n  var propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];\n  if (typeof propagateTraceHeaderUrls === 'string' || propagateTraceHeaderUrls instanceof RegExp) {\n    propagateTraceHeaderUrls = [propagateTraceHeaderUrls];\n  }\n  var parsedSpanUrl = parseUrl(spanUrl);\n  if (parsedSpanUrl.origin === getOrigin()) {\n    return true;\n  } else {\n    return propagateTraceHeaderUrls.some(function (propagateTraceHeaderUrl) {\n      return urlMatches(spanUrl, propagateTraceHeaderUrl);\n    });\n  }\n}","map":{"version":3,"names":["PerformanceTimingNames","PTN","hrTimeToNanoseconds","timeInputToHrTime","urlMatches","SemanticAttributes","urlNormalizingAnchor","getUrlNormalizingAnchor","document","createElement","hasKey","obj","key","addSpanNetworkEvent","span","performanceName","entries","addEvent","undefined","addSpanNetworkEvents","resource","FETCH_START","DOMAIN_LOOKUP_START","DOMAIN_LOOKUP_END","CONNECT_START","startsWith","SECURE_CONNECTION_START","CONNECT_END","REQUEST_START","RESPONSE_START","RESPONSE_END","encodedLength","ENCODED_BODY_SIZE","setAttribute","HTTP_RESPONSE_CONTENT_LENGTH","decodedLength","DECODED_BODY_SIZE","HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED","sortResources","filteredResources","slice","sort","a","b","valueA","valueB","getOrigin","location","origin","getResource","spanUrl","startTimeHR","endTimeHR","resources","ignoredResources","initiatorType","WeakSet","parsedSpanUrl","parseUrl","toString","filterResourcesForSpan","length","mainRequest","sorted","corsPreFlightRequest","findMainRequest","responseEnd","fetchStart","corsPreFlightRequestEndTime","spanEndTimeHR","spanEndTime","minTime","bestGap","i","resourceStartTime","resourceEndTime","currentGap","startTime","endTime","filter","toLowerCase","name","has","url","URL","baseURI","href","element","normalizeUrl","urlLike","getElementXPath","target","optimised","nodeType","Node","DOCUMENT_NODE","targetValue","getNodeValue","indexOf","xpath","parentNode","getNodeIndex","allowedTypes","CDATA_SECTION_NODE","push","TEXT_NODE","elements","Array","from","childNodes","localName","index","nodeValue","ELEMENT_NODE","id","getAttribute","COMMENT_NODE","shouldPropagateTraceHeaders","propagateTraceHeaderCorsUrls","propagateTraceHeaderUrls","RegExp","some","propagateTraceHeaderUrl"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-web/src/utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PerformanceEntries,\n  PerformanceResourceTimingInfo,\n  PropagateTraceHeaderCorsUrls,\n} from './types';\nimport { PerformanceTimingNames as PTN } from './enums/PerformanceTimingNames';\nimport * as api from '@opentelemetry/api';\nimport {\n  hrTimeToNanoseconds,\n  timeInputToHrTime,\n  urlMatches,\n} from '@opentelemetry/core';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\n// Used to normalize relative URLs\nlet urlNormalizingAnchor: HTMLAnchorElement | undefined;\nfunction getUrlNormalizingAnchor(): HTMLAnchorElement {\n  if (!urlNormalizingAnchor) {\n    urlNormalizingAnchor = document.createElement('a');\n  }\n\n  return urlNormalizingAnchor;\n}\n\n/**\n * Helper function to be able to use enum as typed key in type and in interface when using forEach\n * @param obj\n * @param key\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function hasKey<O extends object>(\n  obj: O,\n  key: keyof any\n): key is keyof O {\n  return key in obj;\n}\n\n/**\n * Helper function for starting an event on span based on {@link PerformanceEntries}\n * @param span\n * @param performanceName name of performance entry for time start\n * @param entries\n */\nexport function addSpanNetworkEvent(\n  span: api.Span,\n  performanceName: string,\n  entries: PerformanceEntries\n): api.Span | undefined {\n  if (\n    hasKey(entries, performanceName) &&\n    typeof entries[performanceName] === 'number'\n  ) {\n    span.addEvent(performanceName, entries[performanceName]);\n    return span;\n  }\n  return undefined;\n}\n\n/**\n * Helper function for adding network events\n * @param span\n * @param resource\n */\nexport function addSpanNetworkEvents(\n  span: api.Span,\n  resource: PerformanceEntries\n): void {\n  addSpanNetworkEvent(span, PTN.FETCH_START, resource);\n  addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_START, resource);\n  addSpanNetworkEvent(span, PTN.DOMAIN_LOOKUP_END, resource);\n  addSpanNetworkEvent(span, PTN.CONNECT_START, resource);\n  if (\n    hasKey(resource as PerformanceResourceTiming, 'name') &&\n    (resource as PerformanceResourceTiming)['name'].startsWith('https:')\n  ) {\n    addSpanNetworkEvent(span, PTN.SECURE_CONNECTION_START, resource);\n  }\n  addSpanNetworkEvent(span, PTN.CONNECT_END, resource);\n  addSpanNetworkEvent(span, PTN.REQUEST_START, resource);\n  addSpanNetworkEvent(span, PTN.RESPONSE_START, resource);\n  addSpanNetworkEvent(span, PTN.RESPONSE_END, resource);\n  const encodedLength = resource[PTN.ENCODED_BODY_SIZE];\n  if (encodedLength !== undefined) {\n    span.setAttribute(\n      SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH,\n      encodedLength\n    );\n  }\n  const decodedLength = resource[PTN.DECODED_BODY_SIZE];\n  // Spec: Not set if transport encoding not used (in which case encoded and decoded sizes match)\n  if (decodedLength !== undefined && encodedLength !== decodedLength) {\n    span.setAttribute(\n      SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n      decodedLength\n    );\n  }\n}\n\n/**\n * sort resources by startTime\n * @param filteredResources\n */\nexport function sortResources(\n  filteredResources: PerformanceResourceTiming[]\n): PerformanceResourceTiming[] {\n  return filteredResources.slice().sort((a, b) => {\n    const valueA = a[PTN.FETCH_START];\n    const valueB = b[PTN.FETCH_START];\n    if (valueA > valueB) {\n      return 1;\n    } else if (valueA < valueB) {\n      return -1;\n    }\n    return 0;\n  });\n}\n\n/** Returns the origin if present (if in browser context). */\nfunction getOrigin(): string | undefined {\n  return typeof location !== 'undefined' ? location.origin : undefined;\n}\n\n/**\n * Get closest performance resource ignoring the resources that have been\n * already used.\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n * @param initiatorType\n */\nexport function getResource(\n  spanUrl: string,\n  startTimeHR: api.HrTime,\n  endTimeHR: api.HrTime,\n  resources: PerformanceResourceTiming[],\n  ignoredResources: WeakSet<PerformanceResourceTiming> = new WeakSet<PerformanceResourceTiming>(),\n  initiatorType?: string\n): PerformanceResourceTimingInfo {\n  // de-relativize the URL before usage (does no harm to absolute URLs)\n  const parsedSpanUrl = parseUrl(spanUrl);\n  spanUrl = parsedSpanUrl.toString();\n\n  const filteredResources = filterResourcesForSpan(\n    spanUrl,\n    startTimeHR,\n    endTimeHR,\n    resources,\n    ignoredResources,\n    initiatorType\n  );\n\n  if (filteredResources.length === 0) {\n    return {\n      mainRequest: undefined,\n    };\n  }\n  if (filteredResources.length === 1) {\n    return {\n      mainRequest: filteredResources[0],\n    };\n  }\n  const sorted = sortResources(filteredResources);\n\n  if (parsedSpanUrl.origin !== getOrigin() && sorted.length > 1) {\n    let corsPreFlightRequest: PerformanceResourceTiming | undefined = sorted[0];\n    let mainRequest: PerformanceResourceTiming = findMainRequest(\n      sorted,\n      corsPreFlightRequest[PTN.RESPONSE_END],\n      endTimeHR\n    );\n\n    const responseEnd = corsPreFlightRequest[PTN.RESPONSE_END];\n    const fetchStart = mainRequest[PTN.FETCH_START];\n\n    // no corsPreFlightRequest\n    if (fetchStart < responseEnd) {\n      mainRequest = corsPreFlightRequest;\n      corsPreFlightRequest = undefined;\n    }\n\n    return {\n      corsPreFlightRequest,\n      mainRequest,\n    };\n  } else {\n    return {\n      mainRequest: filteredResources[0],\n    };\n  }\n}\n\n/**\n * Will find the main request skipping the cors pre flight requests\n * @param resources\n * @param corsPreFlightRequestEndTime\n * @param spanEndTimeHR\n */\nfunction findMainRequest(\n  resources: PerformanceResourceTiming[],\n  corsPreFlightRequestEndTime: number,\n  spanEndTimeHR: api.HrTime\n): PerformanceResourceTiming {\n  const spanEndTime = hrTimeToNanoseconds(spanEndTimeHR);\n  const minTime = hrTimeToNanoseconds(\n    timeInputToHrTime(corsPreFlightRequestEndTime)\n  );\n\n  let mainRequest: PerformanceResourceTiming = resources[1];\n  let bestGap;\n\n  const length = resources.length;\n  for (let i = 1; i < length; i++) {\n    const resource = resources[i];\n    const resourceStartTime = hrTimeToNanoseconds(\n      timeInputToHrTime(resource[PTN.FETCH_START])\n    );\n\n    const resourceEndTime = hrTimeToNanoseconds(\n      timeInputToHrTime(resource[PTN.RESPONSE_END])\n    );\n\n    const currentGap = spanEndTime - resourceEndTime;\n\n    if (resourceStartTime >= minTime && (!bestGap || currentGap < bestGap)) {\n      bestGap = currentGap;\n      mainRequest = resource;\n    }\n  }\n  return mainRequest;\n}\n\n/**\n * Filter all resources that has started and finished according to span start time and end time.\n *     It will return the closest resource to a start time\n * @param spanUrl\n * @param startTimeHR\n * @param endTimeHR\n * @param resources\n * @param ignoredResources\n */\nfunction filterResourcesForSpan(\n  spanUrl: string,\n  startTimeHR: api.HrTime,\n  endTimeHR: api.HrTime,\n  resources: PerformanceResourceTiming[],\n  ignoredResources: WeakSet<PerformanceResourceTiming>,\n  initiatorType?: string\n) {\n  const startTime = hrTimeToNanoseconds(startTimeHR);\n  const endTime = hrTimeToNanoseconds(endTimeHR);\n  let filteredResources = resources.filter(resource => {\n    const resourceStartTime = hrTimeToNanoseconds(\n      timeInputToHrTime(resource[PTN.FETCH_START])\n    );\n    const resourceEndTime = hrTimeToNanoseconds(\n      timeInputToHrTime(resource[PTN.RESPONSE_END])\n    );\n\n    return (\n      resource.initiatorType.toLowerCase() ===\n        (initiatorType || 'xmlhttprequest') &&\n      resource.name === spanUrl &&\n      resourceStartTime >= startTime &&\n      resourceEndTime <= endTime\n    );\n  });\n\n  if (filteredResources.length > 0) {\n    filteredResources = filteredResources.filter(resource => {\n      return !ignoredResources.has(resource);\n    });\n  }\n\n  return filteredResources;\n}\n\n/**\n * The URLLike interface represents an URL and HTMLAnchorElement compatible fields.\n */\nexport interface URLLike {\n  hash: string;\n  host: string;\n  hostname: string;\n  href: string;\n  readonly origin: string;\n  password: string;\n  pathname: string;\n  port: string;\n  protocol: string;\n  search: string;\n  username: string;\n}\n\n/**\n * Parses url using URL constructor or fallback to anchor element.\n * @param url\n */\nexport function parseUrl(url: string): URLLike {\n  if (typeof URL === 'function') {\n    return new URL(\n      url,\n      typeof document !== 'undefined'\n        ? document.baseURI\n        : typeof location !== 'undefined' // Some JS runtimes (e.g. Deno) don't define this\n        ? location.href\n        : undefined\n    );\n  }\n  const element = getUrlNormalizingAnchor();\n  element.href = url;\n  return element;\n}\n\n/**\n * Parses url using URL constructor or fallback to anchor element and serialize\n * it to a string.\n *\n * Performs the steps described in https://html.spec.whatwg.org/multipage/urls-and-fetching.html#parse-a-url\n *\n * @param url\n */\nexport function normalizeUrl(url: string): string {\n  const urlLike = parseUrl(url);\n  return urlLike.href;\n}\n\n/**\n * Get element XPath\n * @param target - target element\n * @param optimised - when id attribute of element is present the xpath can be\n * simplified to contain id\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function getElementXPath(target: any, optimised?: boolean): string {\n  if (target.nodeType === Node.DOCUMENT_NODE) {\n    return '/';\n  }\n  const targetValue = getNodeValue(target, optimised);\n  if (optimised && targetValue.indexOf('@id') > 0) {\n    return targetValue;\n  }\n  let xpath = '';\n  if (target.parentNode) {\n    xpath += getElementXPath(target.parentNode, false);\n  }\n  xpath += targetValue;\n\n  return xpath;\n}\n\n/**\n * get node index within the siblings\n * @param target\n */\nfunction getNodeIndex(target: HTMLElement): number {\n  if (!target.parentNode) {\n    return 0;\n  }\n  const allowedTypes = [target.nodeType];\n  if (target.nodeType === Node.CDATA_SECTION_NODE) {\n    allowedTypes.push(Node.TEXT_NODE);\n  }\n  let elements = Array.from(target.parentNode.childNodes);\n  elements = elements.filter((element: Node) => {\n    const localName = (element as HTMLElement).localName;\n    return (\n      allowedTypes.indexOf(element.nodeType) >= 0 &&\n      localName === target.localName\n    );\n  });\n  if (elements.length >= 1) {\n    return elements.indexOf(target) + 1; // xpath starts from 1\n  }\n  // if there are no other similar child xpath doesn't need index\n  return 0;\n}\n\n/**\n * get node value for xpath\n * @param target\n * @param optimised\n */\nfunction getNodeValue(target: HTMLElement, optimised?: boolean): string {\n  const nodeType = target.nodeType;\n  const index = getNodeIndex(target);\n  let nodeValue = '';\n  if (nodeType === Node.ELEMENT_NODE) {\n    const id = target.getAttribute('id');\n    if (optimised && id) {\n      return `//*[@id=\"${id}\"]`;\n    }\n    nodeValue = target.localName;\n  } else if (\n    nodeType === Node.TEXT_NODE ||\n    nodeType === Node.CDATA_SECTION_NODE\n  ) {\n    nodeValue = 'text()';\n  } else if (nodeType === Node.COMMENT_NODE) {\n    nodeValue = 'comment()';\n  } else {\n    return '';\n  }\n  // if index is 1 it can be omitted in xpath\n  if (nodeValue && index > 1) {\n    return `/${nodeValue}[${index}]`;\n  }\n  return `/${nodeValue}`;\n}\n\n/**\n * Checks if trace headers should be propagated\n * @param spanUrl\n * @private\n */\nexport function shouldPropagateTraceHeaders(\n  spanUrl: string,\n  propagateTraceHeaderCorsUrls?: PropagateTraceHeaderCorsUrls\n): boolean {\n  let propagateTraceHeaderUrls = propagateTraceHeaderCorsUrls || [];\n  if (\n    typeof propagateTraceHeaderUrls === 'string' ||\n    propagateTraceHeaderUrls instanceof RegExp\n  ) {\n    propagateTraceHeaderUrls = [propagateTraceHeaderUrls];\n  }\n  const parsedSpanUrl = parseUrl(spanUrl);\n\n  if (parsedSpanUrl.origin === getOrigin()) {\n    return true;\n  } else {\n    return propagateTraceHeaderUrls.some(propagateTraceHeaderUrl =>\n      urlMatches(spanUrl, propagateTraceHeaderUrl)\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}