{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */function () {\n  function NoopSpanProcessor() {}\n  NoopSpanProcessor.prototype.onStart = function (_span, _context) {};\n  NoopSpanProcessor.prototype.onEnd = function (_span) {};\n  NoopSpanProcessor.prototype.shutdown = function () {\n    return Promise.resolve();\n  };\n  NoopSpanProcessor.prototype.forceFlush = function () {\n    return Promise.resolve();\n  };\n  return NoopSpanProcessor;\n}();\nexport { NoopSpanProcessor };","map":{"version":3,"names":["NoopSpanProcessor","prototype","onStart","_span","_context","onEnd","shutdown","Promise","resolve","forceFlush"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-base/src/export/NoopSpanProcessor.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './ReadableSpan';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\n\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor implements SpanProcessor {\n  onStart(_span: Span, _context: Context): void {}\n  onEnd(_span: ReadableSpan): void {}\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAqBA;AACA,IAAAA,iBAAA;EAAA,SAAAA,kBAAA,GASA;EAREA,iBAAA,CAAAC,SAAA,CAAAC,OAAO,GAAP,UAAQC,KAAW,EAAEC,QAAiB,GAAS,CAAC;EAChDJ,iBAAA,CAAAC,SAAA,CAAAI,KAAK,GAAL,UAAMF,KAAmB,GAAS,CAAC;EACnCH,iBAAA,CAAAC,SAAA,CAAAK,QAAQ,GAAR;IACE,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EACDR,iBAAA,CAAAC,SAAA,CAAAQ,UAAU,GAAV;IACE,OAAOF,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC;EACH,OAAAR,iBAAC;AAAD,CAAC,CATD"},"metadata":{},"sourceType":"module","externalDependencies":[]}