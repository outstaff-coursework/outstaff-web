{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { MetricStorage } from './MetricStorage';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { AttributeHashMap } from './HashMap';\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for asynchronous instruments.\n */\nvar AsyncMetricStorage = /** @class */function (_super) {\n  __extends(AsyncMetricStorage, _super);\n  function AsyncMetricStorage(_instrumentDescriptor, aggregator, _attributesProcessor, collectorHandles) {\n    var _this = _super.call(this, _instrumentDescriptor) || this;\n    _this._attributesProcessor = _attributesProcessor;\n    _this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    _this._temporalMetricStorage = new TemporalMetricProcessor(aggregator, collectorHandles);\n    return _this;\n  }\n  AsyncMetricStorage.prototype.record = function (measurements, observationTime) {\n    var _this = this;\n    var processed = new AttributeHashMap();\n    Array.from(measurements.entries()).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        attributes = _b[0],\n        value = _b[1];\n      processed.set(_this._attributesProcessor.process(attributes), value);\n    });\n    this._deltaMetricStorage.batchCumulate(processed, observationTime);\n  };\n  /**\n   * Collects the metrics from this storage. The ObservableCallback is invoked\n   * during the collection.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  AsyncMetricStorage.prototype.collect = function (collector, collectionTime) {\n    var accumulations = this._deltaMetricStorage.collect();\n    return this._temporalMetricStorage.buildMetrics(collector, this._instrumentDescriptor, accumulations, collectionTime);\n  };\n  return AsyncMetricStorage;\n}(MetricStorage);\nexport { AsyncMetricStorage };","map":{"version":3,"names":["MetricStorage","DeltaMetricProcessor","TemporalMetricProcessor","AttributeHashMap","AsyncMetricStorage","_super","__extends","_instrumentDescriptor","aggregator","_attributesProcessor","collectorHandles","_this","call","_deltaMetricStorage","_temporalMetricStorage","prototype","record","measurements","observationTime","processed","Array","from","entries","forEach","_a","_b","__read","attributes","value","set","process","batchCumulate","collect","collector","collectionTime","accumulations","buildMetrics"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/state/AsyncMetricStorage.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\nimport { AsyncWritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for asynchronous instruments.\n */\nexport class AsyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements AsyncWritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    _instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(_instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(measurements: AttributeHashMap<number>, observationTime: HrTime) {\n    const processed = new AttributeHashMap<number>();\n    Array.from(measurements.entries()).forEach(([attributes, value]) => {\n      processed.set(this._attributesProcessor.process(attributes), value);\n    });\n    this._deltaMetricStorage.batchCumulate(processed, observationTime);\n  }\n\n  /**\n   * Collects the metrics from this storage. The ObservableCallback is invoked\n   * during the collection.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,SAASA,aAAa,QAAQ,iBAAiB;AAE/C,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,uBAAuB,QAAQ,2BAA2B;AAGnE,SAASC,gBAAgB,QAAQ,WAAW;AAG5C;;;;;AAKA,IAAAC,kBAAA,0BAAAC,MAAA;EACUC,SAAA,CAAAF,kBAAA,EAAAC,MAAA;EAMR,SAAAD,mBACEG,qBAA2C,EAC3CC,UAAyB,EACjBC,oBAAyC,EACjDC,gBAAyC;IAJ3C,IAAAC,KAAA,GAMEN,MAAA,CAAAO,IAAA,OAAML,qBAAqB,CAAC;IAHpBI,KAAA,CAAAF,oBAAoB,GAApBA,oBAAoB;IAI5BE,KAAI,CAACE,mBAAmB,GAAG,IAAIZ,oBAAoB,CAACO,UAAU,CAAC;IAC/DG,KAAI,CAACG,sBAAsB,GAAG,IAAIZ,uBAAuB,CACvDM,UAAU,EACVE,gBAAgB,CACjB;;EACH;EAEAN,kBAAA,CAAAW,SAAA,CAAAC,MAAM,GAAN,UAAOC,YAAsC,EAAEC,eAAuB;IAAtE,IAAAP,KAAA;IACE,IAAMQ,SAAS,GAAG,IAAIhB,gBAAgB,EAAU;IAChDiB,KAAK,CAACC,IAAI,CAACJ,YAAY,CAACK,OAAO,EAAE,CAAC,CAACC,OAAO,CAAC,UAACC,EAAmB;UAAnBC,EAAA,GAAAC,MAAA,CAAAF,EAAA,IAAmB;QAAlBG,UAAU,GAAAF,EAAA;QAAEG,KAAK,GAAAH,EAAA;MAC5DN,SAAS,CAACU,GAAG,CAAClB,KAAI,CAACF,oBAAoB,CAACqB,OAAO,CAACH,UAAU,CAAC,EAAEC,KAAK,CAAC;IACrE,CAAC,CAAC;IACF,IAAI,CAACf,mBAAmB,CAACkB,aAAa,CAACZ,SAAS,EAAED,eAAe,CAAC;EACpE,CAAC;EAED;;;;;;;EAOAd,kBAAA,CAAAW,SAAA,CAAAiB,OAAO,GAAP,UACEC,SAAgC,EAChCC,cAAsB;IAEtB,IAAMC,aAAa,GAAG,IAAI,CAACtB,mBAAmB,CAACmB,OAAO,EAAE;IAExD,OAAO,IAAI,CAAClB,sBAAsB,CAACsB,YAAY,CAC7CH,SAAS,EACT,IAAI,CAAC1B,qBAAqB,EAC1B4B,aAAa,EACbD,cAAc,CACf;EACH,CAAC;EACH,OAAA9B,kBAAC;AAAD,CAAC,CAhDSJ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}