{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance } from '@opentelemetry/core';\nimport { hasKey, PerformanceTimingNames as PTN } from '@opentelemetry/sdk-trace-web';\nimport { EventNames } from './enums/EventNames';\nexport var getPerformanceNavigationEntries = function () {\n  var _a, _b;\n  var entries = {};\n  var performanceNavigationTiming = (_b = (_a = otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'navigation')[0];\n  if (performanceNavigationTiming) {\n    var keys = Object.values(PTN);\n    keys.forEach(function (key) {\n      if (hasKey(performanceNavigationTiming, key)) {\n        var value = performanceNavigationTiming[key];\n        if (typeof value === 'number') {\n          entries[key] = value;\n        }\n      }\n    });\n  } else {\n    // // fallback to previous version\n    var perf = otperformance;\n    var performanceTiming_1 = perf.timing;\n    if (performanceTiming_1) {\n      var keys = Object.values(PTN);\n      keys.forEach(function (key) {\n        if (hasKey(performanceTiming_1, key)) {\n          var value = performanceTiming_1[key];\n          if (typeof value === 'number') {\n            entries[key] = value;\n          }\n        }\n      });\n    }\n  }\n  return entries;\n};\nvar performancePaintNames = {\n  'first-paint': EventNames.FIRST_PAINT,\n  'first-contentful-paint': EventNames.FIRST_CONTENTFUL_PAINT\n};\nexport var addSpanPerformancePaintEvents = function (span) {\n  var _a, _b;\n  var performancePaintTiming = (_b = (_a = otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'paint');\n  if (performancePaintTiming) {\n    performancePaintTiming.forEach(function (_a) {\n      var name = _a.name,\n        startTime = _a.startTime;\n      if (hasKey(performancePaintNames, name)) {\n        span.addEvent(performancePaintNames[name], startTime);\n      }\n    });\n  }\n};","map":{"version":3,"names":["otperformance","hasKey","PerformanceTimingNames","PTN","EventNames","getPerformanceNavigationEntries","entries","performanceNavigationTiming","_b","_a","getEntriesByType","call","keys","Object","values","forEach","key","value","perf","performanceTiming_1","timing","performancePaintNames","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","addSpanPerformancePaintEvents","span","performancePaintTiming","name","startTime","addEvent"],"sources":["/home/egor/node_modules/@opentelemetry/instrumentation-document-load/src/utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span } from '@opentelemetry/api';\nimport { otperformance } from '@opentelemetry/core';\nimport {\n  hasKey,\n  PerformanceEntries,\n  PerformanceLegacy,\n  PerformanceTimingNames as PTN,\n} from '@opentelemetry/sdk-trace-web';\nimport { EventNames } from './enums/EventNames';\n\nexport const getPerformanceNavigationEntries = (): PerformanceEntries => {\n  const entries: PerformanceEntries = {};\n  const performanceNavigationTiming = (\n    otperformance as unknown as Performance\n  ).getEntriesByType?.('navigation')[0] as PerformanceEntries;\n\n  if (performanceNavigationTiming) {\n    const keys = Object.values(PTN);\n    keys.forEach((key: string) => {\n      if (hasKey(performanceNavigationTiming, key)) {\n        const value = performanceNavigationTiming[key];\n        if (typeof value === 'number') {\n          entries[key] = value;\n        }\n      }\n    });\n  } else {\n    // // fallback to previous version\n    const perf: typeof otperformance & PerformanceLegacy = otperformance;\n    const performanceTiming = perf.timing;\n    if (performanceTiming) {\n      const keys = Object.values(PTN);\n      keys.forEach((key: string) => {\n        if (hasKey(performanceTiming, key)) {\n          const value = performanceTiming[key];\n          if (typeof value === 'number') {\n            entries[key] = value;\n          }\n        }\n      });\n    }\n  }\n\n  return entries;\n};\n\nconst performancePaintNames = {\n  'first-paint': EventNames.FIRST_PAINT,\n  'first-contentful-paint': EventNames.FIRST_CONTENTFUL_PAINT,\n};\n\nexport const addSpanPerformancePaintEvents = (span: Span) => {\n  const performancePaintTiming = (\n    otperformance as unknown as Performance\n  ).getEntriesByType?.('paint');\n  if (performancePaintTiming) {\n    performancePaintTiming.forEach(({ name, startTime }) => {\n      if (hasKey(performancePaintNames, name)) {\n        span.addEvent(performancePaintNames[name], startTime);\n      }\n    });\n  }\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SACEC,MAAM,EAGNC,sBAAsB,IAAIC,GAAG,QACxB,8BAA8B;AACrC,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,OAAO,IAAMC,+BAA+B,GAAG,SAAAA,CAAA;;EAC7C,IAAMC,OAAO,GAAuB,EAAE;EACtC,IAAMC,2BAA2B,GAAG,CAAAC,EAAA,IAAAC,EAAA,GAClCT,aACD,EAACU,gBAAgB,cAAAF,EAAA,uBAAAA,EAAA,CAAAG,IAAA,CAAAF,EAAA,EAAG,YAAY,EAAE,CAAC,CAAuB;EAE3D,IAAIF,2BAA2B,EAAE;IAC/B,IAAMK,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACX,GAAG,CAAC;IAC/BS,IAAI,CAACG,OAAO,CAAC,UAACC,GAAW;MACvB,IAAIf,MAAM,CAACM,2BAA2B,EAAES,GAAG,CAAC,EAAE;QAC5C,IAAMC,KAAK,GAAGV,2BAA2B,CAACS,GAAG,CAAC;QAC9C,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;UAC7BX,OAAO,CAACU,GAAG,CAAC,GAAGC,KAAK;;;IAG1B,CAAC,CAAC;GACH,MAAM;IACL;IACA,IAAMC,IAAI,GAA6ClB,aAAa;IACpE,IAAMmB,mBAAiB,GAAGD,IAAI,CAACE,MAAM;IACrC,IAAID,mBAAiB,EAAE;MACrB,IAAMP,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACX,GAAG,CAAC;MAC/BS,IAAI,CAACG,OAAO,CAAC,UAACC,GAAW;QACvB,IAAIf,MAAM,CAACkB,mBAAiB,EAAEH,GAAG,CAAC,EAAE;UAClC,IAAMC,KAAK,GAAGE,mBAAiB,CAACH,GAAG,CAAC;UACpC,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;YAC7BX,OAAO,CAACU,GAAG,CAAC,GAAGC,KAAK;;;MAG1B,CAAC,CAAC;;;EAIN,OAAOX,OAAO;AAChB,CAAC;AAED,IAAMe,qBAAqB,GAAG;EAC5B,aAAa,EAAEjB,UAAU,CAACkB,WAAW;EACrC,wBAAwB,EAAElB,UAAU,CAACmB;CACtC;AAED,OAAO,IAAMC,6BAA6B,GAAG,SAAAA,CAACC,IAAU;;EACtD,IAAMC,sBAAsB,GAAG,CAAAlB,EAAA,IAAAC,EAAA,GAC7BT,aACD,EAACU,gBAAgB,cAAAF,EAAA,uBAAAA,EAAA,CAAAG,IAAA,CAAAF,EAAA,EAAG,OAAO,CAAC;EAC7B,IAAIiB,sBAAsB,EAAE;IAC1BA,sBAAsB,CAACX,OAAO,CAAC,UAACN,EAAmB;UAAjBkB,IAAI,GAAAlB,EAAA,CAAAkB,IAAA;QAAEC,SAAS,GAAAnB,EAAA,CAAAmB,SAAA;MAC/C,IAAI3B,MAAM,CAACoB,qBAAqB,EAAEM,IAAI,CAAC,EAAE;QACvCF,IAAI,CAACI,QAAQ,CAACR,qBAAqB,CAACM,IAAI,CAAC,EAAEC,SAAS,CAAC;;IAEzD,CAAC,CAAC;;AAEN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}