{"ast":null,"code":"import { createInternalLogger, defaultBatchingConfig, defaultGlobalObjectKey, defaultInternalLoggerLevel, defaultUnpatchedConsole, isObject } from '@grafana/faro-core';\nimport { defaultEventDomain } from '../consts';\nimport { parseStacktrace } from '../instrumentations';\nimport { defaultSessionTrackingConfig } from '../instrumentations/session';\nimport { defaultMetas, defaultViewMeta } from '../metas';\nimport { k6Meta } from '../metas/k6';\nimport { FetchTransport } from '../transports';\nimport { getWebInstrumentations } from './getWebInstrumentations';\nexport function makeCoreConfig(browserConfig) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n  const transports = [];\n  const internalLogger = createInternalLogger(browserConfig.unpatchedConsole, browserConfig.internalLoggerLevel);\n  if (browserConfig.transports) {\n    if (browserConfig.url || browserConfig.apiKey) {\n      internalLogger.error('if \"transports\" is defined, \"url\" and \"apiKey\" should not be defined');\n    }\n    transports.push(...browserConfig.transports);\n  } else if (browserConfig.url) {\n    transports.push(new FetchTransport({\n      url: browserConfig.url,\n      apiKey: browserConfig.apiKey\n    }));\n  } else {\n    internalLogger.error('either \"url\" or \"transports\" must be defined');\n  }\n  function createMetas() {\n    const initialMetas = defaultMetas;\n    if (browserConfig.metas) {\n      initialMetas.push(...browserConfig.metas);\n    }\n    const isK6BrowserSession = isObject(window.k6);\n    if (isK6BrowserSession) {\n      return [...initialMetas, k6Meta];\n    }\n    return initialMetas;\n  }\n  const config = {\n    app: browserConfig.app,\n    batching: Object.assign(Object.assign({}, defaultBatchingConfig), browserConfig.batching),\n    dedupe: (_a = browserConfig.dedupe) !== null && _a !== void 0 ? _a : true,\n    globalObjectKey: browserConfig.globalObjectKey || defaultGlobalObjectKey,\n    instrumentations: (_b = browserConfig.instrumentations) !== null && _b !== void 0 ? _b : getWebInstrumentations(),\n    internalLoggerLevel: (_c = browserConfig.internalLoggerLevel) !== null && _c !== void 0 ? _c : defaultInternalLoggerLevel,\n    isolate: (_d = browserConfig.isolate) !== null && _d !== void 0 ? _d : false,\n    metas: createMetas(),\n    parseStacktrace,\n    paused: (_e = browserConfig.paused) !== null && _e !== void 0 ? _e : false,\n    preventGlobalExposure: (_f = browserConfig.preventGlobalExposure) !== null && _f !== void 0 ? _f : false,\n    transports,\n    unpatchedConsole: (_g = browserConfig.unpatchedConsole) !== null && _g !== void 0 ? _g : defaultUnpatchedConsole,\n    beforeSend: browserConfig.beforeSend,\n    eventDomain: (_h = browserConfig.eventDomain) !== null && _h !== void 0 ? _h : defaultEventDomain,\n    ignoreErrors: browserConfig.ignoreErrors,\n    sessionTracking: Object.assign(Object.assign({}, defaultSessionTrackingConfig), browserConfig.sessionTracking),\n    user: browserConfig.user,\n    view: (_j = browserConfig.view) !== null && _j !== void 0 ? _j : defaultViewMeta\n  };\n  return config;\n}","map":{"version":3,"names":["createInternalLogger","defaultBatchingConfig","defaultGlobalObjectKey","defaultInternalLoggerLevel","defaultUnpatchedConsole","isObject","defaultEventDomain","parseStacktrace","defaultSessionTrackingConfig","defaultMetas","defaultViewMeta","k6Meta","FetchTransport","getWebInstrumentations","makeCoreConfig","browserConfig","transports","internalLogger","unpatchedConsole","internalLoggerLevel","url","apiKey","error","push","createMetas","initialMetas","metas","isK6BrowserSession","window","k6","config","app","batching","Object","assign","dedupe","_a","globalObjectKey","instrumentations","_b","_c","isolate","_d","paused","_e","preventGlobalExposure","_f","_g","beforeSend","eventDomain","_h","ignoreErrors","sessionTracking","user","view","_j"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/config/makeCoreConfig.ts"],"sourcesContent":["import {\n  createInternalLogger,\n  defaultBatchingConfig,\n  defaultGlobalObjectKey,\n  defaultInternalLoggerLevel,\n  defaultUnpatchedConsole,\n  isObject,\n} from '@grafana/faro-core';\nimport type { Config, MetaItem, Transport } from '@grafana/faro-core';\n\nimport { defaultEventDomain } from '../consts';\nimport { parseStacktrace } from '../instrumentations';\nimport { defaultSessionTrackingConfig } from '../instrumentations/session';\nimport { defaultMetas, defaultViewMeta } from '../metas';\nimport { k6Meta } from '../metas/k6';\nimport { FetchTransport } from '../transports';\n\nimport { getWebInstrumentations } from './getWebInstrumentations';\nimport type { BrowserConfig } from './types';\n\nexport function makeCoreConfig(browserConfig: BrowserConfig): Config | undefined {\n  const transports: Transport[] = [];\n\n  const internalLogger = createInternalLogger(browserConfig.unpatchedConsole, browserConfig.internalLoggerLevel);\n\n  if (browserConfig.transports) {\n    if (browserConfig.url || browserConfig.apiKey) {\n      internalLogger.error('if \"transports\" is defined, \"url\" and \"apiKey\" should not be defined');\n    }\n\n    transports.push(...browserConfig.transports);\n  } else if (browserConfig.url) {\n    transports.push(\n      new FetchTransport({\n        url: browserConfig.url,\n        apiKey: browserConfig.apiKey,\n      })\n    );\n  } else {\n    internalLogger.error('either \"url\" or \"transports\" must be defined');\n  }\n\n  function createMetas(): MetaItem[] {\n    const initialMetas = defaultMetas;\n\n    if (browserConfig.metas) {\n      initialMetas.push(...browserConfig.metas);\n    }\n\n    const isK6BrowserSession = isObject((window as any).k6);\n\n    if (isK6BrowserSession) {\n      return [...initialMetas, k6Meta];\n    }\n\n    return initialMetas;\n  }\n\n  const config: Config = {\n    app: browserConfig.app,\n    batching: {\n      ...defaultBatchingConfig,\n      ...browserConfig.batching,\n    },\n    dedupe: browserConfig.dedupe ?? true,\n    globalObjectKey: browserConfig.globalObjectKey || defaultGlobalObjectKey,\n    instrumentations: browserConfig.instrumentations ?? getWebInstrumentations(),\n    internalLoggerLevel: browserConfig.internalLoggerLevel ?? defaultInternalLoggerLevel,\n    isolate: browserConfig.isolate ?? false,\n    metas: createMetas(),\n    parseStacktrace,\n    paused: browserConfig.paused ?? false,\n    preventGlobalExposure: browserConfig.preventGlobalExposure ?? false,\n    transports,\n    unpatchedConsole: browserConfig.unpatchedConsole ?? defaultUnpatchedConsole,\n\n    beforeSend: browserConfig.beforeSend,\n    eventDomain: browserConfig.eventDomain ?? defaultEventDomain,\n    ignoreErrors: browserConfig.ignoreErrors,\n\n    sessionTracking: {\n      ...defaultSessionTrackingConfig,\n      ...browserConfig.sessionTracking,\n    },\n\n    user: browserConfig.user,\n    view: browserConfig.view ?? defaultViewMeta,\n  };\n\n  return config;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}