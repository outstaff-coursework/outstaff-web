{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { context as contextApi, diag, ValueType } from '@opentelemetry/api';\nimport { millisToHrTime } from '@opentelemetry/core';\nvar SyncInstrument = /** @class */function () {\n  function SyncInstrument(_writableMetricStorage, _descriptor) {\n    this._writableMetricStorage = _writableMetricStorage;\n    this._descriptor = _descriptor;\n  }\n  SyncInstrument.prototype._record = function (value, attributes, context) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n    if (context === void 0) {\n      context = contextApi.active();\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\"non-number value provided to metric \" + this._descriptor.name + \": \" + value);\n      return;\n    }\n    if (this._descriptor.valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\"INT value type cannot accept a floating-point value for \" + this._descriptor.name + \", ignoring the fractional digits.\");\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._writableMetricStorage.record(value, attributes, context, millisToHrTime(Date.now()));\n  };\n  return SyncInstrument;\n}();\nexport { SyncInstrument };\n/**\n * The class implements {@link UpDownCounter} interface.\n */\nvar UpDownCounterInstrument = /** @class */function (_super) {\n  __extends(UpDownCounterInstrument, _super);\n  function UpDownCounterInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  UpDownCounterInstrument.prototype.add = function (value, attributes, ctx) {\n    this._record(value, attributes, ctx);\n  };\n  return UpDownCounterInstrument;\n}(SyncInstrument);\nexport { UpDownCounterInstrument };\n/**\n * The class implements {@link Counter} interface.\n */\nvar CounterInstrument = /** @class */function (_super) {\n  __extends(CounterInstrument, _super);\n  function CounterInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  CounterInstrument.prototype.add = function (value, attributes, ctx) {\n    if (value < 0) {\n      diag.warn(\"negative value provided to counter \" + this._descriptor.name + \": \" + value);\n      return;\n    }\n    this._record(value, attributes, ctx);\n  };\n  return CounterInstrument;\n}(SyncInstrument);\nexport { CounterInstrument };\n/**\n * The class implements {@link Histogram} interface.\n */\nvar HistogramInstrument = /** @class */function (_super) {\n  __extends(HistogramInstrument, _super);\n  function HistogramInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  HistogramInstrument.prototype.record = function (value, attributes, ctx) {\n    if (value < 0) {\n      diag.warn(\"negative value provided to histogram \" + this._descriptor.name + \": \" + value);\n      return;\n    }\n    this._record(value, attributes, ctx);\n  };\n  return HistogramInstrument;\n}(SyncInstrument);\nexport { HistogramInstrument };\nvar ObservableInstrument = /** @class */function () {\n  function ObservableInstrument(descriptor, metricStorages, _observableRegistry) {\n    this._observableRegistry = _observableRegistry;\n    this._descriptor = descriptor;\n    this._metricStorages = metricStorages;\n  }\n  /**\n   * @see {Observable.addCallback}\n   */\n  ObservableInstrument.prototype.addCallback = function (callback) {\n    this._observableRegistry.addCallback(callback, this);\n  };\n  /**\n   * @see {Observable.removeCallback}\n   */\n  ObservableInstrument.prototype.removeCallback = function (callback) {\n    this._observableRegistry.removeCallback(callback, this);\n  };\n  return ObservableInstrument;\n}();\nexport { ObservableInstrument };\nvar ObservableCounterInstrument = /** @class */function (_super) {\n  __extends(ObservableCounterInstrument, _super);\n  function ObservableCounterInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return ObservableCounterInstrument;\n}(ObservableInstrument);\nexport { ObservableCounterInstrument };\nvar ObservableGaugeInstrument = /** @class */function (_super) {\n  __extends(ObservableGaugeInstrument, _super);\n  function ObservableGaugeInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return ObservableGaugeInstrument;\n}(ObservableInstrument);\nexport { ObservableGaugeInstrument };\nvar ObservableUpDownCounterInstrument = /** @class */function (_super) {\n  __extends(ObservableUpDownCounterInstrument, _super);\n  function ObservableUpDownCounterInstrument() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return ObservableUpDownCounterInstrument;\n}(ObservableInstrument);\nexport { ObservableUpDownCounterInstrument };\nexport function isObservableInstrument(it) {\n  return it instanceof ObservableInstrument;\n}","map":{"version":3,"names":["context","contextApi","diag","ValueType","millisToHrTime","SyncInstrument","_writableMetricStorage","_descriptor","prototype","_record","value","attributes","active","warn","name","valueType","INT","Number","isInteger","Math","trunc","record","Date","now","UpDownCounterInstrument","_super","__extends","add","ctx","CounterInstrument","HistogramInstrument","ObservableInstrument","descriptor","metricStorages","_observableRegistry","_metricStorages","addCallback","callback","removeCallback","ObservableCounterInstrument","ObservableGaugeInstrument","ObservableUpDownCounterInstrument","isObservableInstrument","it"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/Instruments.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context as contextApi,\n  diag,\n  Context,\n  MetricAttributes,\n  ValueType,\n  UpDownCounter,\n  Counter,\n  Histogram,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n} from '@opentelemetry/api';\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from './InstrumentDescriptor';\nimport { ObservableRegistry } from './state/ObservableRegistry';\nimport {\n  AsyncWritableMetricStorage,\n  WritableMetricStorage,\n} from './state/WritableMetricStorage';\n\nexport class SyncInstrument {\n  constructor(\n    private _writableMetricStorage: WritableMetricStorage,\n    protected _descriptor: InstrumentDescriptor\n  ) {}\n\n  protected _record(\n    value: number,\n    attributes: MetricAttributes = {},\n    context: Context = contextApi.active()\n  ) {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      this._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._writableMetricStorage.record(\n      value,\n      attributes,\n      context,\n      millisToHrTime(Date.now())\n    );\n  }\n}\n\n/**\n * The class implements {@link UpDownCounter} interface.\n */\nexport class UpDownCounterInstrument\n  extends SyncInstrument\n  implements UpDownCounter\n{\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Counter} interface.\n */\nexport class CounterInstrument extends SyncInstrument implements Counter {\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to counter ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Histogram} interface.\n */\nexport class HistogramInstrument extends SyncInstrument implements Histogram {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to histogram ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    this._record(value, attributes, ctx);\n  }\n}\n\nexport class ObservableInstrument implements Observable {\n  /** @internal */\n  _metricStorages: AsyncWritableMetricStorage[];\n  /** @internal */\n  _descriptor: InstrumentDescriptor;\n\n  constructor(\n    descriptor: InstrumentDescriptor,\n    metricStorages: AsyncWritableMetricStorage[],\n    private _observableRegistry: ObservableRegistry\n  ) {\n    this._descriptor = descriptor;\n    this._metricStorages = metricStorages;\n  }\n\n  /**\n   * @see {Observable.addCallback}\n   */\n  addCallback(callback: ObservableCallback) {\n    this._observableRegistry.addCallback(callback, this);\n  }\n\n  /**\n   * @see {Observable.removeCallback}\n   */\n  removeCallback(callback: ObservableCallback) {\n    this._observableRegistry.removeCallback(callback, this);\n  }\n}\n\nexport class ObservableCounterInstrument\n  extends ObservableInstrument\n  implements ObservableCounter {}\nexport class ObservableGaugeInstrument\n  extends ObservableInstrument\n  implements ObservableGauge {}\nexport class ObservableUpDownCounterInstrument\n  extends ObservableInstrument\n  implements ObservableUpDownCounter {}\n\nexport function isObservableInstrument(\n  it: unknown\n): it is ObservableInstrument {\n  return it instanceof ObservableInstrument;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}