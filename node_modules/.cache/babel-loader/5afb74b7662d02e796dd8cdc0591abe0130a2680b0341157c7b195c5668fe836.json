{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * The {@link AttributesProcessor} is responsible for customizing which\n * attribute(s) are to be reported as metrics dimension(s) and adding\n * additional dimension(s) from the {@link Context}.\n */\nvar AttributesProcessor = /** @class */function () {\n  function AttributesProcessor() {}\n  AttributesProcessor.Noop = function () {\n    return NOOP;\n  };\n  return AttributesProcessor;\n}();\nexport { AttributesProcessor };\nvar NoopAttributesProcessor = /** @class */function (_super) {\n  __extends(NoopAttributesProcessor, _super);\n  function NoopAttributesProcessor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopAttributesProcessor.prototype.process = function (incoming, _context) {\n    return incoming;\n  };\n  return NoopAttributesProcessor;\n}(AttributesProcessor);\nexport { NoopAttributesProcessor };\n/**\n * {@link AttributesProcessor} that filters by allowed attribute names and drops any names that are not in the\n * allow list.\n */\nvar FilteringAttributesProcessor = /** @class */function (_super) {\n  __extends(FilteringAttributesProcessor, _super);\n  function FilteringAttributesProcessor(_allowedAttributeNames) {\n    var _this = _super.call(this) || this;\n    _this._allowedAttributeNames = _allowedAttributeNames;\n    return _this;\n  }\n  FilteringAttributesProcessor.prototype.process = function (incoming, _context) {\n    var _this = this;\n    var filteredAttributes = {};\n    Object.keys(incoming).filter(function (attributeName) {\n      return _this._allowedAttributeNames.includes(attributeName);\n    }).forEach(function (attributeName) {\n      return filteredAttributes[attributeName] = incoming[attributeName];\n    });\n    return filteredAttributes;\n  };\n  return FilteringAttributesProcessor;\n}(AttributesProcessor);\nexport { FilteringAttributesProcessor };\nvar NOOP = new NoopAttributesProcessor();","map":{"version":3,"names":["AttributesProcessor","Noop","NOOP","NoopAttributesProcessor","_super","__extends","prototype","process","incoming","_context","FilteringAttributesProcessor","_allowedAttributeNames","_this","call","filteredAttributes","Object","keys","filter","attributeName","includes","forEach"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/view/AttributesProcessor.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, MetricAttributes } from '@opentelemetry/api';\n\n/**\n * The {@link AttributesProcessor} is responsible for customizing which\n * attribute(s) are to be reported as metrics dimension(s) and adding\n * additional dimension(s) from the {@link Context}.\n */\nexport abstract class AttributesProcessor {\n  /**\n   * Process the metric instrument attributes.\n   *\n   * @param incoming The metric instrument attributes.\n   * @param context The active context when the instrument is synchronous.\n   * `undefined` otherwise.\n   */\n  abstract process(\n    incoming: MetricAttributes,\n    context?: Context\n  ): MetricAttributes;\n\n  static Noop() {\n    return NOOP;\n  }\n}\n\nexport class NoopAttributesProcessor extends AttributesProcessor {\n  process(incoming: MetricAttributes, _context?: Context) {\n    return incoming;\n  }\n}\n\n/**\n * {@link AttributesProcessor} that filters by allowed attribute names and drops any names that are not in the\n * allow list.\n */\nexport class FilteringAttributesProcessor extends AttributesProcessor {\n  constructor(private _allowedAttributeNames: string[]) {\n    super();\n  }\n\n  process(incoming: MetricAttributes, _context: Context): MetricAttributes {\n    const filteredAttributes: MetricAttributes = {};\n    Object.keys(incoming)\n      .filter(attributeName =>\n        this._allowedAttributeNames.includes(attributeName)\n      )\n      .forEach(\n        attributeName =>\n          (filteredAttributes[attributeName] = incoming[attributeName])\n      );\n    return filteredAttributes;\n  }\n}\n\nconst NOOP = new NoopAttributesProcessor();\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;;;AAKA,IAAAA,mBAAA;EAAA,SAAAA,oBAAA,GAgBA;EAHSA,mBAAA,CAAAC,IAAI,GAAX;IACE,OAAOC,IAAI;EACb,CAAC;EACH,OAAAF,mBAAC;AAAD,CAAC,CAhBD;;AAkBA,IAAAG,uBAAA,0BAAAC,MAAA;EAA6CC,SAAA,CAAAF,uBAAA,EAAAC,MAAA;EAA7C,SAAAD,wBAAA;;EAIA;EAHEA,uBAAA,CAAAG,SAAA,CAAAC,OAAO,GAAP,UAAQC,QAA0B,EAAEC,QAAkB;IACpD,OAAOD,QAAQ;EACjB,CAAC;EACH,OAAAL,uBAAC;AAAD,CAAC,CAJ4CH,mBAAmB;;AAMhE;;;;AAIA,IAAAU,4BAAA,0BAAAN,MAAA;EAAkDC,SAAA,CAAAK,4BAAA,EAAAN,MAAA;EAChD,SAAAM,6BAAoBC,sBAAgC;IAApD,IAAAC,KAAA,GACER,MAAA,CAAAS,IAAA,MAAO;IADWD,KAAA,CAAAD,sBAAsB,GAAtBA,sBAAsB;;EAE1C;EAEAD,4BAAA,CAAAJ,SAAA,CAAAC,OAAO,GAAP,UAAQC,QAA0B,EAAEC,QAAiB;IAArD,IAAAG,KAAA;IACE,IAAME,kBAAkB,GAAqB,EAAE;IAC/CC,MAAM,CAACC,IAAI,CAACR,QAAQ,CAAC,CAClBS,MAAM,CAAC,UAAAC,aAAa;MACnB,OAAAN,KAAI,CAACD,sBAAsB,CAACQ,QAAQ,CAACD,aAAa,CAAC;IAAnD,CAAmD,CACpD,CACAE,OAAO,CACN,UAAAF,aAAa;MACX,OAACJ,kBAAkB,CAACI,aAAa,CAAC,GAAGV,QAAQ,CAACU,aAAa,CAAC;IAA5D,CAA6D,CAChE;IACH,OAAOJ,kBAAkB;EAC3B,CAAC;EACH,OAAAJ,4BAAC;AAAD,CAAC,CAjBiDV,mBAAmB;;AAmBrE,IAAME,IAAI,GAAG,IAAIC,uBAAuB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}