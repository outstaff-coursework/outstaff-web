{"ast":null,"code":"import { defaultUnpatchedConsole } from '../unpatchedConsole';\nimport { noop } from '../utils';\nimport { defaultInternalLogger, defaultInternalLoggerLevel, InternalLoggerLevel } from './const';\nexport function createInternalLogger() {\n  let unpatchedConsole = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultUnpatchedConsole;\n  let internalLoggerLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultInternalLoggerLevel;\n  const internalLogger = defaultInternalLogger;\n  if (internalLoggerLevel > InternalLoggerLevel.OFF) {\n    internalLogger.error = internalLoggerLevel >= InternalLoggerLevel.ERROR ? function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      unpatchedConsole.error(\"\".concat(internalLogger.prefix, \"\\n\"), ...args);\n    } : noop;\n    internalLogger.warn = internalLoggerLevel >= InternalLoggerLevel.WARN ? function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      unpatchedConsole.warn(\"\".concat(internalLogger.prefix, \"\\n\"), ...args);\n    } : noop;\n    internalLogger.info = internalLoggerLevel >= InternalLoggerLevel.INFO ? function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      unpatchedConsole.info(\"\".concat(internalLogger.prefix, \"\\n\"), ...args);\n    } : noop;\n    internalLogger.debug = internalLoggerLevel >= InternalLoggerLevel.VERBOSE ? function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      unpatchedConsole.debug(\"\".concat(internalLogger.prefix, \"\\n\"), ...args);\n    } : noop;\n  }\n  return internalLogger;\n}","map":{"version":3,"names":["defaultUnpatchedConsole","noop","defaultInternalLogger","defaultInternalLoggerLevel","InternalLoggerLevel","createInternalLogger","unpatchedConsole","arguments","length","undefined","internalLoggerLevel","internalLogger","OFF","error","ERROR","_len","args","Array","_key","concat","prefix","warn","WARN","_len2","_key2","info","INFO","_len3","_key3","debug","VERBOSE","_len4","_key4"],"sources":["/home/egor/node_modules/@grafana/faro-core/src/internalLogger/createInternalLogger.ts"],"sourcesContent":["import { defaultUnpatchedConsole } from '../unpatchedConsole';\nimport type { UnpatchedConsole } from '../unpatchedConsole';\nimport { noop } from '../utils';\n\nimport { defaultInternalLogger, defaultInternalLoggerLevel, InternalLoggerLevel } from './const';\nimport type { InternalLogger } from './types';\n\nexport function createInternalLogger(\n  unpatchedConsole: UnpatchedConsole = defaultUnpatchedConsole,\n  internalLoggerLevel = defaultInternalLoggerLevel\n): InternalLogger {\n  const internalLogger = defaultInternalLogger;\n\n  if (internalLoggerLevel > InternalLoggerLevel.OFF) {\n    internalLogger.error =\n      internalLoggerLevel >= InternalLoggerLevel.ERROR\n        ? function (...args) {\n            unpatchedConsole.error(`${internalLogger.prefix}\\n`, ...args);\n          }\n        : noop;\n\n    internalLogger.warn =\n      internalLoggerLevel >= InternalLoggerLevel.WARN\n        ? function (...args) {\n            unpatchedConsole.warn(`${internalLogger.prefix}\\n`, ...args);\n          }\n        : noop;\n\n    internalLogger.info =\n      internalLoggerLevel >= InternalLoggerLevel.INFO\n        ? function (...args) {\n            unpatchedConsole.info(`${internalLogger.prefix}\\n`, ...args);\n          }\n        : noop;\n\n    internalLogger.debug =\n      internalLoggerLevel >= InternalLoggerLevel.VERBOSE\n        ? function (...args) {\n            unpatchedConsole.debug(`${internalLogger.prefix}\\n`, ...args);\n          }\n        : noop;\n  }\n\n  return internalLogger;\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,qBAAqB;AAE7D,SAASC,IAAI,QAAQ,UAAU;AAE/B,SAASC,qBAAqB,EAAEC,0BAA0B,EAAEC,mBAAmB,QAAQ,SAAS;AAGhG,OAAM,SAAUC,oBAAoBA,CAAA,EAEc;EAAA,IADhDC,gBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqCP,uBAAuB;EAAA,IAC5DU,mBAAmB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGJ,0BAA0B;EAEhD,MAAMQ,cAAc,GAAGT,qBAAqB;EAE5C,IAAIQ,mBAAmB,GAAGN,mBAAmB,CAACQ,GAAG,EAAE;IACjDD,cAAc,CAACE,KAAK,GAClBH,mBAAmB,IAAIN,mBAAmB,CAACU,KAAK,GAC5C,YAAiB;MAAA,SAAAC,IAAA,GAAAR,SAAA,CAAAC,MAAA,EAAJQ,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;QAAJF,IAAI,CAAAE,IAAA,IAAAX,SAAA,CAAAW,IAAA;MAAA;MACfZ,gBAAgB,CAACO,KAAK,IAAAM,MAAA,CAAIR,cAAc,CAACS,MAAM,SAAM,GAAGJ,IAAI,CAAC;IAC/D,CAAC,GACDf,IAAI;IAEVU,cAAc,CAACU,IAAI,GACjBX,mBAAmB,IAAIN,mBAAmB,CAACkB,IAAI,GAC3C,YAAiB;MAAA,SAAAC,KAAA,GAAAhB,SAAA,CAAAC,MAAA,EAAJQ,IAAI,OAAAC,KAAA,CAAAM,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJR,IAAI,CAAAQ,KAAA,IAAAjB,SAAA,CAAAiB,KAAA;MAAA;MACflB,gBAAgB,CAACe,IAAI,IAAAF,MAAA,CAAIR,cAAc,CAACS,MAAM,SAAM,GAAGJ,IAAI,CAAC;IAC9D,CAAC,GACDf,IAAI;IAEVU,cAAc,CAACc,IAAI,GACjBf,mBAAmB,IAAIN,mBAAmB,CAACsB,IAAI,GAC3C,YAAiB;MAAA,SAAAC,KAAA,GAAApB,SAAA,CAAAC,MAAA,EAAJQ,IAAI,OAAAC,KAAA,CAAAU,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJZ,IAAI,CAAAY,KAAA,IAAArB,SAAA,CAAAqB,KAAA;MAAA;MACftB,gBAAgB,CAACmB,IAAI,IAAAN,MAAA,CAAIR,cAAc,CAACS,MAAM,SAAM,GAAGJ,IAAI,CAAC;IAC9D,CAAC,GACDf,IAAI;IAEVU,cAAc,CAACkB,KAAK,GAClBnB,mBAAmB,IAAIN,mBAAmB,CAAC0B,OAAO,GAC9C,YAAiB;MAAA,SAAAC,KAAA,GAAAxB,SAAA,CAAAC,MAAA,EAAJQ,IAAI,OAAAC,KAAA,CAAAc,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJhB,IAAI,CAAAgB,KAAA,IAAAzB,SAAA,CAAAyB,KAAA;MAAA;MACf1B,gBAAgB,CAACuB,KAAK,IAAAV,MAAA,CAAIR,cAAc,CAACS,MAAM,SAAM,GAAGJ,IAAI,CAAC;IAC/D,CAAC,GACDf,IAAI;;EAGZ,OAAOU,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}