{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { DEFAULT_ATTRIBUTE_COUNT_LIMIT, DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, getEnvWithoutDefaults } from '@opentelemetry/core';\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n  var perInstanceDefaults = {\n    sampler: buildSamplerFromEnv()\n  };\n  var DEFAULT_CONFIG = loadDefaultConfig();\n  var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n  target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n  target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n  return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n  var spanLimits = Object.assign({}, userConfig.spanLimits);\n  var parsedEnvConfig = getEnvWithoutDefaults();\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit = (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit = (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n  return Object.assign({}, userConfig, {\n    spanLimits: spanLimits\n  });\n}","map":{"version":3,"names":["buildSamplerFromEnv","loadDefaultConfig","DEFAULT_ATTRIBUTE_COUNT_LIMIT","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","getEnvWithoutDefaults","mergeConfig","userConfig","perInstanceDefaults","sampler","DEFAULT_CONFIG","target","Object","assign","generalLimits","spanLimits","reconfigureLimits","parsedEnvConfig","attributeCountLimit","_f","_e","_d","_b","_a","_c","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_ATTRIBUTE_COUNT_LIMIT","attributeValueLengthLimit","_m","_l","_k","_h","_g","_j","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-trace-base/src/utility.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { Sampler } from './Sampler';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  return target;\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: TracerConfig): TracerConfig {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit =\n    userConfig.spanLimits?.attributeCountLimit ??\n    userConfig.generalLimits?.attributeCountLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit =\n    userConfig.spanLimits?.attributeValueLengthLimit ??\n    userConfig.generalLimits?.attributeValueLengthLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { spanLimits });\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,mBAAmB,EAAEC,iBAAiB,QAAQ,UAAU;AAGjE,SACEC,6BAA6B,EAC7BC,oCAAoC,EACpCC,qBAAqB,QAChB,qBAAqB;AAE5B;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,UAAwB;EAKlD,IAAMC,mBAAmB,GAA0B;IACjDC,OAAO,EAAER,mBAAmB;GAC7B;EAED,IAAMS,cAAc,GAAGR,iBAAiB,EAAE;EAE1C,IAAMS,MAAM,GAAGC,MAAM,CAACC,MAAM,CAC1B,EAAE,EACFH,cAAc,EACdF,mBAAmB,EACnBD,UAAU,CACX;EAEDI,MAAM,CAACG,aAAa,GAAGF,MAAM,CAACC,MAAM,CAClC,EAAE,EACFH,cAAc,CAACI,aAAa,EAC5BP,UAAU,CAACO,aAAa,IAAI,EAAE,CAC/B;EAEDH,MAAM,CAACI,UAAU,GAAGH,MAAM,CAACC,MAAM,CAC/B,EAAE,EACFH,cAAc,CAACK,UAAU,EACzBR,UAAU,CAACQ,UAAU,IAAI,EAAE,CAC5B;EAED,OAAOJ,MAAM;AACf;AAEA;;;;;AAKA,OAAM,SAAUK,iBAAiBA,CAACT,UAAwB;;EACxD,IAAMQ,UAAU,GAAGH,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEN,UAAU,CAACQ,UAAU,CAAC;EAE3D,IAAME,eAAe,GAAGZ,qBAAqB,EAAE;EAE/C;;;EAGAU,UAAU,CAACG,mBAAmB,GAC5B,CAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAAhB,UAAU,CAACQ,UAAU,cAAAQ,EAAA,uBAAAA,EAAA,CAAEL,mBAAmB,cAAAI,EAAA,cAAAA,EAAA,GAC1C,CAAAE,EAAA,GAAAjB,UAAU,CAACO,aAAa,cAAAU,EAAA,uBAAAA,EAAA,CAAEN,mBAAmB,cAAAG,EAAA,cAAAA,EAAA,GAC7CJ,eAAe,CAACQ,+BAA+B,cAAAL,EAAA,cAAAA,EAAA,GAC/CH,eAAe,CAACS,0BAA0B,cAAAP,EAAA,cAAAA,EAAA,GAC1ChB,6BAA6B;EAE/B;;;EAGAY,UAAU,CAACY,yBAAyB,GAClC,CAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAAzB,UAAU,CAACQ,UAAU,cAAAiB,EAAA,uBAAAA,EAAA,CAAEL,yBAAyB,cAAAI,EAAA,cAAAA,EAAA,GAChD,CAAAE,EAAA,GAAA1B,UAAU,CAACO,aAAa,cAAAmB,EAAA,uBAAAA,EAAA,CAAEN,yBAAyB,cAAAG,EAAA,cAAAA,EAAA,GACnDb,eAAe,CAACiB,sCAAsC,cAAAL,EAAA,cAAAA,EAAA,GACtDZ,eAAe,CAACkB,iCAAiC,cAAAP,EAAA,cAAAA,EAAA,GACjDxB,oCAAoC;EAEtC,OAAOQ,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEN,UAAU,EAAE;IAAEQ,UAAU,EAAAA;EAAA,CAAE,CAAC;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}