{"ast":null,"code":"import { isString } from '@grafana/faro-core';\nimport { unknownString } from './const';\nimport { getErrorDetails } from './getErrorDetails';\nimport { getValueAndTypeFromMessage } from './getValueAndTypeFromMessage';\nimport { buildStackFrame } from './stackFrames';\nexport function registerOnerror(api) {\n  const oldOnerror = window.onerror;\n  window.onerror = (...args) => {\n    try {\n      const [evt, source, lineno, colno, error] = args;\n      let value;\n      let type;\n      let stackFrames = [];\n      const eventIsString = isString(evt);\n      const initialStackFrame = buildStackFrame(source, unknownString, lineno, colno);\n      if (error || !eventIsString) {\n        [value, type, stackFrames] = getErrorDetails(error !== null && error !== void 0 ? error : evt);\n        if (stackFrames.length === 0) {\n          stackFrames = [initialStackFrame];\n        }\n      } else if (eventIsString) {\n        [value, type] = getValueAndTypeFromMessage(evt);\n        stackFrames = [initialStackFrame];\n      }\n      if (value) {\n        api.pushError(new Error(value), {\n          type,\n          stackFrames\n        });\n      }\n    } finally {\n      oldOnerror === null || oldOnerror === void 0 ? void 0 : oldOnerror.apply(window, args);\n    }\n  };\n}","map":{"version":3,"names":["isString","unknownString","getErrorDetails","getValueAndTypeFromMessage","buildStackFrame","registerOnerror","api","oldOnerror","window","onerror","args","evt","source","lineno","colno","error","value","type","stackFrames","eventIsString","initialStackFrame","length","pushError","Error","apply"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/instrumentations/errors/registerOnerror.ts"],"sourcesContent":["import { isString } from '@grafana/faro-core';\nimport type { API, ExceptionStackFrame } from '@grafana/faro-core';\n\nimport { unknownString } from './const';\nimport { getErrorDetails } from './getErrorDetails';\nimport { getValueAndTypeFromMessage } from './getValueAndTypeFromMessage';\nimport { buildStackFrame } from './stackFrames';\n\nexport function registerOnerror(api: API): void {\n  const oldOnerror = window.onerror;\n\n  window.onerror = (...args) => {\n    try {\n      const [evt, source, lineno, colno, error] = args;\n      let value: string | undefined;\n      let type: string | undefined;\n      let stackFrames: ExceptionStackFrame[] = [];\n      const eventIsString = isString(evt);\n      const initialStackFrame = buildStackFrame(source, unknownString, lineno, colno);\n\n      if (error || !eventIsString) {\n        [value, type, stackFrames] = getErrorDetails((error ?? evt) as Error | Event);\n\n        if (stackFrames.length === 0) {\n          stackFrames = [initialStackFrame];\n        }\n      } else if (eventIsString) {\n        [value, type] = getValueAndTypeFromMessage(evt);\n        stackFrames = [initialStackFrame];\n      }\n\n      if (value) {\n        api.pushError(new Error(value), { type, stackFrames });\n      }\n    } finally {\n      oldOnerror?.apply(window, args);\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,oBAAoB;AAG7C,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,0BAA0B,QAAQ,8BAA8B;AACzE,SAASC,eAAe,QAAQ,eAAe;AAE/C,OAAM,SAAUC,eAAeA,CAACC,GAAQ;EACtC,MAAMC,UAAU,GAAGC,MAAM,CAACC,OAAO;EAEjCD,MAAM,CAACC,OAAO,GAAG,CAAC,GAAGC,IAAI,KAAI;IAC3B,IAAI;MACF,MAAM,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,CAAC,GAAGL,IAAI;MAChD,IAAIM,KAAyB;MAC7B,IAAIC,IAAwB;MAC5B,IAAIC,WAAW,GAA0B,EAAE;MAC3C,MAAMC,aAAa,GAAGnB,QAAQ,CAACW,GAAG,CAAC;MACnC,MAAMS,iBAAiB,GAAGhB,eAAe,CAACQ,MAAM,EAAEX,aAAa,EAAEY,MAAM,EAAEC,KAAK,CAAC;MAE/E,IAAIC,KAAK,IAAI,CAACI,aAAa,EAAE;QAC3B,CAACH,KAAK,EAAEC,IAAI,EAAEC,WAAW,CAAC,GAAGhB,eAAe,CAAEa,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIJ,GAAqB,CAAC;QAE7E,IAAIO,WAAW,CAACG,MAAM,KAAK,CAAC,EAAE;UAC5BH,WAAW,GAAG,CAACE,iBAAiB,CAAC;;OAEpC,MAAM,IAAID,aAAa,EAAE;QACxB,CAACH,KAAK,EAAEC,IAAI,CAAC,GAAGd,0BAA0B,CAACQ,GAAG,CAAC;QAC/CO,WAAW,GAAG,CAACE,iBAAiB,CAAC;;MAGnC,IAAIJ,KAAK,EAAE;QACTV,GAAG,CAACgB,SAAS,CAAC,IAAIC,KAAK,CAACP,KAAK,CAAC,EAAE;UAAEC,IAAI;UAAEC;QAAW,CAAE,CAAC;;KAEzD,SAAS;MACRX,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEiB,KAAK,CAAChB,MAAM,EAAEE,IAAI,CAAC;;EAEnC,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}