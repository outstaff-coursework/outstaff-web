{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { diag, metrics, trace } from '@opentelemetry/api';\nimport * as shimmer from 'shimmer';\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nvar InstrumentationAbstract = /** @class */function () {\n  function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this.instrumentationName = instrumentationName;\n    this.instrumentationVersion = instrumentationVersion;\n    /* Api to wrap instrumented method */\n    this._wrap = shimmer.wrap;\n    /* Api to unwrap instrumented methods */\n    this._unwrap = shimmer.unwrap;\n    /* Api to mass wrap instrumented method */\n    this._massWrap = shimmer.massWrap;\n    /* Api to mass unwrap instrumented methods */\n    this._massUnwrap = shimmer.massUnwrap;\n    this._config = __assign({\n      enabled: true\n    }, config);\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName\n    });\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n  Object.defineProperty(InstrumentationAbstract.prototype, \"meter\", {\n    /* Returns meter */\n    get: function () {\n      return this._meter;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {\n    this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n    this._updateMetricInstruments();\n  };\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  InstrumentationAbstract.prototype._updateMetricInstruments = function () {\n    return;\n  };\n  /* Returns InstrumentationConfig */\n  InstrumentationAbstract.prototype.getConfig = function () {\n    return this._config;\n  };\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param InstrumentationConfig\n   */\n  InstrumentationAbstract.prototype.setConfig = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this._config = Object.assign({}, config);\n  };\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {\n    this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n  };\n  Object.defineProperty(InstrumentationAbstract.prototype, \"tracer\", {\n    /* Returns tracer */\n    get: function () {\n      return this._tracer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return InstrumentationAbstract;\n}();\nexport { InstrumentationAbstract };","map":{"version":3,"names":["diag","metrics","trace","shimmer","InstrumentationAbstract","instrumentationName","instrumentationVersion","config","_wrap","wrap","_unwrap","unwrap","_massWrap","massWrap","_massUnwrap","massUnwrap","_config","__assign","enabled","_diag","createComponentLogger","namespace","_tracer","getTracer","_meter","getMeter","_updateMetricInstruments","Object","defineProperty","prototype","get","setMeterProvider","meterProvider","getConfig","setConfig","assign","setTracerProvider","tracerProvider"],"sources":["/home/egor/node_modules/@opentelemetry/instrumentation/src/instrumentation.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  DiagLogger,\n  metrics,\n  Meter,\n  MeterProvider,\n  trace,\n  Tracer,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport * as shimmer from 'shimmer';\nimport {\n  InstrumentationModuleDefinition,\n  Instrumentation,\n  InstrumentationConfig,\n} from './types';\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport abstract class InstrumentationAbstract<T = any>\n  implements Instrumentation\n{\n  protected _config: InstrumentationConfig;\n\n  private _tracer: Tracer;\n  private _meter: Meter;\n  protected _diag: DiagLogger;\n\n  constructor(\n    public readonly instrumentationName: string,\n    public readonly instrumentationVersion: string,\n    config: InstrumentationConfig = {}\n  ) {\n    this._config = {\n      enabled: true,\n      ...config,\n    };\n\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName,\n    });\n\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n\n  /* Api to wrap instrumented method */\n  protected _wrap = shimmer.wrap;\n  /* Api to unwrap instrumented methods */\n  protected _unwrap = shimmer.unwrap;\n  /* Api to mass wrap instrumented method */\n  protected _massWrap = shimmer.massWrap;\n  /* Api to mass unwrap instrumented methods */\n  protected _massUnwrap = shimmer.massUnwrap;\n\n  /* Returns meter */\n  protected get meter(): Meter {\n    return this._meter;\n  }\n\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  public setMeterProvider(meterProvider: MeterProvider): void {\n    this._meter = meterProvider.getMeter(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    this._updateMetricInstruments();\n  }\n\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  protected _updateMetricInstruments(): void {\n    return;\n  }\n\n  /* Returns InstrumentationConfig */\n  public getConfig(): InstrumentationConfig {\n    return this._config;\n  }\n\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param InstrumentationConfig\n   */\n  public setConfig(config: InstrumentationConfig = {}): void {\n    this._config = Object.assign({}, config);\n  }\n\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  public setTracerProvider(tracerProvider: TracerProvider): void {\n    this._tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /* Returns tracer */\n  protected get tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /* Disable plugin */\n  public abstract enable(): void;\n\n  /* Enable plugin */\n  public abstract disable(): void;\n\n  /**\n   * Init method in which plugin should define _modules and patches for\n   * methods\n   */\n  protected abstract init():\n    | InstrumentationModuleDefinition<T>\n    | InstrumentationModuleDefinition<T>[]\n    | void;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SACEA,IAAI,EAEJC,OAAO,EAGPC,KAAK,QAGA,oBAAoB;AAC3B,OAAO,KAAKC,OAAO,MAAM,SAAS;AAOlC;;;AAGA,IAAAC,uBAAA;EASE,SAAAA,wBACkBC,mBAA2B,EAC3BC,sBAA8B,EAC9CC,MAAkC;IAAlC,IAAAA,MAAA;MAAAA,MAAA,KAAkC;IAAA;IAFlB,KAAAF,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,sBAAsB,GAAtBA,sBAAsB;IAkBxC;IACU,KAAAE,KAAK,GAAGL,OAAO,CAACM,IAAI;IAC9B;IACU,KAAAC,OAAO,GAAGP,OAAO,CAACQ,MAAM;IAClC;IACU,KAAAC,SAAS,GAAGT,OAAO,CAACU,QAAQ;IACtC;IACU,KAAAC,WAAW,GAAGX,OAAO,CAACY,UAAU;IAtBxC,IAAI,CAACC,OAAO,GAAAC,QAAA;MACVC,OAAO,EAAE;IAAI,GACVX,MAAM,CACV;IAED,IAAI,CAACY,KAAK,GAAGnB,IAAI,CAACoB,qBAAqB,CAAC;MACtCC,SAAS,EAAEhB;KACZ,CAAC;IAEF,IAAI,CAACiB,OAAO,GAAGpB,KAAK,CAACqB,SAAS,CAAClB,mBAAmB,EAAEC,sBAAsB,CAAC;IAE3E,IAAI,CAACkB,MAAM,GAAGvB,OAAO,CAACwB,QAAQ,CAACpB,mBAAmB,EAAEC,sBAAsB,CAAC;IAC3E,IAAI,CAACoB,wBAAwB,EAAE;EACjC;EAYAC,MAAA,CAAAC,cAAA,CAAcxB,uBAAA,CAAAyB,SAAA,SAAK;IADnB;SACA,SAAAC,CAAA;MACE,OAAO,IAAI,CAACN,MAAM;IACpB,CAAC;;;;EAED;;;;EAIOpB,uBAAA,CAAAyB,SAAA,CAAAE,gBAAgB,GAAvB,UAAwBC,aAA4B;IAClD,IAAI,CAACR,MAAM,GAAGQ,aAAa,CAACP,QAAQ,CAClC,IAAI,CAACpB,mBAAmB,EACxB,IAAI,CAACC,sBAAsB,CAC5B;IAED,IAAI,CAACoB,wBAAwB,EAAE;EACjC,CAAC;EAED;;;EAGUtB,uBAAA,CAAAyB,SAAA,CAAAH,wBAAwB,GAAlC;IACE;EACF,CAAC;EAED;EACOtB,uBAAA,CAAAyB,SAAA,CAAAI,SAAS,GAAhB;IACE,OAAO,IAAI,CAACjB,OAAO;EACrB,CAAC;EAED;;;;EAIOZ,uBAAA,CAAAyB,SAAA,CAAAK,SAAS,GAAhB,UAAiB3B,MAAkC;IAAlC,IAAAA,MAAA;MAAAA,MAAA,KAAkC;IAAA;IACjD,IAAI,CAACS,OAAO,GAAGW,MAAM,CAACQ,MAAM,CAAC,EAAE,EAAE5B,MAAM,CAAC;EAC1C,CAAC;EAED;;;;EAIOH,uBAAA,CAAAyB,SAAA,CAAAO,iBAAiB,GAAxB,UAAyBC,cAA8B;IACrD,IAAI,CAACf,OAAO,GAAGe,cAAc,CAACd,SAAS,CACrC,IAAI,CAAClB,mBAAmB,EACxB,IAAI,CAACC,sBAAsB,CAC5B;EACH,CAAC;EAGDqB,MAAA,CAAAC,cAAA,CAAcxB,uBAAA,CAAAyB,SAAA,UAAM;IADpB;SACA,SAAAC,CAAA;MACE,OAAO,IAAI,CAACR,OAAO;IACrB,CAAC;;;;EAgBH,OAAAlB,uBAAC;AAAD,CAAC,CA1GD"},"metadata":{},"sourceType":"module","externalDependencies":[]}