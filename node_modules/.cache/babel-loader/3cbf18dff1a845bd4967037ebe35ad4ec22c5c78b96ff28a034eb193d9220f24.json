{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace } from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */function () {\n  function ParentBasedSampler(config) {\n    var _a, _b, _c, _d;\n    this._root = config.root;\n    if (!this._root) {\n      globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n      this._root = new AlwaysOnSampler();\n    }\n    this._remoteParentSampled = (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n    this._remoteParentNotSampled = (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n    this._localParentSampled = (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n    this._localParentNotSampled = (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n  }\n  ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n    var parentContext = trace.getSpanContext(context);\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n      }\n      return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n  };\n  ParentBasedSampler.prototype.toString = function () {\n    return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n  };\n  return ParentBasedSampler;\n}();\nexport { ParentBasedSampler };","map":{"version":3,"names":["isSpanContextValid","TraceFlags","trace","globalErrorHandler","AlwaysOffSampler","AlwaysOnSampler","ParentBasedSampler","config","_root","root","Error","_remoteParentSampled","_a","remoteParentSampled","_remoteParentNotSampled","_b","remoteParentNotSampled","_localParentSampled","_c","localParentSampled","_localParentNotSampled","_d","localParentNotSampled","prototype","shouldSample","context","traceId","spanName","spanKind","attributes","links","parentContext","getSpanContext","isRemote","traceFlags","SAMPLED","toString"],"sources":["/home/egor/node_modules/@opentelemetry/core/src/trace/sampler/ParentBasedSampler.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  Sampler,\n  SamplingResult,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}