{"ast":null,"code":"import { isDomError, isDomException, isError, isErrorEvent, isEvent, isObject } from '@grafana/faro-core';\nimport { domErrorType, domExceptionType, objectEventValue } from './const';\nimport { getStackFramesFromError } from './stackFrames';\nexport function getErrorDetails(evt) {\n  let value;\n  let type;\n  let stackFrames = [];\n  let isDomErrorRes;\n  let isEventRes;\n  if (isErrorEvent(evt) && evt.error) {\n    value = evt.error.message;\n    type = evt.error.name;\n    stackFrames = getStackFramesFromError(evt.error);\n  } else if ((isDomErrorRes = isDomError(evt)) || isDomException(evt)) {\n    const {\n      name,\n      message\n    } = evt;\n    type = name !== null && name !== void 0 ? name : isDomErrorRes ? domErrorType : domExceptionType;\n    value = message ? \"\".concat(type, \": \").concat(message) : type;\n  } else if (isError(evt)) {\n    value = evt.message;\n    stackFrames = getStackFramesFromError(evt);\n  } else if (isObject(evt) || (isEventRes = isEvent(evt))) {\n    type = isEventRes ? evt.constructor.name : undefined;\n    value = \"\".concat(objectEventValue, \" \").concat(Object.keys(evt));\n  }\n  return [value, type, stackFrames];\n}","map":{"version":3,"names":["isDomError","isDomException","isError","isErrorEvent","isEvent","isObject","domErrorType","domExceptionType","objectEventValue","getStackFramesFromError","getErrorDetails","evt","value","type","stackFrames","isDomErrorRes","isEventRes","error","message","name","concat","constructor","undefined","Object","keys"],"sources":["/home/egor/node_modules/@grafana/faro-web-sdk/src/instrumentations/errors/getErrorDetails.ts"],"sourcesContent":["import { isDomError, isDomException, isError, isErrorEvent, isEvent, isObject } from '@grafana/faro-core';\nimport type { ExceptionStackFrame } from '@grafana/faro-core';\n\nimport { domErrorType, domExceptionType, objectEventValue } from './const';\nimport { getStackFramesFromError } from './stackFrames';\nimport type { ErrorEvent } from './types';\n\nexport function getErrorDetails(evt: ErrorEvent): [string | undefined, string | undefined, ExceptionStackFrame[]] {\n  let value: string | undefined;\n  let type: string | undefined;\n  let stackFrames: ExceptionStackFrame[] = [];\n  let isDomErrorRes: boolean | undefined;\n  let isEventRes: boolean | undefined;\n\n  if (isErrorEvent(evt) && evt.error) {\n    value = evt.error.message;\n    type = evt.error.name;\n    stackFrames = getStackFramesFromError(evt.error);\n  } else if ((isDomErrorRes = isDomError(evt)) || isDomException(evt)) {\n    const { name, message } = evt;\n\n    type = name ?? (isDomErrorRes ? domErrorType : domExceptionType);\n    value = message ? `${type}: ${message}` : type;\n  } else if (isError(evt)) {\n    value = evt.message;\n    stackFrames = getStackFramesFromError(evt);\n  } else if (isObject(evt) || (isEventRes = isEvent(evt))) {\n    type = isEventRes ? evt.constructor.name : undefined;\n    value = `${objectEventValue} ${Object.keys(evt)}`;\n  }\n\n  return [value, type, stackFrames];\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,cAAc,EAAEC,OAAO,EAAEC,YAAY,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,oBAAoB;AAGzG,SAASC,YAAY,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,SAAS;AAC1E,SAASC,uBAAuB,QAAQ,eAAe;AAGvD,OAAM,SAAUC,eAAeA,CAACC,GAAe;EAC7C,IAAIC,KAAyB;EAC7B,IAAIC,IAAwB;EAC5B,IAAIC,WAAW,GAA0B,EAAE;EAC3C,IAAIC,aAAkC;EACtC,IAAIC,UAA+B;EAEnC,IAAIb,YAAY,CAACQ,GAAG,CAAC,IAAIA,GAAG,CAACM,KAAK,EAAE;IAClCL,KAAK,GAAGD,GAAG,CAACM,KAAK,CAACC,OAAO;IACzBL,IAAI,GAAGF,GAAG,CAACM,KAAK,CAACE,IAAI;IACrBL,WAAW,GAAGL,uBAAuB,CAACE,GAAG,CAACM,KAAK,CAAC;GACjD,MAAM,IAAI,CAACF,aAAa,GAAGf,UAAU,CAACW,GAAG,CAAC,KAAKV,cAAc,CAACU,GAAG,CAAC,EAAE;IACnE,MAAM;MAAEQ,IAAI;MAAED;IAAO,CAAE,GAAGP,GAAG;IAE7BE,IAAI,GAAGM,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAKJ,aAAa,GAAGT,YAAY,GAAGC,gBAAiB;IAChEK,KAAK,GAAGM,OAAO,MAAAE,MAAA,CAAMP,IAAI,QAAAO,MAAA,CAAKF,OAAO,IAAKL,IAAI;GAC/C,MAAM,IAAIX,OAAO,CAACS,GAAG,CAAC,EAAE;IACvBC,KAAK,GAAGD,GAAG,CAACO,OAAO;IACnBJ,WAAW,GAAGL,uBAAuB,CAACE,GAAG,CAAC;GAC3C,MAAM,IAAIN,QAAQ,CAACM,GAAG,CAAC,KAAKK,UAAU,GAAGZ,OAAO,CAACO,GAAG,CAAC,CAAC,EAAE;IACvDE,IAAI,GAAGG,UAAU,GAAGL,GAAG,CAACU,WAAW,CAACF,IAAI,GAAGG,SAAS;IACpDV,KAAK,MAAAQ,MAAA,CAAMZ,gBAAgB,OAAAY,MAAA,CAAIG,MAAM,CAACC,IAAI,CAACb,GAAG,CAAC,CAAE;;EAGnD,OAAO,CAACC,KAAK,EAAEC,IAAI,EAAEC,WAAW,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}