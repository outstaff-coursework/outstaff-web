{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nexport function toAttributes(attributes) {\n  return Object.keys(attributes).map(function (key) {\n    return toKeyValue(key, attributes[key]);\n  });\n}\nexport function toKeyValue(key, value) {\n  return {\n    key: key,\n    value: toAnyValue(value)\n  };\n}\nexport function toAnyValue(value) {\n  var t = typeof value;\n  if (t === 'string') return {\n    stringValue: value\n  };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return {\n      doubleValue: value\n    };\n    return {\n      intValue: value\n    };\n  }\n  if (t === 'boolean') return {\n    boolValue: value\n  };\n  if (value instanceof Uint8Array) return {\n    bytesValue: value\n  };\n  if (Array.isArray(value)) return {\n    arrayValue: {\n      values: value.map(toAnyValue)\n    }\n  };\n  if (t === 'object' && value != null) return {\n    kvlistValue: {\n      values: Object.entries(value).map(function (_a) {\n        var _b = __read(_a, 2),\n          k = _b[0],\n          v = _b[1];\n        return toKeyValue(k, v);\n      })\n    }\n  };\n  return {};\n}","map":{"version":3,"names":["toAttributes","attributes","Object","keys","map","key","toKeyValue","value","toAnyValue","t","stringValue","Number","isInteger","doubleValue","intValue","boolValue","Uint8Array","bytesValue","Array","isArray","arrayValue","values","kvlistValue","entries","_a","_b","__read","k","v"],"sources":["/home/egor/node_modules/@opentelemetry/otlp-transformer/src/common/internal.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IAnyValue, IKeyValue } from './types';\nimport { Attributes } from '@opentelemetry/api';\n\nexport function toAttributes(attributes: Attributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n\nexport function toKeyValue(key: string, value: unknown): IKeyValue {\n  return {\n    key: key,\n    value: toAnyValue(value),\n  };\n}\n\nexport function toAnyValue(value: unknown): IAnyValue {\n  const t = typeof value;\n  if (t === 'string') return { stringValue: value as string };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return { doubleValue: value as number };\n    return { intValue: value as number };\n  }\n  if (t === 'boolean') return { boolValue: value as boolean };\n  if (value instanceof Uint8Array) return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === 'object' && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value as object).map(([k, v]) =>\n          toKeyValue(k, v)\n        ),\n      },\n    };\n\n  return {};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUA,YAAYA,CAACC,UAAsB;EACjD,OAAOC,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,GAAG,CAAC,UAAAC,GAAG;IAAI,OAAAC,UAAU,CAACD,GAAG,EAAEJ,UAAU,CAACI,GAAG,CAAC,CAAC;EAAhC,CAAgC,CAAC;AAC7E;AAEA,OAAM,SAAUC,UAAUA,CAACD,GAAW,EAAEE,KAAc;EACpD,OAAO;IACLF,GAAG,EAAEA,GAAG;IACRE,KAAK,EAAEC,UAAU,CAACD,KAAK;GACxB;AACH;AAEA,OAAM,SAAUC,UAAUA,CAACD,KAAc;EACvC,IAAME,CAAC,GAAG,OAAOF,KAAK;EACtB,IAAIE,CAAC,KAAK,QAAQ,EAAE,OAAO;IAAEC,WAAW,EAAEH;EAAe,CAAE;EAC3D,IAAIE,CAAC,KAAK,QAAQ,EAAE;IAClB,IAAI,CAACE,MAAM,CAACC,SAAS,CAACL,KAAK,CAAC,EAAE,OAAO;MAAEM,WAAW,EAAEN;IAAe,CAAE;IACrE,OAAO;MAAEO,QAAQ,EAAEP;IAAe,CAAE;;EAEtC,IAAIE,CAAC,KAAK,SAAS,EAAE,OAAO;IAAEM,SAAS,EAAER;EAAgB,CAAE;EAC3D,IAAIA,KAAK,YAAYS,UAAU,EAAE,OAAO;IAAEC,UAAU,EAAEV;EAAK,CAAE;EAC7D,IAAIW,KAAK,CAACC,OAAO,CAACZ,KAAK,CAAC,EACtB,OAAO;IAAEa,UAAU,EAAE;MAAEC,MAAM,EAAEd,KAAK,CAACH,GAAG,CAACI,UAAU;IAAC;EAAE,CAAE;EAC1D,IAAIC,CAAC,KAAK,QAAQ,IAAIF,KAAK,IAAI,IAAI,EACjC,OAAO;IACLe,WAAW,EAAE;MACXD,MAAM,EAAEnB,MAAM,CAACqB,OAAO,CAAChB,KAAe,CAAC,CAACH,GAAG,CAAC,UAACoB,EAAM;YAANC,EAAA,GAAAC,MAAA,CAAAF,EAAA,IAAM;UAALG,CAAC,GAAAF,EAAA;UAAEG,CAAC,GAAAH,EAAA;QAChD,OAAAnB,UAAU,CAACqB,CAAC,EAAEC,CAAC,CAAC;MAAhB,CAAgB;;GAGrB;EAEH,OAAO,EAAE;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}