{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { isDescriptorCompatibleWith } from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport { getConflictResolutionRecipe, getIncompatibilityDetails } from '../view/RegistrationConflicts';\n/**\n * Internal class for storing {@link MetricStorage}\n */\nvar MetricStorageRegistry = /** @class */function () {\n  function MetricStorageRegistry() {\n    this._sharedRegistry = new Map();\n    this._perCollectorRegistry = new Map();\n  }\n  MetricStorageRegistry.create = function () {\n    return new MetricStorageRegistry();\n  };\n  MetricStorageRegistry.prototype.getStorages = function (collector) {\n    var e_1, _a, e_2, _b;\n    var storages = [];\n    try {\n      for (var _c = __values(this._sharedRegistry.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var metricStorages = _d.value;\n        storages = storages.concat(metricStorages);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var perCollectorStorages = this._perCollectorRegistry.get(collector);\n    if (perCollectorStorages != null) {\n      try {\n        for (var _e = __values(perCollectorStorages.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var metricStorages = _f.value;\n          storages = storages.concat(metricStorages);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    return storages;\n  };\n  MetricStorageRegistry.prototype.register = function (storage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  };\n  MetricStorageRegistry.prototype.registerForCollector = function (collector, storage) {\n    var storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap == null) {\n      storageMap = new Map();\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n    this._registerStorage(storage, storageMap);\n  };\n  MetricStorageRegistry.prototype.findOrUpdateCompatibleStorage = function (expectedDescriptor) {\n    var storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage(expectedDescriptor, storages);\n  };\n  MetricStorageRegistry.prototype.findOrUpdateCompatibleCollectorStorage = function (collector, expectedDescriptor) {\n    var storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap === undefined) {\n      return null;\n    }\n    var storages = storageMap.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage(expectedDescriptor, storages);\n  };\n  MetricStorageRegistry.prototype._registerStorage = function (storage, storageMap) {\n    var descriptor = storage.getInstrumentDescriptor();\n    var storages = storageMap.get(descriptor.name);\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n    storages.push(storage);\n  };\n  MetricStorageRegistry.prototype._findOrUpdateCompatibleStorage = function (expectedDescriptor, existingStorages) {\n    var e_3, _a;\n    var compatibleStorage = null;\n    try {\n      for (var existingStorages_1 = __values(existingStorages), existingStorages_1_1 = existingStorages_1.next(); !existingStorages_1_1.done; existingStorages_1_1 = existingStorages_1.next()) {\n        var existingStorage = existingStorages_1_1.value;\n        var existingDescriptor = existingStorage.getInstrumentDescriptor();\n        if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n          // Use the longer description if it does not match.\n          if (existingDescriptor.description !== expectedDescriptor.description) {\n            if (expectedDescriptor.description.length > existingDescriptor.description.length) {\n              existingStorage.updateDescription(expectedDescriptor.description);\n            }\n            api.diag.warn('A view or instrument with the name ', expectedDescriptor.name, ' has already been registered, but has a different description and is incompatible with another registered view.\\n', 'Details:\\n', getIncompatibilityDetails(existingDescriptor, expectedDescriptor), 'The longer description will be used.\\nTo resolve the conflict:', getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n          }\n          // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n          compatibleStorage = existingStorage;\n        } else {\n          // The implementation SHOULD warn about duplicate instrument registration\n          // conflicts after applying View configuration.\n          api.diag.warn('A view or instrument with the name ', expectedDescriptor.name, ' has already been registered and is incompatible with another registered view.\\n', 'Details:\\n', getIncompatibilityDetails(existingDescriptor, expectedDescriptor), 'To resolve the conflict:\\n', getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (existingStorages_1_1 && !existingStorages_1_1.done && (_a = existingStorages_1.return)) _a.call(existingStorages_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return compatibleStorage;\n  };\n  return MetricStorageRegistry;\n}();\nexport { MetricStorageRegistry };","map":{"version":3,"names":["isDescriptorCompatibleWith","api","getConflictResolutionRecipe","getIncompatibilityDetails","MetricStorageRegistry","_sharedRegistry","Map","_perCollectorRegistry","create","prototype","getStorages","collector","storages","_c","__values","values","_d","next","done","metricStorages","value","concat","perCollectorStorages","get","_e","_f","register","storage","_registerStorage","registerForCollector","storageMap","set","findOrUpdateCompatibleStorage","expectedDescriptor","name","undefined","_findOrUpdateCompatibleStorage","findOrUpdateCompatibleCollectorStorage","descriptor","getInstrumentDescriptor","push","existingStorages","compatibleStorage","existingStorages_1","existingStorages_1_1","existingStorage","existingDescriptor","description","length","updateDescription","diag","warn"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorageRegistry.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricStorage } from './MetricStorage';\nimport {\n  InstrumentDescriptor,\n  isDescriptorCompatibleWith,\n} from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport {\n  getConflictResolutionRecipe,\n  getIncompatibilityDetails,\n} from '../view/RegistrationConflicts';\nimport { MetricCollectorHandle } from './MetricCollector';\n\ntype StorageMap = Map<string, MetricStorage[]>;\n\n/**\n * Internal class for storing {@link MetricStorage}\n */\nexport class MetricStorageRegistry {\n  private readonly _sharedRegistry: StorageMap = new Map();\n  private readonly _perCollectorRegistry = new Map<\n    MetricCollectorHandle,\n    StorageMap\n  >();\n\n  static create() {\n    return new MetricStorageRegistry();\n  }\n\n  getStorages(collector: MetricCollectorHandle): MetricStorage[] {\n    let storages: MetricStorage[] = [];\n    for (const metricStorages of this._sharedRegistry.values()) {\n      storages = storages.concat(metricStorages);\n    }\n\n    const perCollectorStorages = this._perCollectorRegistry.get(collector);\n    if (perCollectorStorages != null) {\n      for (const metricStorages of perCollectorStorages.values()) {\n        storages = storages.concat(metricStorages);\n      }\n    }\n\n    return storages;\n  }\n\n  register(storage: MetricStorage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  }\n\n  registerForCollector(\n    collector: MetricCollectorHandle,\n    storage: MetricStorage\n  ) {\n    let storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap == null) {\n      storageMap = new Map();\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n    this._registerStorage(storage, storageMap);\n  }\n\n  findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  findOrUpdateCompatibleCollectorStorage<T extends MetricStorage>(\n    collector: MetricCollectorHandle,\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap === undefined) {\n      return null;\n    }\n\n    const storages = storageMap.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  private _registerStorage(storage: MetricStorage, storageMap: StorageMap) {\n    const descriptor = storage.getInstrumentDescriptor();\n    const storages = storageMap.get(descriptor.name);\n\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n\n    storages.push(storage);\n  }\n\n  private _findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor,\n    existingStorages: MetricStorage[]\n  ): T | null {\n    let compatibleStorage = null;\n\n    for (const existingStorage of existingStorages) {\n      const existingDescriptor = existingStorage.getInstrumentDescriptor();\n\n      if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n        // Use the longer description if it does not match.\n        if (existingDescriptor.description !== expectedDescriptor.description) {\n          if (\n            expectedDescriptor.description.length >\n            existingDescriptor.description.length\n          ) {\n            existingStorage.updateDescription(expectedDescriptor.description);\n          }\n\n          api.diag.warn(\n            'A view or instrument with the name ',\n            expectedDescriptor.name,\n            ' has already been registered, but has a different description and is incompatible with another registered view.\\n',\n            'Details:\\n',\n            getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n            'The longer description will be used.\\nTo resolve the conflict:',\n            getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n          );\n        }\n        // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n        compatibleStorage = existingStorage as T;\n      } else {\n        // The implementation SHOULD warn about duplicate instrument registration\n        // conflicts after applying View configuration.\n        api.diag.warn(\n          'A view or instrument with the name ',\n          expectedDescriptor.name,\n          ' has already been registered and is incompatible with another registered view.\\n',\n          'Details:\\n',\n          getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n          'To resolve the conflict:\\n',\n          getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n        );\n      }\n    }\n\n    return compatibleStorage;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}