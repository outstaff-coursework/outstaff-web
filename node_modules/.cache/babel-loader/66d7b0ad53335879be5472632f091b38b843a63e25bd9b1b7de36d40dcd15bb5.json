{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createInstrumentDescriptor } from '../InstrumentDescriptor';\n/**\n * Internal interface.\n *\n * Represents a storage from which we can collect metrics.\n */\nvar MetricStorage = /** @class */function () {\n  function MetricStorage(_instrumentDescriptor) {\n    this._instrumentDescriptor = _instrumentDescriptor;\n  }\n  MetricStorage.prototype.getInstrumentDescriptor = function () {\n    return this._instrumentDescriptor;\n  };\n  MetricStorage.prototype.updateDescription = function (description) {\n    this._instrumentDescriptor = createInstrumentDescriptor(this._instrumentDescriptor.name, this._instrumentDescriptor.type, {\n      description: description,\n      valueType: this._instrumentDescriptor.valueType,\n      unit: this._instrumentDescriptor.unit,\n      advice: this._instrumentDescriptor.advice\n    });\n  };\n  return MetricStorage;\n}();\nexport { MetricStorage };","map":{"version":3,"names":["createInstrumentDescriptor","MetricStorage","_instrumentDescriptor","prototype","getInstrumentDescriptor","updateDescription","description","name","type","valueType","unit","advice"],"sources":["/home/egor/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorage.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { MetricData } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport {\n  createInstrumentDescriptor,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\n\n/**\n * Internal interface.\n *\n * Represents a storage from which we can collect metrics.\n */\nexport abstract class MetricStorage {\n  constructor(protected _instrumentDescriptor: InstrumentDescriptor) {}\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  abstract collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData>;\n\n  getInstrumentDescriptor(): Readonly<InstrumentDescriptor> {\n    return this._instrumentDescriptor;\n  }\n\n  updateDescription(description: string): void {\n    this._instrumentDescriptor = createInstrumentDescriptor(\n      this._instrumentDescriptor.name,\n      this._instrumentDescriptor.type,\n      {\n        description: description,\n        valueType: this._instrumentDescriptor.valueType,\n        unit: this._instrumentDescriptor.unit,\n        advice: this._instrumentDescriptor.advice,\n      }\n    );\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAoBA,SACEA,0BAA0B,QAErB,yBAAyB;AAEhC;;;;;AAKA,IAAAC,aAAA;EACE,SAAAA,cAAsBC,qBAA2C;IAA3C,KAAAA,qBAAqB,GAArBA,qBAAqB;EAAyB;EAapED,aAAA,CAAAE,SAAA,CAAAC,uBAAuB,GAAvB;IACE,OAAO,IAAI,CAACF,qBAAqB;EACnC,CAAC;EAEDD,aAAA,CAAAE,SAAA,CAAAE,iBAAiB,GAAjB,UAAkBC,WAAmB;IACnC,IAAI,CAACJ,qBAAqB,GAAGF,0BAA0B,CACrD,IAAI,CAACE,qBAAqB,CAACK,IAAI,EAC/B,IAAI,CAACL,qBAAqB,CAACM,IAAI,EAC/B;MACEF,WAAW,EAAEA,WAAW;MACxBG,SAAS,EAAE,IAAI,CAACP,qBAAqB,CAACO,SAAS;MAC/CC,IAAI,EAAE,IAAI,CAACR,qBAAqB,CAACQ,IAAI;MACrCC,MAAM,EAAE,IAAI,CAACT,qBAAqB,CAACS;KACpC,CACF;EACH,CAAC;EACH,OAAAV,aAAC;AAAD,CAAC,CA9BD"},"metadata":{},"sourceType":"module","externalDependencies":[]}