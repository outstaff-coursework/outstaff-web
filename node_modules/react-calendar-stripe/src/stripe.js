import React from 'react';
import Meeting from './meeting.js'

import './stripe.css'


class Stripe extends React.Component {
    colors = ['#17ccf9', '#3dc5f7', '#53bdf5', '#73acf1', '#a185e9', '#be61af', '#d82354', '#d02867', '#c72d77', '#a94092']

    constructor(props) {
        super(props)
        
        let meetings_z_index = []
        for (let i = 0; i < props.data.meetings.length; i++) {
            meetings_z_index[i] = 1 + i
        }

        this.state = {
            meetings_z_index: meetings_z_index,
            stripe_width: 1,
            stripe_height: 1,
        }

        this.onClickCallback = this.onClickCallback.bind(this);
        this.ref = React.createRef()
    }

    componentDidMount() {
        this.setState({
            stripe_width: this.ref.current.offsetWidth,
            stripe_height: this.ref.current.offsetHeight,
        })
      }

    onClickCallback(index) {
        let new_mzi = this.state.meetings_z_index
        let prev = new_mzi[index]
        for (let i = 0; i < new_mzi.length; i++) {
            if (i === index) {
                new_mzi[i] = 1
                continue
            }
            if (new_mzi[i] < prev) {
                new_mzi[i]++
            }
        }
        this.setState({
            meetings_z_index: new_mzi,
        })
    }

    renderMeetings() {
        let result = []
        let index = 0
        this.props.data.meetings.forEach(meeting => {
            result.push(
                <Meeting
                    meeting={meeting}
                    id={index}
                    z_index={this.state.meetings_z_index[index]}
                    color={this.colors[index]}
                    onClickCallback={this.onClickCallback}
                    is_horizontal={this.props.is_horizontal}
                    stripe_width={this.state.stripe_width}
                    stripe_height={this.state.stripe_height}
                ></Meeting>
            )
            index++
        })
        return result
    }

    renderSpacers() {
        let result = []
        let delta = this.state.stripe_width / 24;
        for (let i = 1; i < 24; i++) {
            let width, height
            if (this.props.is_horizontal) {
                width = 2
                height = this.state.stripe_height
            } else {
                width = this.state.stripe_width
                height = 2
            }
            let style = {
                width: width.toString() + 'px',
                height: height.toString() + 'px',
            }
            if (this.props.is_horizontal) {
                style.left = delta * i
            } else {
                style.top = delta * i
            }
            result.push(
                <div
                    className='rcs-stripe-spacer'
                    style={style}
                ></div>
            )
        }
        return result
    }

    render() {
        return (
            <div className='rcs-stripe' ref={this.ref}>
                {this.renderSpacers()}
                {this.renderMeetings()}
            </div>
        )
    }
}

module.exports = Stripe
